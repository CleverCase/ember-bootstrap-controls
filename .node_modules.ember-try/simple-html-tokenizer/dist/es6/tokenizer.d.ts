export interface TokenizerOptions {
    loc?: any;
}
export declare type Attribute = [string, string, boolean];
export interface Token {
    type: string;
    chars?: string;
    attributes?: Attribute[];
    tagName?: string;
    selfClosing?: boolean;
    loc?: {
        start: {
            line: number;
            column: number;
        };
        end: {
            line: number;
            column: number;
        };
    };
    syntaxError?: string;
}
export default class Tokenizer {
    private options;
    private token;
    private startLine;
    private startColumn;
    private tokenizer;
    private tokens;
    private currentAttribute;
    constructor(entityParser: any, options?: TokenizerOptions);
    tokenize(input: any): Token[];
    tokenizePart(input: any): Token[];
    tokenizeEOF(): Token;
    reset(): void;
    addLocInfo(): void;
    beginData(): void;
    appendToData(char: any): void;
    finishData(): void;
    beginComment(): void;
    appendToCommentData(char: any): void;
    finishComment(): void;
    beginStartTag(): void;
    beginEndTag(): void;
    finishTag(): void;
    markTagAsSelfClosing(): void;
    appendToTagName(char: any): void;
    beginAttribute(): void;
    appendToAttributeName(char: any): void;
    beginAttributeValue(isQuoted: any): void;
    appendToAttributeValue(char: any): void;
    finishAttributeValue(): void;
    reportSyntaxError(message: string): void;
}
