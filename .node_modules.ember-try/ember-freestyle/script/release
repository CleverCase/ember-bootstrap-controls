#!/usr/bin/env ruby
require 'gem_release'
require 'json'

DEFAULT_TARGET = 'patch'
VALID_TARGETS = ['major', 'minor', 'patch', 'pre', 'release']
CHANGELOG_PATH = 'CHANGELOG.md'
REPOSITORY = 'chrislopresto/ember-freestyle'
BRANCH_NAME = 'master'
HEADER_LABEL = 'Release Notes'
WEBHOOK_URL = ENV['EMBER_FREESTYLE_SLACK_WEBHOOK']
SLACK_CHANNEL = 'projects'

POSITIVE_EMOJI = %w(
  :sparkles:
  :star:
  :star2:
  :dizzy:
  :boom:
  :+1:
  :ok_hand:
  :pray:
  :raised_hands:
  :clap:
  :metal:
  :dancers:
  :ok_woman:
  :zap:
  :sun_with_face:
  :squirrel:
  :flags:
  :fireworks:
  :sparkler:
  :gift:
  :balloon:
  :moneybag:
  :nut_and_bolt:
  :golf:
  :guitar:
  :hamburger:
  :ghost:
  :dart:
  :heart_eyes_cat:
).freeze

def positive_emojis
  POSITIVE_EMOJI.sample(3).join(' ')
end

def target
  target_value = ARGV[0] || DEFAULT_TARGET

  unless VALID_TARGETS.include?(target_value)
    puts red "Invalid target: #{target_value}.\n"
    puts "Must call release command with one of the following targets: #{VALID_TARGETS.join(' ')}"
    exit 1
  end

  @target ||= target_value
end

def version_file
  @version_file ||= GemRelease::VersionFile.new target: target
end

def old_version
  @old_version ||= JSON.parse(File.read('package.json'))['version']
end

def new_version
  @new_version ||= old_version.sub(GemRelease::VersionFile::NUMBER_PATTERN) do
    version_file.send(target, $1, $2, $3)
  end
end

def colorize(text, color_code)
  "\e[#{color_code}m#{text}\e[0m"
end

def red(text)
  colorize(text, 31)
end

def green(text)
  colorize(text, 32)
end

def execute(command_name, command)
  system command

  if $?.exitstatus > 0
    puts red "Command Failed: #{command_name}"
    exit 1
  end
end

def pr_label
  "**Merged Pull Requests** #{positive_emojis}"
end

def generate_changelog
  puts "Generating changelog..."
  execute "Generate Changelog", "github_changelog_generator --future-release v#{new_version} --output #{CHANGELOG_PATH} --header-label '# #{HEADER_LABEL}' --pr-label '#{pr_label}'"
  execute "Add Changelog to git", "git add #{CHANGELOG_PATH}"
  puts "Changelog generation complete! https://github.com/#{REPOSITORY}/blob/#{BRANCH_NAME}/#{CHANGELOG_PATH}"
end

def release
  puts "Releasing..."
  target_flag = target == "patch" ? "" : "--#{target}"
  execute "Release", "ember release #{target_flag} --yes --publish"
  puts "Release complete! #{version_link}"
end

def publish_gh_pages
  puts "Publishing gh_pages..."
  execute "Publish gh_pages", "ember github-pages:commit --message \"Deploy gh-pages from commit $(git rev-parse HEAD)\"; git push; git checkout - ; git push; git checkout master"
  puts "Publishing gh_pages complete!"
end

def version_link
  "https://github.com/#{REPOSITORY}/releases/tag/v#{new_version}"
end

def send_slack_notification
  version_link_from_text = "<#{version_link}|version #{new_version}>"
  payload = {
    channel: "##{SLACK_CHANNEL}",
    attachments: [
      {
        fallback: "#{REPOSITORY} released at #{version_link_from_text}",
        pretext: "#{REPOSITORY} has been released! #{positive_emojis}",
        color: "good",
        text: "Bumped to #{version_link_from_text}"
      }
    ]
  }.to_json

  execute "Slack Notification", "curl -X POST --data-urlencode 'payload=#{payload}' #{WEBHOOK_URL}"
end

puts "RELEASING #{REPOSITORY}"
puts "-----------------------"
puts "RELEASE TARGET: #{target}"
puts "OLD VERSION: #{old_version}"
puts "NEW VERSION: #{new_version}"

generate_changelog
release
publish_gh_pages
send_slack_notification

puts ""
puts green "All done!"
exit 0
