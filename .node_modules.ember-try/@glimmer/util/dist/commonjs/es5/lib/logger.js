"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}

var LogLevel = exports.LogLevel = undefined;
(function (LogLevel) {
    LogLevel[LogLevel["Trace"] = 0] = "Trace";
    LogLevel[LogLevel["Debug"] = 1] = "Debug";
    LogLevel[LogLevel["Warn"] = 2] = "Warn";
    LogLevel[LogLevel["Error"] = 3] = "Error";
})(LogLevel || (exports.LogLevel = LogLevel = {}));

var NullConsole = function () {
    function NullConsole() {
        _classCallCheck(this, NullConsole);
    }

    NullConsole.prototype.log = function log(_message) {};

    NullConsole.prototype.warn = function warn(_message) {};

    NullConsole.prototype.error = function error(_message) {};

    NullConsole.prototype.trace = function trace() {};

    return NullConsole;
}();

var ALWAYS = void 0;
var Logger = exports.Logger = function () {
    function Logger(_ref) {
        var console = _ref.console,
            level = _ref.level;

        _classCallCheck(this, Logger);

        this.f = ALWAYS;
        this.force = ALWAYS;
        this.console = console;
        this.level = level;
    }

    Logger.prototype.skipped = function skipped(level) {
        return level < this.level;
    };

    Logger.prototype.trace = function trace(message) {
        var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
            _ref2$stackTrace = _ref2.stackTrace,
            stackTrace = _ref2$stackTrace === undefined ? false : _ref2$stackTrace;

        if (this.skipped(LogLevel.Trace)) return;
        this.console.log(message);
        if (stackTrace) this.console.trace();
    };

    Logger.prototype.debug = function debug(message) {
        var _ref3 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
            _ref3$stackTrace = _ref3.stackTrace,
            stackTrace = _ref3$stackTrace === undefined ? false : _ref3$stackTrace;

        if (this.skipped(LogLevel.Debug)) return;
        this.console.log(message);
        if (stackTrace) this.console.trace();
    };

    Logger.prototype.warn = function warn(message) {
        var _ref4 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
            _ref4$stackTrace = _ref4.stackTrace,
            stackTrace = _ref4$stackTrace === undefined ? false : _ref4$stackTrace;

        if (this.skipped(LogLevel.Warn)) return;
        this.console.warn(message);
        if (stackTrace) this.console.trace();
    };

    Logger.prototype.error = function error(message) {
        if (this.skipped(LogLevel.Error)) return;
        this.console.error(message);
    };

    return Logger;
}();
var _console = typeof console === 'undefined' ? new NullConsole() : console;
ALWAYS = new Logger({ console: _console, level: LogLevel.Trace });
var LOG_LEVEL = LogLevel.Debug;
exports.default = new Logger({ console: _console, level: LOG_LEVEL });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9sb2dnZXIuanMiXSwibmFtZXMiOlsiTG9nTGV2ZWwiLCJOdWxsQ29uc29sZSIsImxvZyIsIl9tZXNzYWdlIiwid2FybiIsImVycm9yIiwidHJhY2UiLCJBTFdBWVMiLCJMb2dnZXIiLCJjb25zb2xlIiwibGV2ZWwiLCJmIiwiZm9yY2UiLCJza2lwcGVkIiwibWVzc2FnZSIsInN0YWNrVHJhY2UiLCJUcmFjZSIsImRlYnVnIiwiRGVidWciLCJXYXJuIiwiRXJyb3IiLCJfY29uc29sZSIsIkxPR19MRVZFTCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUE7O0FBQU8sSUFBSSxBQUFKO0FBQ1AsQ0FBQyxVQUFVLEFBQVYsVUFBb0IsQUFDakI7YUFBUyxTQUFTLEFBQVQsV0FBb0IsQUFBN0IsS0FBa0MsQUFBbEMsQUFDQTthQUFTLFNBQVMsQUFBVCxXQUFvQixBQUE3QixLQUFrQyxBQUFsQyxBQUNBO2FBQVMsU0FBUyxBQUFULFVBQW1CLEFBQTVCLEtBQWlDLEFBQWpDLEFBQ0E7YUFBUyxTQUFTLEFBQVQsV0FBb0IsQUFBN0IsS0FBa0MsQUFBbEMsQUFDSDtBQUxELEdBS0csZ0NBQWEsV0FBVyxBQUF4QixBQUxIOztJQU1NLEE7Ozs7OzBCQUNGLEEsbUJBQUksQSxVQUFVLEFBQUUsQzs7MEJBQ2hCLEEscUJBQUssQSxVQUFVLEFBQUUsQzs7MEJBQ2pCLEEsdUJBQU0sQSxVQUFVLEFBQUUsQzs7MEJBQ2xCLEEseUJBQVEsQUFBRSxDOzs7OztBQUVkLElBQUksY0FBSixBQUNBO0lBQWEsQUFBYixzQ0FDSTswQkFBZ0M7WUFBbEIsQUFBa0IsZUFBbEIsQUFBa0I7WUFBVCxBQUFTLGFBQVQsQUFBUzs7OEJBQzVCOzthQUFLLEFBQUwsSUFBUyxBQUFULEFBQ0E7YUFBSyxBQUFMLFFBQWEsQUFBYixBQUNBO2FBQUssQUFBTCxVQUFlLEFBQWYsQUFDQTthQUFLLEFBQUwsUUFBYSxBQUFiLEFBQ0g7QUFOTDs7cUJBT0ksQUFQSiwyQkFPWSxBQVBaLE9BT21CLEFBQ1g7ZUFBTyxRQUFRLEtBQUssQUFBcEIsQUFDSDtBQVRMOztxQkFVSSxBQVZKLHVCQVVVLEFBVlYsU0FVZ0Q7d0ZBQUosQUFBSTtxQ0FBM0IsQUFBMkI7WUFBM0IsQUFBMkIsOENBQWQsQUFBYyxRQUN4Qzs7WUFBSSxLQUFLLEFBQUwsUUFBYSxTQUFTLEFBQXRCLEFBQUosUUFBa0MsQUFDbEM7YUFBSyxBQUFMLFFBQWEsQUFBYixJQUFpQixBQUFqQixBQUNBO1lBQUksQUFBSixZQUFnQixLQUFLLEFBQUwsUUFBYSxBQUFiLEFBQ25CO0FBZEw7O3FCQWVJLEFBZkosdUJBZVUsQUFmVixTQWVnRDt3RkFBSixBQUFJO3FDQUEzQixBQUEyQjtZQUEzQixBQUEyQiw4Q0FBZCxBQUFjLFFBQ3hDOztZQUFJLEtBQUssQUFBTCxRQUFhLFNBQVMsQUFBdEIsQUFBSixRQUFrQyxBQUNsQzthQUFLLEFBQUwsUUFBYSxBQUFiLElBQWlCLEFBQWpCLEFBQ0E7WUFBSSxBQUFKLFlBQWdCLEtBQUssQUFBTCxRQUFhLEFBQWIsQUFDbkI7QUFuQkw7O3FCQW9CSSxBQXBCSixxQkFvQlMsQUFwQlQsU0FvQitDO3dGQUFKLEFBQUk7cUNBQTNCLEFBQTJCO1lBQTNCLEFBQTJCLDhDQUFkLEFBQWMsUUFDdkM7O1lBQUksS0FBSyxBQUFMLFFBQWEsU0FBUyxBQUF0QixBQUFKLE9BQWlDLEFBQ2pDO2FBQUssQUFBTCxRQUFhLEFBQWIsS0FBa0IsQUFBbEIsQUFDQTtZQUFJLEFBQUosWUFBZ0IsS0FBSyxBQUFMLFFBQWEsQUFBYixBQUNuQjtBQXhCTDs7cUJBeUJJLEFBekJKLHVCQXlCVSxBQXpCVixTQXlCbUIsQUFDWDtZQUFJLEtBQUssQUFBTCxRQUFhLFNBQVMsQUFBdEIsQUFBSixRQUFrQyxBQUNsQzthQUFLLEFBQUwsUUFBYSxBQUFiLE1BQW1CLEFBQW5CLEFBQ0g7QUE1Qkw7O1dBQUE7O0FBOEJBLElBQUksV0FBVyxPQUFPLEFBQVAsWUFBbUIsQUFBbkIsY0FBaUMsSUFBSSxBQUFKLEFBQWpDLGdCQUFxRCxBQUFwRTtBQUNBLFNBQVMsSUFBSSxBQUFKLE9BQVcsRUFBRSxTQUFTLEFBQVgsVUFBcUIsT0FBTyxTQUFTLEFBQXJDLEFBQVgsQUFBVDtBQUNBLElBQU0sWUFBWSxTQUFTLEFBQTNCLEFBQ0E7a0JBQWUsSUFBSSxBQUFKLE9BQVcsRUFBRSxTQUFTLEFBQVgsVUFBcUIsT0FBTyxBQUE1QixBQUFYLEFBQWYiLCJmaWxlIjoibGliL2xvZ2dlci5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCB2YXIgTG9nTGV2ZWw7XG4oZnVuY3Rpb24gKExvZ0xldmVsKSB7XG4gICAgTG9nTGV2ZWxbTG9nTGV2ZWxbXCJUcmFjZVwiXSA9IDBdID0gXCJUcmFjZVwiO1xuICAgIExvZ0xldmVsW0xvZ0xldmVsW1wiRGVidWdcIl0gPSAxXSA9IFwiRGVidWdcIjtcbiAgICBMb2dMZXZlbFtMb2dMZXZlbFtcIldhcm5cIl0gPSAyXSA9IFwiV2FyblwiO1xuICAgIExvZ0xldmVsW0xvZ0xldmVsW1wiRXJyb3JcIl0gPSAzXSA9IFwiRXJyb3JcIjtcbn0pKExvZ0xldmVsIHx8IChMb2dMZXZlbCA9IHt9KSk7XG5jbGFzcyBOdWxsQ29uc29sZSB7XG4gICAgbG9nKF9tZXNzYWdlKSB7fVxuICAgIHdhcm4oX21lc3NhZ2UpIHt9XG4gICAgZXJyb3IoX21lc3NhZ2UpIHt9XG4gICAgdHJhY2UoKSB7fVxufVxubGV0IEFMV0FZUztcbmV4cG9ydCBjbGFzcyBMb2dnZXIge1xuICAgIGNvbnN0cnVjdG9yKHsgY29uc29sZSwgbGV2ZWwgfSkge1xuICAgICAgICB0aGlzLmYgPSBBTFdBWVM7XG4gICAgICAgIHRoaXMuZm9yY2UgPSBBTFdBWVM7XG4gICAgICAgIHRoaXMuY29uc29sZSA9IGNvbnNvbGU7XG4gICAgICAgIHRoaXMubGV2ZWwgPSBsZXZlbDtcbiAgICB9XG4gICAgc2tpcHBlZChsZXZlbCkge1xuICAgICAgICByZXR1cm4gbGV2ZWwgPCB0aGlzLmxldmVsO1xuICAgIH1cbiAgICB0cmFjZShtZXNzYWdlLCB7IHN0YWNrVHJhY2UgPSBmYWxzZSB9ID0ge30pIHtcbiAgICAgICAgaWYgKHRoaXMuc2tpcHBlZChMb2dMZXZlbC5UcmFjZSkpIHJldHVybjtcbiAgICAgICAgdGhpcy5jb25zb2xlLmxvZyhtZXNzYWdlKTtcbiAgICAgICAgaWYgKHN0YWNrVHJhY2UpIHRoaXMuY29uc29sZS50cmFjZSgpO1xuICAgIH1cbiAgICBkZWJ1ZyhtZXNzYWdlLCB7IHN0YWNrVHJhY2UgPSBmYWxzZSB9ID0ge30pIHtcbiAgICAgICAgaWYgKHRoaXMuc2tpcHBlZChMb2dMZXZlbC5EZWJ1ZykpIHJldHVybjtcbiAgICAgICAgdGhpcy5jb25zb2xlLmxvZyhtZXNzYWdlKTtcbiAgICAgICAgaWYgKHN0YWNrVHJhY2UpIHRoaXMuY29uc29sZS50cmFjZSgpO1xuICAgIH1cbiAgICB3YXJuKG1lc3NhZ2UsIHsgc3RhY2tUcmFjZSA9IGZhbHNlIH0gPSB7fSkge1xuICAgICAgICBpZiAodGhpcy5za2lwcGVkKExvZ0xldmVsLldhcm4pKSByZXR1cm47XG4gICAgICAgIHRoaXMuY29uc29sZS53YXJuKG1lc3NhZ2UpO1xuICAgICAgICBpZiAoc3RhY2tUcmFjZSkgdGhpcy5jb25zb2xlLnRyYWNlKCk7XG4gICAgfVxuICAgIGVycm9yKG1lc3NhZ2UpIHtcbiAgICAgICAgaWYgKHRoaXMuc2tpcHBlZChMb2dMZXZlbC5FcnJvcikpIHJldHVybjtcbiAgICAgICAgdGhpcy5jb25zb2xlLmVycm9yKG1lc3NhZ2UpO1xuICAgIH1cbn1cbmxldCBfY29uc29sZSA9IHR5cGVvZiBjb25zb2xlID09PSAndW5kZWZpbmVkJyA/IG5ldyBOdWxsQ29uc29sZSgpIDogY29uc29sZTtcbkFMV0FZUyA9IG5ldyBMb2dnZXIoeyBjb25zb2xlOiBfY29uc29sZSwgbGV2ZWw6IExvZ0xldmVsLlRyYWNlIH0pO1xuY29uc3QgTE9HX0xFVkVMID0gTG9nTGV2ZWwuRGVidWc7XG5leHBvcnQgZGVmYXVsdCBuZXcgTG9nZ2VyKHsgY29uc29sZTogX2NvbnNvbGUsIGxldmVsOiBMT0dfTEVWRUwgfSk7Il19