"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
var LogLevel = exports.LogLevel = undefined;
(function (LogLevel) {
    LogLevel[LogLevel["Trace"] = 0] = "Trace";
    LogLevel[LogLevel["Debug"] = 1] = "Debug";
    LogLevel[LogLevel["Warn"] = 2] = "Warn";
    LogLevel[LogLevel["Error"] = 3] = "Error";
})(LogLevel || (exports.LogLevel = LogLevel = {}));
class NullConsole {
    log(_message) {}
    warn(_message) {}
    error(_message) {}
    trace() {}
}
let ALWAYS;
class Logger {
    constructor({ console, level }) {
        this.f = ALWAYS;
        this.force = ALWAYS;
        this.console = console;
        this.level = level;
    }
    skipped(level) {
        return level < this.level;
    }
    trace(message, { stackTrace = false } = {}) {
        if (this.skipped(LogLevel.Trace)) return;
        this.console.log(message);
        if (stackTrace) this.console.trace();
    }
    debug(message, { stackTrace = false } = {}) {
        if (this.skipped(LogLevel.Debug)) return;
        this.console.log(message);
        if (stackTrace) this.console.trace();
    }
    warn(message, { stackTrace = false } = {}) {
        if (this.skipped(LogLevel.Warn)) return;
        this.console.warn(message);
        if (stackTrace) this.console.trace();
    }
    error(message) {
        if (this.skipped(LogLevel.Error)) return;
        this.console.error(message);
    }
}
exports.Logger = Logger;
let _console = typeof console === 'undefined' ? new NullConsole() : console;
ALWAYS = new Logger({ console: _console, level: LogLevel.Trace });
const LOG_LEVEL = LogLevel.Debug;
exports.default = new Logger({ console: _console, level: LOG_LEVEL });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9sb2dnZXIuanMiXSwibmFtZXMiOlsiTG9nTGV2ZWwiLCJOdWxsQ29uc29sZSIsImxvZyIsIl9tZXNzYWdlIiwid2FybiIsImVycm9yIiwidHJhY2UiLCJBTFdBWVMiLCJMb2dnZXIiLCJjb25zdHJ1Y3RvciIsImNvbnNvbGUiLCJsZXZlbCIsImYiLCJmb3JjZSIsInNraXBwZWQiLCJtZXNzYWdlIiwic3RhY2tUcmFjZSIsIlRyYWNlIiwiZGVidWciLCJEZWJ1ZyIsIldhcm4iLCJFcnJvciIsIl9jb25zb2xlIiwiTE9HX0xFVkVMIl0sIm1hcHBpbmdzIjoiOzs7OztBQUFPLElBQUlBLHVDQUFKO0FBQ1AsQ0FBQyxVQUFVQSxRQUFWLEVBQW9CO0FBQ2pCQSxhQUFTQSxTQUFTLE9BQVQsSUFBb0IsQ0FBN0IsSUFBa0MsT0FBbEM7QUFDQUEsYUFBU0EsU0FBUyxPQUFULElBQW9CLENBQTdCLElBQWtDLE9BQWxDO0FBQ0FBLGFBQVNBLFNBQVMsTUFBVCxJQUFtQixDQUE1QixJQUFpQyxNQUFqQztBQUNBQSxhQUFTQSxTQUFTLE9BQVQsSUFBb0IsQ0FBN0IsSUFBa0MsT0FBbEM7QUFDSCxDQUxELEVBS0dBLHFCQU5RQSxRQU1SLEdBQWFBLFdBQVcsRUFBeEIsQ0FMSDtBQU1BLE1BQU1DLFdBQU4sQ0FBa0I7QUFDZEMsUUFBSUMsUUFBSixFQUFjLENBQUU7QUFDaEJDLFNBQUtELFFBQUwsRUFBZSxDQUFFO0FBQ2pCRSxVQUFNRixRQUFOLEVBQWdCLENBQUU7QUFDbEJHLFlBQVEsQ0FBRTtBQUpJO0FBTWxCLElBQUlDLE1BQUo7QUFDTyxNQUFNQyxNQUFOLENBQWE7QUFDaEJDLGdCQUFZLEVBQUVDLE9BQUYsRUFBV0MsS0FBWCxFQUFaLEVBQWdDO0FBQzVCLGFBQUtDLENBQUwsR0FBU0wsTUFBVDtBQUNBLGFBQUtNLEtBQUwsR0FBYU4sTUFBYjtBQUNBLGFBQUtHLE9BQUwsR0FBZUEsT0FBZjtBQUNBLGFBQUtDLEtBQUwsR0FBYUEsS0FBYjtBQUNIO0FBQ0RHLFlBQVFILEtBQVIsRUFBZTtBQUNYLGVBQU9BLFFBQVEsS0FBS0EsS0FBcEI7QUFDSDtBQUNETCxVQUFNUyxPQUFOLEVBQWUsRUFBRUMsYUFBYSxLQUFmLEtBQXlCLEVBQXhDLEVBQTRDO0FBQ3hDLFlBQUksS0FBS0YsT0FBTCxDQUFhZCxTQUFTaUIsS0FBdEIsQ0FBSixFQUFrQztBQUNsQyxhQUFLUCxPQUFMLENBQWFSLEdBQWIsQ0FBaUJhLE9BQWpCO0FBQ0EsWUFBSUMsVUFBSixFQUFnQixLQUFLTixPQUFMLENBQWFKLEtBQWI7QUFDbkI7QUFDRFksVUFBTUgsT0FBTixFQUFlLEVBQUVDLGFBQWEsS0FBZixLQUF5QixFQUF4QyxFQUE0QztBQUN4QyxZQUFJLEtBQUtGLE9BQUwsQ0FBYWQsU0FBU21CLEtBQXRCLENBQUosRUFBa0M7QUFDbEMsYUFBS1QsT0FBTCxDQUFhUixHQUFiLENBQWlCYSxPQUFqQjtBQUNBLFlBQUlDLFVBQUosRUFBZ0IsS0FBS04sT0FBTCxDQUFhSixLQUFiO0FBQ25CO0FBQ0RGLFNBQUtXLE9BQUwsRUFBYyxFQUFFQyxhQUFhLEtBQWYsS0FBeUIsRUFBdkMsRUFBMkM7QUFDdkMsWUFBSSxLQUFLRixPQUFMLENBQWFkLFNBQVNvQixJQUF0QixDQUFKLEVBQWlDO0FBQ2pDLGFBQUtWLE9BQUwsQ0FBYU4sSUFBYixDQUFrQlcsT0FBbEI7QUFDQSxZQUFJQyxVQUFKLEVBQWdCLEtBQUtOLE9BQUwsQ0FBYUosS0FBYjtBQUNuQjtBQUNERCxVQUFNVSxPQUFOLEVBQWU7QUFDWCxZQUFJLEtBQUtELE9BQUwsQ0FBYWQsU0FBU3FCLEtBQXRCLENBQUosRUFBa0M7QUFDbEMsYUFBS1gsT0FBTCxDQUFhTCxLQUFiLENBQW1CVSxPQUFuQjtBQUNIO0FBNUJlO1FBQVBQLE0sR0FBQUEsTTtBQThCYixJQUFJYyxXQUFXLE9BQU9aLE9BQVAsS0FBbUIsV0FBbkIsR0FBaUMsSUFBSVQsV0FBSixFQUFqQyxHQUFxRFMsT0FBcEU7QUFDQUgsU0FBUyxJQUFJQyxNQUFKLENBQVcsRUFBRUUsU0FBU1ksUUFBWCxFQUFxQlgsT0FBT1gsU0FBU2lCLEtBQXJDLEVBQVgsQ0FBVDtBQUNBLE1BQU1NLFlBQVl2QixTQUFTbUIsS0FBM0I7a0JBQ2UsSUFBSVgsTUFBSixDQUFXLEVBQUVFLFNBQVNZLFFBQVgsRUFBcUJYLE9BQU9ZLFNBQTVCLEVBQVgsQyIsImZpbGUiOiJsaWIvbG9nZ2VyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IHZhciBMb2dMZXZlbDtcbihmdW5jdGlvbiAoTG9nTGV2ZWwpIHtcbiAgICBMb2dMZXZlbFtMb2dMZXZlbFtcIlRyYWNlXCJdID0gMF0gPSBcIlRyYWNlXCI7XG4gICAgTG9nTGV2ZWxbTG9nTGV2ZWxbXCJEZWJ1Z1wiXSA9IDFdID0gXCJEZWJ1Z1wiO1xuICAgIExvZ0xldmVsW0xvZ0xldmVsW1wiV2FyblwiXSA9IDJdID0gXCJXYXJuXCI7XG4gICAgTG9nTGV2ZWxbTG9nTGV2ZWxbXCJFcnJvclwiXSA9IDNdID0gXCJFcnJvclwiO1xufSkoTG9nTGV2ZWwgfHwgKExvZ0xldmVsID0ge30pKTtcbmNsYXNzIE51bGxDb25zb2xlIHtcbiAgICBsb2coX21lc3NhZ2UpIHt9XG4gICAgd2FybihfbWVzc2FnZSkge31cbiAgICBlcnJvcihfbWVzc2FnZSkge31cbiAgICB0cmFjZSgpIHt9XG59XG5sZXQgQUxXQVlTO1xuZXhwb3J0IGNsYXNzIExvZ2dlciB7XG4gICAgY29uc3RydWN0b3IoeyBjb25zb2xlLCBsZXZlbCB9KSB7XG4gICAgICAgIHRoaXMuZiA9IEFMV0FZUztcbiAgICAgICAgdGhpcy5mb3JjZSA9IEFMV0FZUztcbiAgICAgICAgdGhpcy5jb25zb2xlID0gY29uc29sZTtcbiAgICAgICAgdGhpcy5sZXZlbCA9IGxldmVsO1xuICAgIH1cbiAgICBza2lwcGVkKGxldmVsKSB7XG4gICAgICAgIHJldHVybiBsZXZlbCA8IHRoaXMubGV2ZWw7XG4gICAgfVxuICAgIHRyYWNlKG1lc3NhZ2UsIHsgc3RhY2tUcmFjZSA9IGZhbHNlIH0gPSB7fSkge1xuICAgICAgICBpZiAodGhpcy5za2lwcGVkKExvZ0xldmVsLlRyYWNlKSkgcmV0dXJuO1xuICAgICAgICB0aGlzLmNvbnNvbGUubG9nKG1lc3NhZ2UpO1xuICAgICAgICBpZiAoc3RhY2tUcmFjZSkgdGhpcy5jb25zb2xlLnRyYWNlKCk7XG4gICAgfVxuICAgIGRlYnVnKG1lc3NhZ2UsIHsgc3RhY2tUcmFjZSA9IGZhbHNlIH0gPSB7fSkge1xuICAgICAgICBpZiAodGhpcy5za2lwcGVkKExvZ0xldmVsLkRlYnVnKSkgcmV0dXJuO1xuICAgICAgICB0aGlzLmNvbnNvbGUubG9nKG1lc3NhZ2UpO1xuICAgICAgICBpZiAoc3RhY2tUcmFjZSkgdGhpcy5jb25zb2xlLnRyYWNlKCk7XG4gICAgfVxuICAgIHdhcm4obWVzc2FnZSwgeyBzdGFja1RyYWNlID0gZmFsc2UgfSA9IHt9KSB7XG4gICAgICAgIGlmICh0aGlzLnNraXBwZWQoTG9nTGV2ZWwuV2FybikpIHJldHVybjtcbiAgICAgICAgdGhpcy5jb25zb2xlLndhcm4obWVzc2FnZSk7XG4gICAgICAgIGlmIChzdGFja1RyYWNlKSB0aGlzLmNvbnNvbGUudHJhY2UoKTtcbiAgICB9XG4gICAgZXJyb3IobWVzc2FnZSkge1xuICAgICAgICBpZiAodGhpcy5za2lwcGVkKExvZ0xldmVsLkVycm9yKSkgcmV0dXJuO1xuICAgICAgICB0aGlzLmNvbnNvbGUuZXJyb3IobWVzc2FnZSk7XG4gICAgfVxufVxubGV0IF9jb25zb2xlID0gdHlwZW9mIGNvbnNvbGUgPT09ICd1bmRlZmluZWQnID8gbmV3IE51bGxDb25zb2xlKCkgOiBjb25zb2xlO1xuQUxXQVlTID0gbmV3IExvZ2dlcih7IGNvbnNvbGU6IF9jb25zb2xlLCBsZXZlbDogTG9nTGV2ZWwuVHJhY2UgfSk7XG5jb25zdCBMT0dfTEVWRUwgPSBMb2dMZXZlbC5EZWJ1ZztcbmV4cG9ydCBkZWZhdWx0IG5ldyBMb2dnZXIoeyBjb25zb2xlOiBfY29uc29sZSwgbGV2ZWw6IExPR19MRVZFTCB9KTsiXX0=