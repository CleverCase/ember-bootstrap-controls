"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.ComputedBlueprint = undefined;
exports.computed = computed;
exports.observer = observer;

var _objectReference = require("@glimmer/object-reference");

var _object = require("./object");

var _mixin = require("./mixin");

function _defaults(obj, defaults) {
    var keys = Object.getOwnPropertyNames(defaults);for (var i = 0; i < keys.length; i++) {
        var key = keys[i];var value = Object.getOwnPropertyDescriptor(defaults, key);if (value && value.configurable && obj[key] === undefined) {
            Object.defineProperty(obj, key, value);
        }
    }return obj;
}

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}

function _possibleConstructorReturn(self, call) {
    if (!self) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }return call && (typeof call === "object" || typeof call === "function") ? call : self;
}

function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass);
}

var ComputedBlueprint = exports.ComputedBlueprint = function (_Blueprint) {
    _inherits(ComputedBlueprint, _Blueprint);

    function ComputedBlueprint(accessor) {
        var deps = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

        _classCallCheck(this, ComputedBlueprint);

        var _this = _possibleConstructorReturn(this, _Blueprint.call(this));

        _this.metadata = {};
        _this.accessor = accessor;
        _this.deps = deps;
        return _this;
    }

    ComputedBlueprint.prototype.descriptor = function descriptor(_target, key, classMeta) {
        classMeta.addReferenceTypeFor(key, (0, _objectReference.ComputedReferenceBlueprint)(key, this.deps));
        classMeta.addPropertyMetadata(key, this.metadata);
        classMeta.addSlotFor(key);
        return new Computed(this.accessor);
    };

    ComputedBlueprint.prototype.property = function property() {
        for (var _len = arguments.length, paths = Array(_len), _key = 0; _key < _len; _key++) {
            paths[_key] = arguments[_key];
        }

        this.deps = paths.map(function (d) {
            return d.split('.');
        });
        return this;
    };

    ComputedBlueprint.prototype.meta = function meta(object) {
        this.metadata = object;
        return this;
    };

    ComputedBlueprint.prototype.volatile = function volatile() {
        return this;
    };

    return ComputedBlueprint;
}(_mixin.Blueprint);

var Computed = function () {
    function Computed(accessor) {
        _classCallCheck(this, Computed);

        this["5d90f84f-908e-4a42-9749-3d0f523c262c"] = true;
        this.accessor = accessor;
    }

    Computed.prototype.define = function define(prototype, key, home) {
        Object.defineProperty(prototype, key, wrapAccessor(home, key, this.accessor));
    };

    return Computed;
}();

function wrapAccessor(home, accessorName, _desc) {
    var superDesc = getPropertyDescriptor(home, accessorName);
    var originalGet = void 0;
    var originalSet = void 0;
    var desc = {
        enumerable: true,
        configurable: true
    };
    var get = _desc.get;
    if (get && get.length > 0) {
        originalGet = function () {
            return get.call(this, accessorName);
        };
    } else {
        originalGet = _desc.get;
    }
    var set = _desc.set;
    if (set && set.length > 1) {
        originalSet = function (value) {
            return set.call(this, accessorName, value);
        };
    } else {
        originalSet = _desc.set;
    }
    var cacheGet = function () {
        if (_objectReference.Meta.exists(this)) {
            var slot = _objectReference.Meta.for(this).getSlots()[accessorName];
            if (slot !== _object.EMPTY_CACHE) return slot;
        }
        return originalGet.call(this);
    };
    var cacheSet = void 0;
    if (originalSet) {
        cacheSet = function (value) {
            var meta = _objectReference.Meta.for(this);
            var slots = meta.getSlots();
            var ret = originalSet.call(this, value);
            if (ret !== undefined) {
                slots[accessorName] = ret;
            }
        };
    } else {
        cacheSet = function (value) {
            var meta = _objectReference.Meta.for(this);
            var slots = meta.getSlots();
            if (value !== undefined) slots[accessorName] = value;
        };
    }
    if (!superDesc || 'value' in superDesc) {
        desc.get = cacheGet;
        desc.set = cacheSet;
        return desc;
    }
    desc.get = function () {
        var lastSuper = this._super;
        this._super = function () {
            return superDesc.get.call(this);
        };
        try {
            return cacheGet.call(this);
        } finally {
            this._super = lastSuper;
        }
    };
    desc.set = function (val) {
        var lastSuper = this._super;
        this._super = function () {
            return superDesc.set.call(this, val);
        };
        try {
            return cacheSet.call(this, val);
        } finally {
            this._super = lastSuper;
        }
    };
    return desc;
}
function getPropertyDescriptor(subject, name) {
    var pd = Object.getOwnPropertyDescriptor(subject, name);
    var proto = Object.getPrototypeOf(subject);
    while (typeof pd === 'undefined' && proto !== null) {
        pd = Object.getOwnPropertyDescriptor(proto, name);
        proto = Object.getPrototypeOf(proto);
    }
    return pd;
}
function computed() {
    for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
    }

    var last = args.pop();
    var deps = args;
    if (typeof last === 'function') {
        var _ref;

        return (_ref = new ComputedBlueprint({
            get: last
        })).property.apply(_ref, deps);
    } else if (typeof last === 'object') {
        var _ref2;

        return (_ref2 = new ComputedBlueprint(last)).property.apply(_ref2, deps);
    } else {
        throw new TypeError("computed expects a function or an object as last argument");
    }
}
function observer() {}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,