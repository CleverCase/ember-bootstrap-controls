"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.AccessorBlueprint = exports.DataBlueprint = exports.Mixin = exports.Blueprint = exports.Descriptor = exports.BLUEPRINT = exports.DESCRIPTOR = undefined;
exports.extend = extend;
exports.relinkSubclasses = relinkSubclasses;
exports.toMixin = toMixin;
exports.wrapMethod = wrapMethod;

var _objectReference = require("@glimmer/object-reference");

var _util = require("@glimmer/util");

var _object = require("./object");

var _utils = require("./utils");

function _defaults(obj, defaults) {
    var keys = Object.getOwnPropertyNames(defaults);for (var i = 0; i < keys.length; i++) {
        var key = keys[i];var value = Object.getOwnPropertyDescriptor(defaults, key);if (value && value.configurable && obj[key] === undefined) {
            Object.defineProperty(obj, key, value);
        }
    }return obj;
}

function _possibleConstructorReturn(self, call) {
    if (!self) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }return call && (typeof call === "object" || typeof call === "function") ? call : self;
}

function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass);
}

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}

var isArray = Array.isArray;

var DESCRIPTOR = exports.DESCRIPTOR = "5d90f84f-908e-4a42-9749-3d0f523c262c";
var BLUEPRINT = exports.BLUEPRINT = "8d97cf5f-db9e-48d8-a6b2-7a75b7170805";
var Descriptor = exports.Descriptor = function Descriptor() {
    _classCallCheck(this, Descriptor);

    this["5d90f84f-908e-4a42-9749-3d0f523c262c"] = true;
};
var Blueprint = exports.Blueprint = function Blueprint() {
    _classCallCheck(this, Blueprint);

    this["8d97cf5f-db9e-48d8-a6b2-7a75b7170805"] = true;
};
var Mixin = exports.Mixin = function () {
    function Mixin(extensions, mixins) {
        var _dependencies;

        _classCallCheck(this, Mixin);

        this.extensions = null;
        this.concatenatedProperties = [];
        this.mergedProperties = [];
        this.dependencies = [];
        this.reopen(extensions);
        (_dependencies = this.dependencies).push.apply(_dependencies, mixins);
    }

    Mixin.create = function create() {
        for (var _len = arguments.length, args = Array(_len), _key2 = 0; _key2 < _len; _key2++) {
            args[_key2] = arguments[_key2];
        }

        var extensions = args[args.length - 1];
        if (args.length === 0) {
            return new this({}, []);
        } else if (extensions instanceof Mixin) {
            return new this({}, args);
        } else {
            var deps = args.slice(0, -1).map(toMixin);
            return new this(extensions, deps);
        }
    };

    Mixin.mixins = function mixins(obj) {
        if (typeof obj !== 'object' || obj === null) return [];
        var meta = _object.ClassMeta.for(obj);
        if (!meta) return [];
        return meta.getAppliedMixins();
    };

    Mixin.prototype.detect = function detect(obj) {
        if (typeof obj !== 'object' || obj === null) return false;
        if (obj instanceof Mixin) {
            return obj.dependencies.indexOf(this) !== -1;
        }
        var meta = _object.ClassMeta.for(obj);
        return !!meta && meta.hasAppliedMixin(this);
    };

    Mixin.prototype.reopen = function reopen(extensions) {
        if (this.extensions) {
            this.dependencies.push(toMixin(this.extensions));
        }
        if (typeof extensions === 'object' && 'concatenatedProperties' in extensions) {
            var concat = void 0;
            var rawConcat = extensions.concatenatedProperties;
            if (isArray(rawConcat)) {
                concat = rawConcat.slice();
            } else if (rawConcat === null || rawConcat === undefined) {
                concat = [];
            } else {
                concat = [rawConcat];
            }
            delete extensions.concatenatedProperties;
            this.concatenatedProperties = concat;
        }
        if (typeof extensions === 'object' && 'mergedProperties' in extensions) {
            var merged = void 0;
            var rawMerged = extensions.mergedProperties;
            if (isArray(rawMerged)) {
                merged = rawMerged.slice();
            } else if (rawMerged === null || rawMerged === undefined) {
                merged = [];
            } else {
                merged = [rawMerged];
            }
            delete extensions.mergedProperties;
            this.mergedProperties = merged;
        }
        var normalized = Object.keys(extensions).reduce(function (obj, key) {
            var value = extensions[key];
            switch (typeof value) {
                case 'function':
                    obj[key] = new MethodBlueprint({ value: value });
                    break;
                case 'object':
                    if (value && BLUEPRINT in value) {
                        obj[key] = value;
                        break;
                    }
                /* falls through */
                default:
                    obj[key] = new DataBlueprint({ value: value });
            }
            return obj;
        }, (0, _util.dict)());
        this.extensions = (0, _util.dict)();
        (0, _util.assign)(this.extensions, (0, _object.turbocharge)(normalized));
    };

    Mixin.prototype.apply = function apply(target) {
        var meta = target[_objectReference.CLASS_META] = target[_objectReference.CLASS_META] || new _object.ClassMeta();
        this.dependencies.forEach(function (m) {
            return m.apply(target);
        });
        this.mergeProperties(target, target, meta);
        meta.addMixin(this);
        meta.seal();
        meta.reseal(target);
        return target;
    };

    Mixin.prototype.extendPrototype = function extendPrototype(Original) {
        Original.prototype = Object.create(Original.prototype);
        this.dependencies.forEach(function (m) {
            return m.extendPrototype(Original);
        });
        this.extendPrototypeOnto(Original, Original);
    };

    Mixin.prototype.extendPrototypeOnto = function extendPrototypeOnto(Subclass, Parent) {
        this.dependencies.forEach(function (m) {
            return m.extendPrototypeOnto(Subclass, Parent);
        });
        this.mergeProperties(Subclass.prototype, Parent.prototype, Subclass[_objectReference.CLASS_META]);
        Subclass[_objectReference.CLASS_META].addMixin(this);
    };

    Mixin.prototype.extendStatic = function extendStatic(Target) {
        this.dependencies.forEach(function (m) {
            return m.extendStatic(Target);
        });
        this.mergeProperties(Target, Object.getPrototypeOf(Target), Target[_objectReference.CLASS_META][_objectReference.CLASS_META]);
        Target[_objectReference.CLASS_META].addStaticMixin(this);
    };

    Mixin.prototype.mergeProperties = function mergeProperties(target, parent, meta) {
        var _this = this;

        if (meta.hasAppliedMixin(this)) return;
        meta.addAppliedMixin(this);
        this.mergedProperties.forEach(function (k) {
            return meta.addMergedProperty(k, parent[k]);
        });
        this.concatenatedProperties.forEach(function (k) {
            return meta.addConcatenatedProperty(k, []);
        });
        new ValueDescriptor({ value: meta.getConcatenatedProperties() }).define(target, 'concatenatedProperties');
        new ValueDescriptor({ value: meta.getMergedProperties() }).define(target, 'mergedProperties');
        Object.keys(this.extensions).forEach(function (key) {
            var extension = _this.extensions[key];
            var desc = extension.descriptor(target, key, meta);
            desc.define(target, key, parent);
        });
        new ValueDescriptor({ value: _utils.ROOT }).define(target, '_super');
    };

    return Mixin;
}();
function extend(Parent) {
    var Super = Parent;
    var Subclass = function (_Super) {
        _inherits(Subclass, _Super);

        function Subclass() {
            _classCallCheck(this, Subclass);

            return _possibleConstructorReturn(this, _Super.apply(this, arguments));
        }

        return Subclass;
    }(Super);
    Subclass[_objectReference.CLASS_META] = _object.InstanceMeta.fromParent(Parent[_objectReference.CLASS_META]);

    for (var _len2 = arguments.length, extensions = Array(_len2 > 1 ? _len2 - 1 : 0), _key3 = 1; _key3 < _len2; _key3++) {
        extensions[_key3 - 1] = arguments[_key3];
    }

    var mixins = extensions.map(toMixin);
    Parent[_objectReference.CLASS_META].addSubclass(Subclass);
    mixins.forEach(function (m) {
        return Subclass[_objectReference.CLASS_META].addMixin(m);
    });
    _object.ClassMeta.applyAllMixins(Subclass, Parent);
    return Subclass;
}
function relinkSubclasses(Parent) {
    Parent[_objectReference.CLASS_META].getSubclasses().forEach(function (Subclass) {
        Subclass[_objectReference.CLASS_META].reset(Parent[_objectReference.CLASS_META]);
        Subclass.prototype = Object.create(Parent.prototype);
        _object.ClassMeta.applyAllMixins(Subclass, Parent);
        // recurse into sub-subclasses
        relinkSubclasses(Subclass);
    });
}
function toMixin(extension) {
    if (extension instanceof Mixin) return extension;else return new Mixin(extension, []);
}

var ValueDescriptor = function (_Descriptor) {
    _inherits(ValueDescriptor, _Descriptor);

    function ValueDescriptor(_ref) {
        var _ref$enumerable = _ref.enumerable,
            enumerable = _ref$enumerable === undefined ? true : _ref$enumerable,
            _ref$configurable = _ref.configurable,
            configurable = _ref$configurable === undefined ? true : _ref$configurable,
            _ref$writable = _ref.writable,
            writable = _ref$writable === undefined ? true : _ref$writable,
            value = _ref.value;

        _classCallCheck(this, ValueDescriptor);

        var _this3 = _possibleConstructorReturn(this, _Descriptor.call(this));

        _this3.enumerable = enumerable;
        _this3.configurable = configurable;
        _this3.writable = writable;
        _this3.value = value;
        return _this3;
    }

    ValueDescriptor.prototype.define = function define(target, key, _home) {
        Object.defineProperty(target, key, {
            enumerable: this.enumerable,
            configurable: this.configurable,
            writable: this.writable,
            value: this.value
        });
    };

    return ValueDescriptor;
}(Descriptor);

var DataBlueprint = exports.DataBlueprint = function (_Blueprint) {
    _inherits(DataBlueprint, _Blueprint);

    function DataBlueprint(_ref2) {
        var _ref2$enumerable = _ref2.enumerable,
            enumerable = _ref2$enumerable === undefined ? true : _ref2$enumerable,
            _ref2$configurable = _ref2.configurable,
            configurable = _ref2$configurable === undefined ? true : _ref2$configurable,
            _ref2$writable = _ref2.writable,
            writable = _ref2$writable === undefined ? true : _ref2$writable,
            value = _ref2.value;

        _classCallCheck(this, DataBlueprint);

        var _this4 = _possibleConstructorReturn(this, _Blueprint.call(this));

        _this4.enumerable = enumerable;
        _this4.configurable = configurable;
        _this4.value = value;
        _this4.writable = writable;
        return _this4;
    }

    DataBlueprint.prototype.descriptor = function descriptor(_target, key, classMeta) {
        var enumerable = this.enumerable,
            configurable = this.configurable,
            writable = this.writable,
            value = this.value;

        if (classMeta.hasConcatenatedProperty(key)) {
            classMeta.addConcatenatedProperty(key, value);
            value = classMeta.getConcatenatedProperty(key);
        } else if (classMeta.hasMergedProperty(key)) {
            classMeta.addMergedProperty(key, value);
            value = classMeta.getMergedProperty(key);
        }
        return new ValueDescriptor({ enumerable: enumerable, configurable: configurable, writable: writable, value: value });
    };

    return DataBlueprint;
}(Blueprint);
var AccessorBlueprint = exports.AccessorBlueprint = function (_Blueprint2) {
    _inherits(AccessorBlueprint, _Blueprint2);

    function AccessorBlueprint(_ref3) {
        var _ref3$enumerable = _ref3.enumerable,
            enumerable = _ref3$enumerable === undefined ? true : _ref3$enumerable,
            _ref3$configurable = _ref3.configurable,
            configurable = _ref3$configurable === undefined ? true : _ref3$configurable,
            get = _ref3.get,
            set = _ref3.set;

        _classCallCheck(this, AccessorBlueprint);

        var _this5 = _possibleConstructorReturn(this, _Blueprint2.call(this));

        _this5.enumerable = enumerable;
        _this5.configurable = configurable;
        _this5.get = get;
        _this5.set = set;
        return _this5;
    }

    AccessorBlueprint.prototype.descriptor = function descriptor(_target, _key, _classMeta) {
        return new ValueDescriptor({
            enumerable: this.enumerable,
            configurable: this.configurable,
            get: this.get,
            set: this.set
        });
    };

    return AccessorBlueprint;
}(Blueprint);

var MethodDescriptor = function (_ValueDescriptor) {
    _inherits(MethodDescriptor, _ValueDescriptor);

    function MethodDescriptor() {
        _classCallCheck(this, MethodDescriptor);

        return _possibleConstructorReturn(this, _ValueDescriptor.apply(this, arguments));
    }

    MethodDescriptor.prototype.define = function define(target, key, home) {
        this.value = wrapMethod(home, key, this.value);
        _ValueDescriptor.prototype.define.call(this, target, key, home);
    };

    return MethodDescriptor;
}(ValueDescriptor);

var MethodBlueprint = function (_DataBlueprint) {
    _inherits(MethodBlueprint, _DataBlueprint);

    function MethodBlueprint() {
        _classCallCheck(this, MethodBlueprint);

        return _possibleConstructorReturn(this, _DataBlueprint.apply(this, arguments));
    }

    MethodBlueprint.prototype.descriptor = function descriptor(target, key, classMeta) {
        var desc = _DataBlueprint.prototype.descriptor.call(this, target, key, classMeta);
        return new MethodDescriptor(desc);
    };

    return MethodBlueprint;
}(DataBlueprint);

function wrapMethod(home, methodName, original) {
    if (!(methodName in home)) return maybeWrap(original);
    var superMethod = home[methodName];
    var func = function () {
        for (var _len3 = arguments.length, args = Array(_len3), _key4 = 0; _key4 < _len3; _key4++) {
            args[_key4] = arguments[_key4];
        }

        if (!this) return original.apply(this, args);
        var lastSuper = this._super;
        this._super = superMethod;
        try {
            return original.apply(this, args);
        } finally {
            this._super = lastSuper;
        }
    };
    func.__wrapped = true;
    return func;
}
function maybeWrap(original) {
    if ('__wrapped' in original) return original;
    return function () {
        for (var _len4 = arguments.length, args = Array(_len4), _key5 = 0; _key5 < _len4; _key5++) {
            args[_key5] = arguments[_key5];
        }

        if (!this) return original.apply(this, args);
        var lastSuper = this._super;
        this._super = _utils.ROOT;
        try {
            return original.apply(this, args);
        } finally {
            this._super = lastSuper;
        }
    };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,