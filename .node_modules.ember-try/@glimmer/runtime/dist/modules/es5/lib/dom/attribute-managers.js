function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

import { sanitizeAttributeValue, requiresSanitization } from './sanitized-values';
import { normalizeProperty } from './props';
import { SVG_NAMESPACE } from './helper';
import { normalizeTextValue } from '../compiled/opcodes/content';
export function defaultManagers(element, attr, _isTrusting, _namespace) {
    var tagName = element.tagName;
    var isSVG = element.namespaceURI === SVG_NAMESPACE;
    if (isSVG) {
        return defaultAttributeManagers(tagName, attr);
    }

    var _normalizeProperty = normalizeProperty(element, attr),
        type = _normalizeProperty.type,
        normalized = _normalizeProperty.normalized;

    if (type === 'attr') {
        return defaultAttributeManagers(tagName, normalized);
    } else {
        return defaultPropertyManagers(tagName, normalized);
    }
}
export function defaultPropertyManagers(tagName, attr) {
    if (requiresSanitization(tagName, attr)) {
        return new SafePropertyManager(attr);
    }
    if (isUserInputValue(tagName, attr)) {
        return INPUT_VALUE_PROPERTY_MANAGER;
    }
    if (isOptionSelected(tagName, attr)) {
        return OPTION_SELECTED_MANAGER;
    }
    return new PropertyManager(attr);
}
export function defaultAttributeManagers(tagName, attr) {
    if (requiresSanitization(tagName, attr)) {
        return new SafeAttributeManager(attr);
    }
    return new AttributeManager(attr);
}
export function readDOMAttr(element, attr) {
    var isSVG = element.namespaceURI === SVG_NAMESPACE;

    var _normalizeProperty2 = normalizeProperty(element, attr),
        type = _normalizeProperty2.type,
        normalized = _normalizeProperty2.normalized;

    if (isSVG) {
        return element.getAttribute(normalized);
    }
    if (type === 'attr') {
        return element.getAttribute(normalized);
    }
    {
        return element[normalized];
    }
}
;
export var AttributeManager = function () {
    function AttributeManager(attr) {
        _classCallCheck(this, AttributeManager);

        this.attr = attr;
    }

    AttributeManager.prototype.setAttribute = function setAttribute(env, element, value, namespace) {
        var dom = env.getAppendOperations();
        var normalizedValue = normalizeAttributeValue(value);
        if (!isAttrRemovalValue(normalizedValue)) {
            dom.setAttribute(element, this.attr, normalizedValue, namespace);
        }
    };

    AttributeManager.prototype.updateAttribute = function updateAttribute(env, element, value, namespace) {
        if (value === null || value === undefined || value === false) {
            if (namespace) {
                env.getDOM().removeAttributeNS(element, namespace, this.attr);
            } else {
                env.getDOM().removeAttribute(element, this.attr);
            }
        } else {
            this.setAttribute(env, element, value);
        }
    };

    return AttributeManager;
}();
;
export var PropertyManager = function (_AttributeManager) {
    _inherits(PropertyManager, _AttributeManager);

    function PropertyManager() {
        _classCallCheck(this, PropertyManager);

        return _possibleConstructorReturn(this, _AttributeManager.apply(this, arguments));
    }

    PropertyManager.prototype.setAttribute = function setAttribute(_env, element, value, _namespace) {
        if (!isAttrRemovalValue(value)) {
            element[this.attr] = value;
        }
    };

    PropertyManager.prototype.removeAttribute = function removeAttribute(env, element, namespace) {
        // TODO this sucks but to preserve properties first and to meet current
        // semantics we must do this.
        var attr = this.attr;

        if (namespace) {
            env.getDOM().removeAttributeNS(element, namespace, attr);
        } else {
            env.getDOM().removeAttribute(element, attr);
        }
    };

    PropertyManager.prototype.updateAttribute = function updateAttribute(env, element, value, namespace) {
        // ensure the property is always updated
        element[this.attr] = value;
        if (isAttrRemovalValue(value)) {
            this.removeAttribute(env, element, namespace);
        }
    };

    return PropertyManager;
}(AttributeManager);
;
function normalizeAttributeValue(value) {
    if (value === false || value === undefined || value === null) {
        return null;
    }
    if (value === true) {
        return '';
    }
    // onclick function etc in SSR
    if (typeof value === 'function') {
        return null;
    }
    return String(value);
}
function isAttrRemovalValue(value) {
    return value === null || value === undefined;
}

var SafePropertyManager = function (_PropertyManager) {
    _inherits(SafePropertyManager, _PropertyManager);

    function SafePropertyManager() {
        _classCallCheck(this, SafePropertyManager);

        return _possibleConstructorReturn(this, _PropertyManager.apply(this, arguments));
    }

    SafePropertyManager.prototype.setAttribute = function setAttribute(env, element, value) {
        _PropertyManager.prototype.setAttribute.call(this, env, element, sanitizeAttributeValue(env, element, this.attr, value));
    };

    SafePropertyManager.prototype.updateAttribute = function updateAttribute(env, element, value) {
        _PropertyManager.prototype.updateAttribute.call(this, env, element, sanitizeAttributeValue(env, element, this.attr, value));
    };

    return SafePropertyManager;
}(PropertyManager);

function isUserInputValue(tagName, attribute) {
    return (tagName === 'INPUT' || tagName === 'TEXTAREA') && attribute === 'value';
}

var InputValuePropertyManager = function (_AttributeManager2) {
    _inherits(InputValuePropertyManager, _AttributeManager2);

    function InputValuePropertyManager() {
        _classCallCheck(this, InputValuePropertyManager);

        return _possibleConstructorReturn(this, _AttributeManager2.apply(this, arguments));
    }

    InputValuePropertyManager.prototype.setAttribute = function setAttribute(_env, element, value) {
        var input = element;
        input.value = normalizeTextValue(value);
    };

    InputValuePropertyManager.prototype.updateAttribute = function updateAttribute(_env, element, value) {
        var input = element;
        var currentValue = input.value;
        var normalizedValue = normalizeTextValue(value);
        if (currentValue !== normalizedValue) {
            input.value = normalizedValue;
        }
    };

    return InputValuePropertyManager;
}(AttributeManager);

export var INPUT_VALUE_PROPERTY_MANAGER = new InputValuePropertyManager('value');
function isOptionSelected(tagName, attribute) {
    return tagName === 'OPTION' && attribute === 'selected';
}

var OptionSelectedManager = function (_PropertyManager2) {
    _inherits(OptionSelectedManager, _PropertyManager2);

    function OptionSelectedManager() {
        _classCallCheck(this, OptionSelectedManager);

        return _possibleConstructorReturn(this, _PropertyManager2.apply(this, arguments));
    }

    OptionSelectedManager.prototype.setAttribute = function setAttribute(_env, element, value) {
        if (value !== null && value !== undefined && value !== false) {
            var option = element;
            option.selected = true;
        }
    };

    OptionSelectedManager.prototype.updateAttribute = function updateAttribute(_env, element, value) {
        var option = element;
        if (value) {
            option.selected = true;
        } else {
            option.selected = false;
        }
    };

    return OptionSelectedManager;
}(PropertyManager);

export var OPTION_SELECTED_MANAGER = new OptionSelectedManager('selected');

var SafeAttributeManager = function (_AttributeManager3) {
    _inherits(SafeAttributeManager, _AttributeManager3);

    function SafeAttributeManager() {
        _classCallCheck(this, SafeAttributeManager);

        return _possibleConstructorReturn(this, _AttributeManager3.apply(this, arguments));
    }

    SafeAttributeManager.prototype.setAttribute = function setAttribute(env, element, value) {
        _AttributeManager3.prototype.setAttribute.call(this, env, element, sanitizeAttributeValue(env, element, this.attr, value));
    };

    SafeAttributeManager.prototype.updateAttribute = function updateAttribute(env, element, value, _namespace) {
        _AttributeManager3.prototype.updateAttribute.call(this, env, element, sanitizeAttributeValue(env, element, this.attr, value));
    };

    return SafeAttributeManager;
}(AttributeManager);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,