var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

import { dict, EMPTY_ARRAY, fillNulls, Stack, typePos } from '@glimmer/util';
import { ComponentBuilder } from '../../compiler';
import { Register } from '../../opcodes';
import { expr, InvokeDynamicLayout } from '../../syntax/functions';
import RawInlineBlock from '../../syntax/raw-block';
import { IsComponentDefinitionReference } from '../opcodes/content';
import * as content from './content';
import * as vm from './vm';

var Labels = function () {
    function Labels() {
        _classCallCheck(this, Labels);

        this.labels = dict();
        this.targets = [];
    }

    Labels.prototype.label = function label(name, index) {
        this.labels[name] = index;
    };

    Labels.prototype.target = function target(at, Target, _target) {
        this.targets.push({ at: at, Target: Target, target: _target });
    };

    Labels.prototype.patch = function patch(program) {
        var targets = this.targets,
            labels = this.labels;

        for (var i = 0; i < targets.length; i++) {
            var _targets$i = targets[i],
                at = _targets$i.at,
                target = _targets$i.target;

            var goto = labels[target] - at;
            program.heap.setbyaddr(at + 1, goto);
        }
    };

    return Labels;
}();

var BasicOpcodeBuilder = function () {
    function BasicOpcodeBuilder(env, meta, program) {
        _classCallCheck(this, BasicOpcodeBuilder);

        this.env = env;
        this.meta = meta;
        this.program = program;
        this.labelsStack = new Stack();
        this.constants = program.constants;
        this.heap = program.heap;
        this.start = this.heap.malloc();
    }

    BasicOpcodeBuilder.prototype.upvars = function upvars(count) {
        return fillNulls(count);
    };

    BasicOpcodeBuilder.prototype.reserve = function reserve(name) {
        this.push(name, 0, 0, 0);
    };

    BasicOpcodeBuilder.prototype.push = function push(name) {
        var op1 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
        var op2 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
        var op3 = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;

        this.heap.push(name);
        this.heap.push(op1);
        this.heap.push(op2);
        this.heap.push(op3);
    };

    BasicOpcodeBuilder.prototype.finalize = function finalize() {
        this.push(22 /* Return */);
        this.heap.finishMalloc(this.start);
        return this.start;
    };
    // args


    BasicOpcodeBuilder.prototype.pushArgs = function pushArgs(synthetic) {
        this.push(58 /* PushArgs */, synthetic === true ? 1 : 0);
    };
    // helpers


    BasicOpcodeBuilder.prototype.startLabels = function startLabels() {
        this.labelsStack.push(new Labels());
    };

    BasicOpcodeBuilder.prototype.stopLabels = function stopLabels() {
        var label = this.labelsStack.pop();
        label.patch(this.program);
    };
    // components


    BasicOpcodeBuilder.prototype.pushComponentManager = function pushComponentManager(definition) {
        this.push(56 /* PushComponentManager */, this.other(definition));
    };

    BasicOpcodeBuilder.prototype.pushDynamicComponentManager = function pushDynamicComponentManager() {
        this.push(57 /* PushDynamicComponentManager */);
    };

    BasicOpcodeBuilder.prototype.prepareArgs = function prepareArgs(state) {
        this.push(59 /* PrepareArgs */, state);
    };

    BasicOpcodeBuilder.prototype.createComponent = function createComponent(state, hasDefault, hasInverse) {
        var flag = (hasDefault === true ? 1 : 0) | (hasInverse === true ? 1 : 0) << 1;
        this.push(60 /* CreateComponent */, flag, state);
    };

    BasicOpcodeBuilder.prototype.registerComponentDestructor = function registerComponentDestructor(state) {
        this.push(61 /* RegisterComponentDestructor */, state);
    };

    BasicOpcodeBuilder.prototype.beginComponentTransaction = function beginComponentTransaction() {
        this.push(65 /* BeginComponentTransaction */);
    };

    BasicOpcodeBuilder.prototype.commitComponentTransaction = function commitComponentTransaction() {
        this.push(66 /* CommitComponentTransaction */);
    };

    BasicOpcodeBuilder.prototype.pushComponentOperations = function pushComponentOperations() {
        this.push(62 /* PushComponentOperations */);
    };

    BasicOpcodeBuilder.prototype.getComponentSelf = function getComponentSelf(state) {
        this.push(63 /* GetComponentSelf */, state);
    };

    BasicOpcodeBuilder.prototype.getComponentLayout = function getComponentLayout(state) {
        this.push(64 /* GetComponentLayout */, state);
    };

    BasicOpcodeBuilder.prototype.didCreateElement = function didCreateElement(state) {
        this.push(67 /* DidCreateElement */, state);
    };

    BasicOpcodeBuilder.prototype.didRenderLayout = function didRenderLayout(state) {
        this.push(68 /* DidRenderLayout */, state);
    };
    // partial


    BasicOpcodeBuilder.prototype.getPartialTemplate = function getPartialTemplate() {
        this.push(69 /* GetPartialTemplate */);
    };

    BasicOpcodeBuilder.prototype.resolveMaybeLocal = function resolveMaybeLocal(name) {
        this.push(70 /* ResolveMaybeLocal */, this.string(name));
    };
    // debugger


    BasicOpcodeBuilder.prototype.debugger = function _debugger(symbols, evalInfo) {
        this.push(71 /* Debugger */, this.constants.other(symbols), this.constants.array(evalInfo));
    };
    // content


    BasicOpcodeBuilder.prototype.dynamicContent = function dynamicContent(Opcode) {
        this.push(26 /* DynamicContent */, this.other(Opcode));
    };

    BasicOpcodeBuilder.prototype.cautiousAppend = function cautiousAppend() {
        this.dynamicContent(new content.OptimizedCautiousAppendOpcode());
    };

    BasicOpcodeBuilder.prototype.trustingAppend = function trustingAppend() {
        this.dynamicContent(new content.OptimizedTrustingAppendOpcode());
    };
    // dom


    BasicOpcodeBuilder.prototype.text = function text(_text) {
        this.push(24 /* Text */, this.constants.string(_text));
    };

    BasicOpcodeBuilder.prototype.openPrimitiveElement = function openPrimitiveElement(tag) {
        this.push(27 /* OpenElement */, this.constants.string(tag));
    };

    BasicOpcodeBuilder.prototype.openElementWithOperations = function openElementWithOperations(tag) {
        this.push(28 /* OpenElementWithOperations */, this.constants.string(tag));
    };

    BasicOpcodeBuilder.prototype.openDynamicElement = function openDynamicElement() {
        this.push(29 /* OpenDynamicElement */);
    };

    BasicOpcodeBuilder.prototype.flushElement = function flushElement() {
        this.push(33 /* FlushElement */);
    };

    BasicOpcodeBuilder.prototype.closeElement = function closeElement() {
        this.push(34 /* CloseElement */);
    };

    BasicOpcodeBuilder.prototype.staticAttr = function staticAttr(_name, _namespace, _value) {
        var name = this.constants.string(_name);
        var namespace = _namespace ? this.constants.string(_namespace) : 0;
        var value = this.constants.string(_value);
        this.push(30 /* StaticAttr */, name, value, namespace);
    };

    BasicOpcodeBuilder.prototype.dynamicAttrNS = function dynamicAttrNS(_name, _namespace, trusting) {
        var name = this.constants.string(_name);
        var namespace = this.constants.string(_namespace);
        this.push(32 /* DynamicAttrNS */, name, namespace, trusting === true ? 1 : 0);
    };

    BasicOpcodeBuilder.prototype.dynamicAttr = function dynamicAttr(_name, trusting) {
        var name = this.constants.string(_name);
        this.push(31 /* DynamicAttr */, name, trusting === true ? 1 : 0);
    };

    BasicOpcodeBuilder.prototype.comment = function comment(_comment) {
        var comment = this.constants.string(_comment);
        this.push(25 /* Comment */, comment);
    };

    BasicOpcodeBuilder.prototype.modifier = function modifier(_definition) {
        this.push(35 /* Modifier */, this.other(_definition));
    };
    // lists


    BasicOpcodeBuilder.prototype.putIterator = function putIterator() {
        this.push(54 /* PutIterator */);
    };

    BasicOpcodeBuilder.prototype.enterList = function enterList(start) {
        this.reserve(52 /* EnterList */);
        this.labels.target(this.pos, 52 /* EnterList */, start);
    };

    BasicOpcodeBuilder.prototype.exitList = function exitList() {
        this.push(53 /* ExitList */);
    };

    BasicOpcodeBuilder.prototype.iterate = function iterate(breaks) {
        this.reserve(55 /* Iterate */);
        this.labels.target(this.pos, 55 /* Iterate */, breaks);
    };
    // expressions


    BasicOpcodeBuilder.prototype.setVariable = function setVariable(symbol) {
        this.push(4 /* SetVariable */, symbol);
    };

    BasicOpcodeBuilder.prototype.getVariable = function getVariable(symbol) {
        this.push(5 /* GetVariable */, symbol);
    };

    BasicOpcodeBuilder.prototype.getProperty = function getProperty(key) {
        this.push(6 /* GetProperty */, this.string(key));
    };

    BasicOpcodeBuilder.prototype.getBlock = function getBlock(symbol) {
        this.push(8 /* GetBlock */, symbol);
    };

    BasicOpcodeBuilder.prototype.hasBlock = function hasBlock(symbol) {
        this.push(9 /* HasBlock */, symbol);
    };

    BasicOpcodeBuilder.prototype.hasBlockParams = function hasBlockParams(symbol) {
        this.push(10 /* HasBlockParams */, symbol);
    };

    BasicOpcodeBuilder.prototype.concat = function concat(size) {
        this.push(11 /* Concat */, size);
    };

    BasicOpcodeBuilder.prototype.function = function _function(f) {
        this.push(2 /* Function */, this.func(f));
    };

    BasicOpcodeBuilder.prototype.load = function load(register) {
        this.push(17 /* Load */, register);
    };

    BasicOpcodeBuilder.prototype.fetch = function fetch(register) {
        this.push(18 /* Fetch */, register);
    };

    BasicOpcodeBuilder.prototype.dup = function dup() {
        var register = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Register.sp;
        var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

        return this.push(15 /* Dup */, register, offset);
    };

    BasicOpcodeBuilder.prototype.pop = function pop() {
        var count = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;

        return this.push(16 /* Pop */, count);
    };
    // vm


    BasicOpcodeBuilder.prototype.pushRemoteElement = function pushRemoteElement() {
        this.push(36 /* PushRemoteElement */);
    };

    BasicOpcodeBuilder.prototype.popRemoteElement = function popRemoteElement() {
        this.push(37 /* PopRemoteElement */);
    };

    BasicOpcodeBuilder.prototype.label = function label(name) {
        this.labels.label(name, this.nextPos);
    };

    BasicOpcodeBuilder.prototype.pushRootScope = function pushRootScope(symbols, bindCallerScope) {
        this.push(19 /* RootScope */, symbols, bindCallerScope ? 1 : 0);
    };

    BasicOpcodeBuilder.prototype.pushChildScope = function pushChildScope() {
        this.push(20 /* ChildScope */);
    };

    BasicOpcodeBuilder.prototype.popScope = function popScope() {
        this.push(21 /* PopScope */);
    };

    BasicOpcodeBuilder.prototype.returnTo = function returnTo(label) {
        this.reserve(23 /* ReturnTo */);
        this.labels.target(this.pos, 23 /* ReturnTo */, label);
    };

    BasicOpcodeBuilder.prototype.pushDynamicScope = function pushDynamicScope() {
        this.push(39 /* PushDynamicScope */);
    };

    BasicOpcodeBuilder.prototype.popDynamicScope = function popDynamicScope() {
        this.push(40 /* PopDynamicScope */);
    };

    BasicOpcodeBuilder.prototype.pushImmediate = function pushImmediate(value) {
        this.push(13 /* Constant */, this.other(value));
    };

    BasicOpcodeBuilder.prototype.primitive = function primitive(_primitive) {
        var flag = 0;
        var primitive = void 0;
        switch (typeof _primitive) {
            case 'number':
                if (_primitive % 1 === 0 && _primitive > 0) {
                    primitive = _primitive;
                } else {
                    primitive = this.float(_primitive);
                    flag = 1;
                }
                break;
            case 'string':
                primitive = this.string(_primitive);
                flag = 2;
                break;
            case 'boolean':
                primitive = _primitive | 0;
                flag = 3;
                break;
            case 'object':
                // assume null
                primitive = 2;
                flag = 3;
                break;
            case 'undefined':
                primitive = 3;
                flag = 3;
                break;
            default:
                throw new Error('Invalid primitive passed to pushPrimitive');
        }
        this.push(14 /* PrimitiveReference */, flag << 30 | primitive);
    };

    BasicOpcodeBuilder.prototype.helper = function helper(func) {
        this.push(1 /* Helper */, this.func(func));
    };

    BasicOpcodeBuilder.prototype.pushBlock = function pushBlock(block) {
        this.push(7 /* PushBlock */, this.block(block));
    };

    BasicOpcodeBuilder.prototype.bindDynamicScope = function bindDynamicScope(_names) {
        this.push(38 /* BindDynamicScope */, this.names(_names));
    };

    BasicOpcodeBuilder.prototype.enter = function enter(args) {
        this.push(49 /* Enter */, args);
    };

    BasicOpcodeBuilder.prototype.exit = function exit() {
        this.push(50 /* Exit */);
    };

    BasicOpcodeBuilder.prototype.return = function _return() {
        this.push(22 /* Return */);
    };

    BasicOpcodeBuilder.prototype.pushFrame = function pushFrame() {
        this.push(47 /* PushFrame */);
    };

    BasicOpcodeBuilder.prototype.popFrame = function popFrame() {
        this.push(48 /* PopFrame */);
    };

    BasicOpcodeBuilder.prototype.compileDynamicBlock = function compileDynamicBlock() {
        this.push(41 /* CompileDynamicBlock */);
    };

    BasicOpcodeBuilder.prototype.invokeDynamic = function invokeDynamic(invoker) {
        this.push(43 /* InvokeDynamic */, this.other(invoker));
    };

    BasicOpcodeBuilder.prototype.invokeStatic = function invokeStatic(block) {
        var callerCount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
        var parameters = block.symbolTable.parameters;

        var calleeCount = parameters.length;
        var count = Math.min(callerCount, calleeCount);
        this.pushFrame();
        if (count) {
            this.pushChildScope();
            for (var i = 0; i < count; i++) {
                this.dup(Register.fp, callerCount - i);
                this.setVariable(parameters[i]);
            }
        }
        var _block = this.constants.block(block);
        this.push(42 /* InvokeStatic */, _block);
        if (count) {
            this.popScope();
        }
        this.popFrame();
    };

    BasicOpcodeBuilder.prototype.test = function test(testFunc) {
        var _func = void 0;
        if (testFunc === 'const') {
            _func = vm.ConstTest;
        } else if (testFunc === 'simple') {
            _func = vm.SimpleTest;
        } else if (testFunc === 'environment') {
            _func = vm.EnvironmentTest;
        } else if (typeof testFunc === 'function') {
            _func = testFunc;
        } else {
            throw new Error('unreachable');
        }
        var func = this.constants.function(_func);
        this.push(51 /* Test */, func);
    };

    BasicOpcodeBuilder.prototype.jump = function jump(target) {
        this.reserve(44 /* Jump */);
        this.labels.target(this.pos, 44 /* Jump */, target);
    };

    BasicOpcodeBuilder.prototype.jumpIf = function jumpIf(target) {
        this.reserve(45 /* JumpIf */);
        this.labels.target(this.pos, 45 /* JumpIf */, target);
    };

    BasicOpcodeBuilder.prototype.jumpUnless = function jumpUnless(target) {
        this.reserve(46 /* JumpUnless */);
        this.labels.target(this.pos, 46 /* JumpUnless */, target);
    };

    BasicOpcodeBuilder.prototype.string = function string(_string) {
        return this.constants.string(_string);
    };

    BasicOpcodeBuilder.prototype.float = function float(num) {
        return this.constants.float(num);
    };

    BasicOpcodeBuilder.prototype.names = function names(_names) {
        var names = [];
        for (var i = 0; i < _names.length; i++) {
            var n = _names[i];
            names[i] = this.constants.string(n);
        }
        return this.constants.array(names);
    };

    BasicOpcodeBuilder.prototype.symbols = function symbols(_symbols) {
        return this.constants.array(_symbols);
    };

    BasicOpcodeBuilder.prototype.other = function other(value) {
        return this.constants.other(value);
    };

    BasicOpcodeBuilder.prototype.block = function block(_block2) {
        return _block2 ? this.constants.block(_block2) : 0;
    };

    BasicOpcodeBuilder.prototype.func = function func(_func2) {
        return this.constants.function(_func2);
    };

    _createClass(BasicOpcodeBuilder, [{
        key: 'pos',
        get: function () {
            return typePos(this.heap.size());
        }
    }, {
        key: 'nextPos',
        get: function () {
            return this.heap.size();
        }
    }, {
        key: 'labels',
        get: function () {
            return this.labelsStack.current;
        }
    }]);

    return BasicOpcodeBuilder;
}();

export { BasicOpcodeBuilder };

function isCompilableExpression(expr) {
    return typeof expr === 'object' && expr !== null && typeof expr.compile === 'function';
}

var OpcodeBuilder = function (_BasicOpcodeBuilder) {
    _inherits(OpcodeBuilder, _BasicOpcodeBuilder);

    function OpcodeBuilder(env, meta) {
        var program = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : env.program;

        _classCallCheck(this, OpcodeBuilder);

        var _this = _possibleConstructorReturn(this, _BasicOpcodeBuilder.call(this, env, meta, program));

        _this.component = new ComponentBuilder(_this);
        return _this;
    }

    OpcodeBuilder.prototype.compileArgs = function compileArgs(params, hash, synthetic) {
        var positional = 0;
        if (params) {
            for (var i = 0; i < params.length; i++) {
                expr(params[i], this);
            }
            positional = params.length;
        }
        this.pushImmediate(positional);
        var names = EMPTY_ARRAY;
        if (hash) {
            names = hash[0];
            var val = hash[1];
            for (var _i = 0; _i < val.length; _i++) {
                expr(val[_i], this);
            }
        }
        this.pushImmediate(names);
        this.pushArgs(synthetic);
    };

    OpcodeBuilder.prototype.compile = function compile(expr) {
        if (isCompilableExpression(expr)) {
            return expr.compile(this);
        } else {
            return expr;
        }
    };

    OpcodeBuilder.prototype.guardedAppend = function guardedAppend(expression, trusting) {
        this.startLabels();
        this.pushFrame();
        this.returnTo('END');
        expr(expression, this);
        this.dup();
        this.test(function (reference) {
            return IsComponentDefinitionReference.create(reference);
        });
        this.enter(2);
        this.jumpUnless('ELSE');
        this.pushDynamicComponentManager();
        this.invokeComponent(null, null, null, null, null);
        this.exit();
        this.return();
        this.label('ELSE');
        if (trusting) {
            this.trustingAppend();
        } else {
            this.cautiousAppend();
        }
        this.exit();
        this.return();
        this.label('END');
        this.popFrame();
        this.stopLabels();
    };

    OpcodeBuilder.prototype.invokeComponent = function invokeComponent(attrs, params, hash, block) {
        var inverse = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;

        this.fetch(Register.s0);
        this.dup(Register.sp, 1);
        this.load(Register.s0);
        this.pushBlock(block);
        this.pushBlock(inverse);
        this.compileArgs(params, hash, false);
        this.prepareArgs(Register.s0);
        this.beginComponentTransaction();
        this.pushDynamicScope();
        this.createComponent(Register.s0, block !== null, inverse !== null);
        this.registerComponentDestructor(Register.s0);
        this.getComponentSelf(Register.s0);
        this.getComponentLayout(Register.s0);
        this.invokeDynamic(new InvokeDynamicLayout(attrs && attrs.scan()));
        this.popFrame();
        this.popScope();
        this.popDynamicScope();
        this.commitComponentTransaction();
        this.load(Register.s0);
    };

    OpcodeBuilder.prototype.template = function template(block) {
        if (!block) return null;
        return new RawInlineBlock(this.meta, block.statements, block.parameters);
    };

    return OpcodeBuilder;
}(BasicOpcodeBuilder);

export default OpcodeBuilder;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,