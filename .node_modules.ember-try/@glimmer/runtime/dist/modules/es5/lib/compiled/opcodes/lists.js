function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

import { ReferenceIterator } from '@glimmer/reference';
import { APPEND_OPCODES } from '../../opcodes';

var IterablePresenceReference = function () {
    function IterablePresenceReference(artifacts) {
        _classCallCheck(this, IterablePresenceReference);

        this.tag = artifacts.tag;
        this.artifacts = artifacts;
    }

    IterablePresenceReference.prototype.value = function value() {
        return !this.artifacts.isEmpty();
    };

    return IterablePresenceReference;
}();

APPEND_OPCODES.add(54 /* PutIterator */, function (vm) {
    var stack = vm.stack;
    var listRef = stack.pop();
    var key = stack.pop();
    var iterable = vm.env.iterableFor(listRef, key.value());
    var iterator = new ReferenceIterator(iterable);
    stack.push(iterator);
    stack.push(new IterablePresenceReference(iterator.artifacts));
});
APPEND_OPCODES.add(52 /* EnterList */, function (vm, _ref) {
    var relativeStart = _ref.op1;

    vm.enterList(relativeStart);
});
APPEND_OPCODES.add(53 /* ExitList */, function (vm) {
    return vm.exitList();
});
APPEND_OPCODES.add(55 /* Iterate */, function (vm, _ref2) {
    var breaks = _ref2.op1;

    var stack = vm.stack;
    var item = stack.peek().next();
    if (item) {
        var tryOpcode = vm.iterate(item.memo, item.value);
        vm.enterItem(item.key, tryOpcode);
    } else {
        vm.goto(breaks);
    }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9jb21waWxlZC9vcGNvZGVzL2xpc3RzLmpzIl0sIm5hbWVzIjpbIlJlZmVyZW5jZUl0ZXJhdG9yIiwiQVBQRU5EX09QQ09ERVMiLCJJdGVyYWJsZVByZXNlbmNlUmVmZXJlbmNlIiwiYXJ0aWZhY3RzIiwidGFnIiwidmFsdWUiLCJpc0VtcHR5IiwiYWRkIiwic3RhY2siLCJ2bSIsImxpc3RSZWYiLCJwb3AiLCJrZXkiLCJpdGVyYWJsZSIsImVudiIsIml0ZXJhYmxlRm9yIiwiaXRlcmF0b3IiLCJwdXNoIiwicmVsYXRpdmVTdGFydCIsIm9wMSIsImVudGVyTGlzdCIsImV4aXRMaXN0IiwiYnJlYWtzIiwiaXRlbSIsInBlZWsiLCJuZXh0IiwidHJ5T3Bjb2RlIiwiaXRlcmF0ZSIsIm1lbW8iLCJlbnRlckl0ZW0iLCJnb3RvIl0sIm1hcHBpbmdzIjoiOztBQUFBLFNBQVNBLGlCQUFULFFBQWtDLG9CQUFsQztBQUNBLFNBQVNDLGNBQVQsUUFBK0IsZUFBL0I7O0lBQ01DLHlCO0FBQ0YsdUNBQVlDLFNBQVosRUFBdUI7QUFBQTs7QUFDbkIsYUFBS0MsR0FBTCxHQUFXRCxVQUFVQyxHQUFyQjtBQUNBLGFBQUtELFNBQUwsR0FBaUJBLFNBQWpCO0FBQ0g7O3dDQUNERSxLLG9CQUFRO0FBQ0osZUFBTyxDQUFDLEtBQUtGLFNBQUwsQ0FBZUcsT0FBZixFQUFSO0FBQ0gsSzs7Ozs7QUFFTEwsZUFBZU0sR0FBZixDQUFtQixFQUFuQixDQUFzQixpQkFBdEIsRUFBeUMsY0FBTTtBQUMzQyxRQUFJQyxRQUFRQyxHQUFHRCxLQUFmO0FBQ0EsUUFBSUUsVUFBVUYsTUFBTUcsR0FBTixFQUFkO0FBQ0EsUUFBSUMsTUFBTUosTUFBTUcsR0FBTixFQUFWO0FBQ0EsUUFBSUUsV0FBV0osR0FBR0ssR0FBSCxDQUFPQyxXQUFQLENBQW1CTCxPQUFuQixFQUE0QkUsSUFBSVAsS0FBSixFQUE1QixDQUFmO0FBQ0EsUUFBSVcsV0FBVyxJQUFJaEIsaUJBQUosQ0FBc0JhLFFBQXRCLENBQWY7QUFDQUwsVUFBTVMsSUFBTixDQUFXRCxRQUFYO0FBQ0FSLFVBQU1TLElBQU4sQ0FBVyxJQUFJZix5QkFBSixDQUE4QmMsU0FBU2IsU0FBdkMsQ0FBWDtBQUNILENBUkQ7QUFTQUYsZUFBZU0sR0FBZixDQUFtQixFQUFuQixDQUFzQixlQUF0QixFQUF1QyxVQUFDRSxFQUFELFFBQWdDO0FBQUEsUUFBcEJTLGFBQW9CLFFBQXpCQyxHQUF5Qjs7QUFDbkVWLE9BQUdXLFNBQUgsQ0FBYUYsYUFBYjtBQUNILENBRkQ7QUFHQWpCLGVBQWVNLEdBQWYsQ0FBbUIsRUFBbkIsQ0FBc0IsY0FBdEIsRUFBc0M7QUFBQSxXQUFNRSxHQUFHWSxRQUFILEVBQU47QUFBQSxDQUF0QztBQUNBcEIsZUFBZU0sR0FBZixDQUFtQixFQUFuQixDQUFzQixhQUF0QixFQUFxQyxVQUFDRSxFQUFELFNBQXlCO0FBQUEsUUFBYmEsTUFBYSxTQUFsQkgsR0FBa0I7O0FBQzFELFFBQUlYLFFBQVFDLEdBQUdELEtBQWY7QUFDQSxRQUFJZSxPQUFPZixNQUFNZ0IsSUFBTixHQUFhQyxJQUFiLEVBQVg7QUFDQSxRQUFJRixJQUFKLEVBQVU7QUFDTixZQUFJRyxZQUFZakIsR0FBR2tCLE9BQUgsQ0FBV0osS0FBS0ssSUFBaEIsRUFBc0JMLEtBQUtsQixLQUEzQixDQUFoQjtBQUNBSSxXQUFHb0IsU0FBSCxDQUFhTixLQUFLWCxHQUFsQixFQUF1QmMsU0FBdkI7QUFDSCxLQUhELE1BR087QUFDSGpCLFdBQUdxQixJQUFILENBQVFSLE1BQVI7QUFDSDtBQUNKLENBVEQiLCJmaWxlIjoibGliL2NvbXBpbGVkL29wY29kZXMvbGlzdHMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBSZWZlcmVuY2VJdGVyYXRvciB9IGZyb20gJ0BnbGltbWVyL3JlZmVyZW5jZSc7XG5pbXBvcnQgeyBBUFBFTkRfT1BDT0RFUyB9IGZyb20gJy4uLy4uL29wY29kZXMnO1xuY2xhc3MgSXRlcmFibGVQcmVzZW5jZVJlZmVyZW5jZSB7XG4gICAgY29uc3RydWN0b3IoYXJ0aWZhY3RzKSB7XG4gICAgICAgIHRoaXMudGFnID0gYXJ0aWZhY3RzLnRhZztcbiAgICAgICAgdGhpcy5hcnRpZmFjdHMgPSBhcnRpZmFjdHM7XG4gICAgfVxuICAgIHZhbHVlKCkge1xuICAgICAgICByZXR1cm4gIXRoaXMuYXJ0aWZhY3RzLmlzRW1wdHkoKTtcbiAgICB9XG59XG5BUFBFTkRfT1BDT0RFUy5hZGQoNTQgLyogUHV0SXRlcmF0b3IgKi8sIHZtID0+IHtcbiAgICBsZXQgc3RhY2sgPSB2bS5zdGFjaztcbiAgICBsZXQgbGlzdFJlZiA9IHN0YWNrLnBvcCgpO1xuICAgIGxldCBrZXkgPSBzdGFjay5wb3AoKTtcbiAgICBsZXQgaXRlcmFibGUgPSB2bS5lbnYuaXRlcmFibGVGb3IobGlzdFJlZiwga2V5LnZhbHVlKCkpO1xuICAgIGxldCBpdGVyYXRvciA9IG5ldyBSZWZlcmVuY2VJdGVyYXRvcihpdGVyYWJsZSk7XG4gICAgc3RhY2sucHVzaChpdGVyYXRvcik7XG4gICAgc3RhY2sucHVzaChuZXcgSXRlcmFibGVQcmVzZW5jZVJlZmVyZW5jZShpdGVyYXRvci5hcnRpZmFjdHMpKTtcbn0pO1xuQVBQRU5EX09QQ09ERVMuYWRkKDUyIC8qIEVudGVyTGlzdCAqLywgKHZtLCB7IG9wMTogcmVsYXRpdmVTdGFydCB9KSA9PiB7XG4gICAgdm0uZW50ZXJMaXN0KHJlbGF0aXZlU3RhcnQpO1xufSk7XG5BUFBFTkRfT1BDT0RFUy5hZGQoNTMgLyogRXhpdExpc3QgKi8sIHZtID0+IHZtLmV4aXRMaXN0KCkpO1xuQVBQRU5EX09QQ09ERVMuYWRkKDU1IC8qIEl0ZXJhdGUgKi8sICh2bSwgeyBvcDE6IGJyZWFrcyB9KSA9PiB7XG4gICAgbGV0IHN0YWNrID0gdm0uc3RhY2s7XG4gICAgbGV0IGl0ZW0gPSBzdGFjay5wZWVrKCkubmV4dCgpO1xuICAgIGlmIChpdGVtKSB7XG4gICAgICAgIGxldCB0cnlPcGNvZGUgPSB2bS5pdGVyYXRlKGl0ZW0ubWVtbywgaXRlbS52YWx1ZSk7XG4gICAgICAgIHZtLmVudGVySXRlbShpdGVtLmtleSwgdHJ5T3Bjb2RlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICB2bS5nb3RvKGJyZWFrcyk7XG4gICAgfVxufSk7Il19