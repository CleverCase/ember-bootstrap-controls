function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

import { isConst, isModified, map, ReferenceCache } from '@glimmer/reference';
import { clear, Cursor } from '../../bounds';
import { Fragment } from '../../builder';
import { isComponentDefinition } from '../../component/interfaces';
import { APPEND_OPCODES, UpdatingOpcode } from '../../opcodes';
import { ConditionalReference } from '../../references';
import { cautiousInsert, isNode, isSafeString, isString, trustingInsert } from '../../upsert';
APPEND_OPCODES.add(26 /* DynamicContent */, function (vm, _ref) {
    var append = _ref.op1;

    var opcode = vm.constants.getOther(append);
    opcode.evaluate(vm);
});
function isEmpty(value) {
    return value === null || value === undefined || typeof value.toString !== 'function';
}
export function normalizeTextValue(value) {
    if (isEmpty(value)) {
        return '';
    }
    return String(value);
}
function normalizeTrustedValue(value) {
    if (isEmpty(value)) {
        return '';
    }
    if (isString(value)) {
        return value;
    }
    if (isSafeString(value)) {
        return value.toHTML();
    }
    if (isNode(value)) {
        return value;
    }
    return String(value);
}
function normalizeValue(value) {
    if (isEmpty(value)) {
        return '';
    }
    if (isString(value)) {
        return value;
    }
    if (isSafeString(value) || isNode(value)) {
        return value;
    }
    return String(value);
}
export var AppendDynamicOpcode = function () {
    function AppendDynamicOpcode() {
        _classCallCheck(this, AppendDynamicOpcode);
    }

    AppendDynamicOpcode.prototype.evaluate = function evaluate(vm) {
        var reference = vm.stack.pop();
        var normalized = this.normalize(reference);
        var value = void 0;
        var cache = void 0;
        if (isConst(reference)) {
            value = normalized.value();
        } else {
            cache = new ReferenceCache(normalized);
            value = cache.peek();
        }
        var stack = vm.elements();
        var upsert = this.insert(vm.env.getAppendOperations(), stack, value);
        var bounds = new Fragment(upsert.bounds);
        stack.newBounds(bounds);
        if (cache /* i.e. !isConst(reference) */) {
                vm.updateWith(this.updateWith(vm, reference, cache, bounds, upsert));
            }
    };

    return AppendDynamicOpcode;
}();
export var IsComponentDefinitionReference = function (_ConditionalReference) {
    _inherits(IsComponentDefinitionReference, _ConditionalReference);

    function IsComponentDefinitionReference() {
        _classCallCheck(this, IsComponentDefinitionReference);

        return _possibleConstructorReturn(this, _ConditionalReference.apply(this, arguments));
    }

    IsComponentDefinitionReference.create = function create(inner) {
        return new IsComponentDefinitionReference(inner);
    };

    IsComponentDefinitionReference.prototype.toBool = function toBool(value) {
        return isComponentDefinition(value);
    };

    return IsComponentDefinitionReference;
}(ConditionalReference);

var UpdateOpcode = function (_UpdatingOpcode) {
    _inherits(UpdateOpcode, _UpdatingOpcode);

    function UpdateOpcode(cache, bounds, upsert) {
        _classCallCheck(this, UpdateOpcode);

        var _this2 = _possibleConstructorReturn(this, _UpdatingOpcode.call(this));

        _this2.cache = cache;
        _this2.bounds = bounds;
        _this2.upsert = upsert;
        _this2.tag = cache.tag;
        return _this2;
    }

    UpdateOpcode.prototype.evaluate = function evaluate(vm) {
        var value = this.cache.revalidate();
        if (isModified(value)) {
            var bounds = this.bounds,
                upsert = this.upsert;
            var dom = vm.dom;

            if (!this.upsert.update(dom, value)) {
                var cursor = new Cursor(bounds.parentElement(), clear(bounds));
                upsert = this.upsert = this.insert(vm.env.getAppendOperations(), cursor, value);
            }
            bounds.update(upsert.bounds);
        }
    };

    UpdateOpcode.prototype.toJSON = function toJSON() {
        var guid = this._guid,
            type = this.type,
            cache = this.cache;

        return {
            details: { lastValue: JSON.stringify(cache.peek()) },
            guid: guid,
            type: type
        };
    };

    return UpdateOpcode;
}(UpdatingOpcode);

export var OptimizedCautiousAppendOpcode = function (_AppendDynamicOpcode) {
    _inherits(OptimizedCautiousAppendOpcode, _AppendDynamicOpcode);

    function OptimizedCautiousAppendOpcode() {
        _classCallCheck(this, OptimizedCautiousAppendOpcode);

        var _this3 = _possibleConstructorReturn(this, _AppendDynamicOpcode.apply(this, arguments));

        _this3.type = 'optimized-cautious-append';
        return _this3;
    }

    OptimizedCautiousAppendOpcode.prototype.normalize = function normalize(reference) {
        return map(reference, normalizeValue);
    };

    OptimizedCautiousAppendOpcode.prototype.insert = function insert(dom, cursor, value) {
        return cautiousInsert(dom, cursor, value);
    };

    OptimizedCautiousAppendOpcode.prototype.updateWith = function updateWith(_vm, _reference, cache, bounds, upsert) {
        return new OptimizedCautiousUpdateOpcode(cache, bounds, upsert);
    };

    return OptimizedCautiousAppendOpcode;
}(AppendDynamicOpcode);

var OptimizedCautiousUpdateOpcode = function (_UpdateOpcode) {
    _inherits(OptimizedCautiousUpdateOpcode, _UpdateOpcode);

    function OptimizedCautiousUpdateOpcode() {
        _classCallCheck(this, OptimizedCautiousUpdateOpcode);

        var _this4 = _possibleConstructorReturn(this, _UpdateOpcode.apply(this, arguments));

        _this4.type = 'optimized-cautious-update';
        return _this4;
    }

    OptimizedCautiousUpdateOpcode.prototype.insert = function insert(dom, cursor, value) {
        return cautiousInsert(dom, cursor, value);
    };

    return OptimizedCautiousUpdateOpcode;
}(UpdateOpcode);

export var OptimizedTrustingAppendOpcode = function (_AppendDynamicOpcode2) {
    _inherits(OptimizedTrustingAppendOpcode, _AppendDynamicOpcode2);

    function OptimizedTrustingAppendOpcode() {
        _classCallCheck(this, OptimizedTrustingAppendOpcode);

        var _this5 = _possibleConstructorReturn(this, _AppendDynamicOpcode2.apply(this, arguments));

        _this5.type = 'optimized-trusting-append';
        return _this5;
    }

    OptimizedTrustingAppendOpcode.prototype.normalize = function normalize(reference) {
        return map(reference, normalizeTrustedValue);
    };

    OptimizedTrustingAppendOpcode.prototype.insert = function insert(dom, cursor, value) {
        return trustingInsert(dom, cursor, value);
    };

    OptimizedTrustingAppendOpcode.prototype.updateWith = function updateWith(_vm, _reference, cache, bounds, upsert) {
        return new OptimizedTrustingUpdateOpcode(cache, bounds, upsert);
    };

    return OptimizedTrustingAppendOpcode;
}(AppendDynamicOpcode);

var OptimizedTrustingUpdateOpcode = function (_UpdateOpcode2) {
    _inherits(OptimizedTrustingUpdateOpcode, _UpdateOpcode2);

    function OptimizedTrustingUpdateOpcode() {
        _classCallCheck(this, OptimizedTrustingUpdateOpcode);

        var _this6 = _possibleConstructorReturn(this, _UpdateOpcode2.apply(this, arguments));

        _this6.type = 'optimized-trusting-update';
        return _this6;
    }

    OptimizedTrustingUpdateOpcode.prototype.insert = function insert(dom, cursor, value) {
        return trustingInsert(dom, cursor, value);
    };

    return OptimizedTrustingUpdateOpcode;
}(UpdateOpcode);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,