function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Constants = function () {
    function Constants() {
        _classCallCheck(this, Constants);

        // `0` means NULL
        this.references = [];
        this.strings = [];
        this.expressions = [];
        this.floats = [];
        this.arrays = [];
        this.blocks = [];
        this.functions = [];
        this.others = [];
    }

    Constants.prototype.getReference = function getReference(value) {
        return this.references[value - 1];
    };

    Constants.prototype.reference = function reference(value) {
        var index = this.references.length;
        this.references.push(value);
        return index + 1;
    };

    Constants.prototype.getString = function getString(value) {
        return this.strings[value - 1];
    };

    Constants.prototype.getFloat = function getFloat(value) {
        return this.floats[value - 1];
    };

    Constants.prototype.float = function float(value) {
        return this.floats.push(value);
    };

    Constants.prototype.string = function string(value) {
        var index = this.strings.length;
        this.strings.push(value);
        return index + 1;
    };

    Constants.prototype.getExpression = function getExpression(value) {
        return this.expressions[value - 1];
    };

    Constants.prototype.getArray = function getArray(value) {
        return this.arrays[value - 1];
    };

    Constants.prototype.getNames = function getNames(value) {
        var _names = [];
        var names = this.getArray(value);
        for (var i = 0; i < names.length; i++) {
            var n = names[i];
            _names[i] = this.getString(n);
        }
        return _names;
    };

    Constants.prototype.array = function array(values) {
        var index = this.arrays.length;
        this.arrays.push(values);
        return index + 1;
    };

    Constants.prototype.getBlock = function getBlock(value) {
        return this.blocks[value - 1];
    };

    Constants.prototype.block = function block(_block) {
        var index = this.blocks.length;
        this.blocks.push(_block);
        return index + 1;
    };

    Constants.prototype.getFunction = function getFunction(value) {
        return this.functions[value - 1];
    };

    Constants.prototype.function = function _function(f) {
        var index = this.functions.length;
        this.functions.push(f);
        return index + 1;
    };

    Constants.prototype.getOther = function getOther(value) {
        return this.others[value - 1];
    };

    Constants.prototype.other = function other(_other) {
        var index = this.others.length;
        this.others.push(_other);
        return index + 1;
    };

    return Constants;
}();

export { Constants };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9lbnZpcm9ubWVudC9jb25zdGFudHMuanMiXSwibmFtZXMiOlsiQ29uc3RhbnRzIiwicmVmZXJlbmNlcyIsInN0cmluZ3MiLCJleHByZXNzaW9ucyIsImZsb2F0cyIsImFycmF5cyIsImJsb2NrcyIsImZ1bmN0aW9ucyIsIm90aGVycyIsImdldFJlZmVyZW5jZSIsInZhbHVlIiwicmVmZXJlbmNlIiwiaW5kZXgiLCJsZW5ndGgiLCJwdXNoIiwiZ2V0U3RyaW5nIiwiZ2V0RmxvYXQiLCJmbG9hdCIsInN0cmluZyIsImdldEV4cHJlc3Npb24iLCJnZXRBcnJheSIsImdldE5hbWVzIiwiX25hbWVzIiwibmFtZXMiLCJpIiwibiIsImFycmF5IiwidmFsdWVzIiwiZ2V0QmxvY2siLCJibG9jayIsImdldEZ1bmN0aW9uIiwiZnVuY3Rpb24iLCJmIiwiZ2V0T3RoZXIiLCJvdGhlciJdLCJtYXBwaW5ncyI6Ijs7SUFBYUEsUztBQUNULHlCQUFjO0FBQUE7O0FBQ1Y7QUFDQSxhQUFLQyxVQUFMLEdBQWtCLEVBQWxCO0FBQ0EsYUFBS0MsT0FBTCxHQUFlLEVBQWY7QUFDQSxhQUFLQyxXQUFMLEdBQW1CLEVBQW5CO0FBQ0EsYUFBS0MsTUFBTCxHQUFjLEVBQWQ7QUFDQSxhQUFLQyxNQUFMLEdBQWMsRUFBZDtBQUNBLGFBQUtDLE1BQUwsR0FBYyxFQUFkO0FBQ0EsYUFBS0MsU0FBTCxHQUFpQixFQUFqQjtBQUNBLGFBQUtDLE1BQUwsR0FBYyxFQUFkO0FBQ0g7O3dCQUNEQyxZLHlCQUFhQyxLLEVBQU87QUFDaEIsZUFBTyxLQUFLVCxVQUFMLENBQWdCUyxRQUFRLENBQXhCLENBQVA7QUFDSCxLOzt3QkFDREMsUyxzQkFBVUQsSyxFQUFPO0FBQ2IsWUFBSUUsUUFBUSxLQUFLWCxVQUFMLENBQWdCWSxNQUE1QjtBQUNBLGFBQUtaLFVBQUwsQ0FBZ0JhLElBQWhCLENBQXFCSixLQUFyQjtBQUNBLGVBQU9FLFFBQVEsQ0FBZjtBQUNILEs7O3dCQUNERyxTLHNCQUFVTCxLLEVBQU87QUFDYixlQUFPLEtBQUtSLE9BQUwsQ0FBYVEsUUFBUSxDQUFyQixDQUFQO0FBQ0gsSzs7d0JBQ0RNLFEscUJBQVNOLEssRUFBTztBQUNaLGVBQU8sS0FBS04sTUFBTCxDQUFZTSxRQUFRLENBQXBCLENBQVA7QUFDSCxLOzt3QkFDRE8sSyxrQkFBTVAsSyxFQUFPO0FBQ1QsZUFBTyxLQUFLTixNQUFMLENBQVlVLElBQVosQ0FBaUJKLEtBQWpCLENBQVA7QUFDSCxLOzt3QkFDRFEsTSxtQkFBT1IsSyxFQUFPO0FBQ1YsWUFBSUUsUUFBUSxLQUFLVixPQUFMLENBQWFXLE1BQXpCO0FBQ0EsYUFBS1gsT0FBTCxDQUFhWSxJQUFiLENBQWtCSixLQUFsQjtBQUNBLGVBQU9FLFFBQVEsQ0FBZjtBQUNILEs7O3dCQUNETyxhLDBCQUFjVCxLLEVBQU87QUFDakIsZUFBTyxLQUFLUCxXQUFMLENBQWlCTyxRQUFRLENBQXpCLENBQVA7QUFDSCxLOzt3QkFDRFUsUSxxQkFBU1YsSyxFQUFPO0FBQ1osZUFBTyxLQUFLTCxNQUFMLENBQVlLLFFBQVEsQ0FBcEIsQ0FBUDtBQUNILEs7O3dCQUNEVyxRLHFCQUFTWCxLLEVBQU87QUFDWixZQUFJWSxTQUFTLEVBQWI7QUFDQSxZQUFJQyxRQUFRLEtBQUtILFFBQUwsQ0FBY1YsS0FBZCxDQUFaO0FBQ0EsYUFBSyxJQUFJYyxJQUFJLENBQWIsRUFBZ0JBLElBQUlELE1BQU1WLE1BQTFCLEVBQWtDVyxHQUFsQyxFQUF1QztBQUNuQyxnQkFBSUMsSUFBSUYsTUFBTUMsQ0FBTixDQUFSO0FBQ0FGLG1CQUFPRSxDQUFQLElBQVksS0FBS1QsU0FBTCxDQUFlVSxDQUFmLENBQVo7QUFDSDtBQUNELGVBQU9ILE1BQVA7QUFDSCxLOzt3QkFDREksSyxrQkFBTUMsTSxFQUFRO0FBQ1YsWUFBSWYsUUFBUSxLQUFLUCxNQUFMLENBQVlRLE1BQXhCO0FBQ0EsYUFBS1IsTUFBTCxDQUFZUyxJQUFaLENBQWlCYSxNQUFqQjtBQUNBLGVBQU9mLFFBQVEsQ0FBZjtBQUNILEs7O3dCQUNEZ0IsUSxxQkFBU2xCLEssRUFBTztBQUNaLGVBQU8sS0FBS0osTUFBTCxDQUFZSSxRQUFRLENBQXBCLENBQVA7QUFDSCxLOzt3QkFDRG1CLEssa0JBQU1BLE0sRUFBTztBQUNULFlBQUlqQixRQUFRLEtBQUtOLE1BQUwsQ0FBWU8sTUFBeEI7QUFDQSxhQUFLUCxNQUFMLENBQVlRLElBQVosQ0FBaUJlLE1BQWpCO0FBQ0EsZUFBT2pCLFFBQVEsQ0FBZjtBQUNILEs7O3dCQUNEa0IsVyx3QkFBWXBCLEssRUFBTztBQUNmLGVBQU8sS0FBS0gsU0FBTCxDQUFlRyxRQUFRLENBQXZCLENBQVA7QUFDSCxLOzt3QkFDRHFCLFEsc0JBQVNDLEMsRUFBRztBQUNSLFlBQUlwQixRQUFRLEtBQUtMLFNBQUwsQ0FBZU0sTUFBM0I7QUFDQSxhQUFLTixTQUFMLENBQWVPLElBQWYsQ0FBb0JrQixDQUFwQjtBQUNBLGVBQU9wQixRQUFRLENBQWY7QUFDSCxLOzt3QkFDRHFCLFEscUJBQVN2QixLLEVBQU87QUFDWixlQUFPLEtBQUtGLE1BQUwsQ0FBWUUsUUFBUSxDQUFwQixDQUFQO0FBQ0gsSzs7d0JBQ0R3QixLLGtCQUFNQSxNLEVBQU87QUFDVCxZQUFJdEIsUUFBUSxLQUFLSixNQUFMLENBQVlLLE1BQXhCO0FBQ0EsYUFBS0wsTUFBTCxDQUFZTSxJQUFaLENBQWlCb0IsTUFBakI7QUFDQSxlQUFPdEIsUUFBUSxDQUFmO0FBQ0gsSyIsImZpbGUiOiJsaWIvZW52aXJvbm1lbnQvY29uc3RhbnRzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNsYXNzIENvbnN0YW50cyB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIC8vIGAwYCBtZWFucyBOVUxMXG4gICAgICAgIHRoaXMucmVmZXJlbmNlcyA9IFtdO1xuICAgICAgICB0aGlzLnN0cmluZ3MgPSBbXTtcbiAgICAgICAgdGhpcy5leHByZXNzaW9ucyA9IFtdO1xuICAgICAgICB0aGlzLmZsb2F0cyA9IFtdO1xuICAgICAgICB0aGlzLmFycmF5cyA9IFtdO1xuICAgICAgICB0aGlzLmJsb2NrcyA9IFtdO1xuICAgICAgICB0aGlzLmZ1bmN0aW9ucyA9IFtdO1xuICAgICAgICB0aGlzLm90aGVycyA9IFtdO1xuICAgIH1cbiAgICBnZXRSZWZlcmVuY2UodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmVmZXJlbmNlc1t2YWx1ZSAtIDFdO1xuICAgIH1cbiAgICByZWZlcmVuY2UodmFsdWUpIHtcbiAgICAgICAgbGV0IGluZGV4ID0gdGhpcy5yZWZlcmVuY2VzLmxlbmd0aDtcbiAgICAgICAgdGhpcy5yZWZlcmVuY2VzLnB1c2godmFsdWUpO1xuICAgICAgICByZXR1cm4gaW5kZXggKyAxO1xuICAgIH1cbiAgICBnZXRTdHJpbmcodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RyaW5nc1t2YWx1ZSAtIDFdO1xuICAgIH1cbiAgICBnZXRGbG9hdCh2YWx1ZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5mbG9hdHNbdmFsdWUgLSAxXTtcbiAgICB9XG4gICAgZmxvYXQodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZmxvYXRzLnB1c2godmFsdWUpO1xuICAgIH1cbiAgICBzdHJpbmcodmFsdWUpIHtcbiAgICAgICAgbGV0IGluZGV4ID0gdGhpcy5zdHJpbmdzLmxlbmd0aDtcbiAgICAgICAgdGhpcy5zdHJpbmdzLnB1c2godmFsdWUpO1xuICAgICAgICByZXR1cm4gaW5kZXggKyAxO1xuICAgIH1cbiAgICBnZXRFeHByZXNzaW9uKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmV4cHJlc3Npb25zW3ZhbHVlIC0gMV07XG4gICAgfVxuICAgIGdldEFycmF5KHZhbHVlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmFycmF5c1t2YWx1ZSAtIDFdO1xuICAgIH1cbiAgICBnZXROYW1lcyh2YWx1ZSkge1xuICAgICAgICBsZXQgX25hbWVzID0gW107XG4gICAgICAgIGxldCBuYW1lcyA9IHRoaXMuZ2V0QXJyYXkodmFsdWUpO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG5hbWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBsZXQgbiA9IG5hbWVzW2ldO1xuICAgICAgICAgICAgX25hbWVzW2ldID0gdGhpcy5nZXRTdHJpbmcobik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIF9uYW1lcztcbiAgICB9XG4gICAgYXJyYXkodmFsdWVzKSB7XG4gICAgICAgIGxldCBpbmRleCA9IHRoaXMuYXJyYXlzLmxlbmd0aDtcbiAgICAgICAgdGhpcy5hcnJheXMucHVzaCh2YWx1ZXMpO1xuICAgICAgICByZXR1cm4gaW5kZXggKyAxO1xuICAgIH1cbiAgICBnZXRCbG9jayh2YWx1ZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5ibG9ja3NbdmFsdWUgLSAxXTtcbiAgICB9XG4gICAgYmxvY2soYmxvY2spIHtcbiAgICAgICAgbGV0IGluZGV4ID0gdGhpcy5ibG9ja3MubGVuZ3RoO1xuICAgICAgICB0aGlzLmJsb2Nrcy5wdXNoKGJsb2NrKTtcbiAgICAgICAgcmV0dXJuIGluZGV4ICsgMTtcbiAgICB9XG4gICAgZ2V0RnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZnVuY3Rpb25zW3ZhbHVlIC0gMV07XG4gICAgfVxuICAgIGZ1bmN0aW9uKGYpIHtcbiAgICAgICAgbGV0IGluZGV4ID0gdGhpcy5mdW5jdGlvbnMubGVuZ3RoO1xuICAgICAgICB0aGlzLmZ1bmN0aW9ucy5wdXNoKGYpO1xuICAgICAgICByZXR1cm4gaW5kZXggKyAxO1xuICAgIH1cbiAgICBnZXRPdGhlcih2YWx1ZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5vdGhlcnNbdmFsdWUgLSAxXTtcbiAgICB9XG4gICAgb3RoZXIob3RoZXIpIHtcbiAgICAgICAgbGV0IGluZGV4ID0gdGhpcy5vdGhlcnMubGVuZ3RoO1xuICAgICAgICB0aGlzLm90aGVycy5wdXNoKG90aGVyKTtcbiAgICAgICAgcmV0dXJuIGluZGV4ICsgMTtcbiAgICB9XG59Il19