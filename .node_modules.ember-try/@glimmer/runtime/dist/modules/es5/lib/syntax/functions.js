function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

import { map } from '@glimmer/reference';
import { assert, dict, EMPTY_ARRAY } from '@glimmer/util';
import * as WireFormat from '@glimmer/wire-format';
import OpcodeBuilder from '../compiled/opcodes/builder';
import { Register } from '../opcodes';
import * as ClientSide from '../syntax/client-side';
import RawInlineBlock from './raw-block';
var Ops = WireFormat.Ops;
export var ATTRS_BLOCK = '&attrs';

var Compilers = function () {
    function Compilers() {
        var offset = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

        _classCallCheck(this, Compilers);

        this.offset = offset;
        this.names = dict();
        this.funcs = [];
    }

    Compilers.prototype.add = function add(name, func) {
        this.funcs.push(func);
        this.names[name] = this.funcs.length - 1;
    };

    Compilers.prototype.compile = function compile(sexp, builder) {
        var name = sexp[this.offset];
        var index = this.names[name];
        var func = this.funcs[index];
        assert(!!func, 'expected an implementation for ' + (this.offset === 0 ? Ops[sexp[0]] : ClientSide.Ops[sexp[1]]));
        func(sexp, builder);
    };

    return Compilers;
}();

var STATEMENTS = new Compilers();
var CLIENT_SIDE = new Compilers(1);
STATEMENTS.add(Ops.Text, function (sexp, builder) {
    builder.text(sexp[1]);
});
STATEMENTS.add(Ops.Comment, function (sexp, builder) {
    builder.comment(sexp[1]);
});
STATEMENTS.add(Ops.CloseElement, function (_sexp, builder) {
    builder.closeElement();
});
STATEMENTS.add(Ops.FlushElement, function (_sexp, builder) {
    builder.flushElement();
});
STATEMENTS.add(Ops.Modifier, function (sexp, builder) {
    var env = builder.env,
        meta = builder.meta;
    var name = sexp[1],
        params = sexp[2],
        hash = sexp[3];

    if (env.hasModifier(name, meta.templateMeta)) {
        builder.compileArgs(params, hash, true);
        builder.modifier(env.lookupModifier(name, meta.templateMeta));
    } else {
        throw new Error('Compile Error ' + name + ' is not a modifier: Helpers may not be used in the element form.');
    }
});
STATEMENTS.add(Ops.StaticAttr, function (sexp, builder) {
    var name = sexp[1],
        value = sexp[2],
        namespace = sexp[3];

    builder.staticAttr(name, namespace, value);
});
STATEMENTS.add(Ops.DynamicAttr, function (sexp, builder) {
    dynamicAttr(sexp, false, builder);
});
STATEMENTS.add(Ops.TrustingAttr, function (sexp, builder) {
    dynamicAttr(sexp, true, builder);
});
function dynamicAttr(sexp, trusting, builder) {
    var name = sexp[1],
        value = sexp[2],
        namespace = sexp[3];

    expr(value, builder);
    if (namespace) {
        builder.dynamicAttrNS(name, namespace, trusting);
    } else {
        builder.dynamicAttr(name, trusting);
    }
}
STATEMENTS.add(Ops.OpenElement, function (sexp, builder) {
    builder.openPrimitiveElement(sexp[1]);
});
CLIENT_SIDE.add(ClientSide.Ops.OpenComponentElement, function (sexp, builder) {
    builder.pushComponentOperations();
    builder.openElementWithOperations(sexp[2]);
});
CLIENT_SIDE.add(ClientSide.Ops.DidCreateElement, function (_sexp, builder) {
    builder.didCreateElement(Register.s0);
});
CLIENT_SIDE.add(ClientSide.Ops.DidRenderLayout, function (_sexp, builder) {
    builder.didRenderLayout(Register.s0);
});
STATEMENTS.add(Ops.Append, function (sexp, builder) {
    var value = sexp[1],
        trusting = sexp[2];

    var _builder$env$macros = builder.env.macros(),
        inlines = _builder$env$macros.inlines;

    var returned = inlines.compile(sexp, builder) || value;
    if (returned === true) return;
    var isGet = E.isGet(value);
    var isMaybeLocal = E.isMaybeLocal(value);
    if (trusting) {
        builder.guardedAppend(value, true);
    } else {
        if (isGet || isMaybeLocal) {
            builder.guardedAppend(value, false);
        } else {
            expr(value, builder);
            builder.cautiousAppend();
        }
    }
});
STATEMENTS.add(Ops.Block, function (sexp, builder) {
    var name = sexp[1],
        params = sexp[2],
        hash = sexp[3],
        _template = sexp[4],
        _inverse = sexp[5];

    var template = builder.template(_template);
    var inverse = builder.template(_inverse);
    var templateBlock = template && template.scan();
    var inverseBlock = inverse && inverse.scan();

    var _builder$env$macros2 = builder.env.macros(),
        blocks = _builder$env$macros2.blocks;

    blocks.compile(name, params, hash, templateBlock, inverseBlock, builder);
});
export var InvokeDynamicLayout = function () {
    function InvokeDynamicLayout(attrs) {
        _classCallCheck(this, InvokeDynamicLayout);

        this.attrs = attrs;
    }

    InvokeDynamicLayout.prototype.invoke = function invoke(vm, layout) {
        var _layout$symbolTable = layout.symbolTable,
            symbols = _layout$symbolTable.symbols,
            hasEval = _layout$symbolTable.hasEval;

        var stack = vm.stack;
        var scope = vm.pushRootScope(symbols.length + 1, true);
        scope.bindSelf(stack.pop());
        scope.bindBlock(symbols.indexOf(ATTRS_BLOCK) + 1, this.attrs);
        var lookup = null;
        var $eval = -1;
        if (hasEval) {
            $eval = symbols.indexOf('$eval') + 1;
            lookup = dict();
        }
        var callerNames = stack.pop();
        for (var i = callerNames.length - 1; i >= 0; i--) {
            var symbol = symbols.indexOf(callerNames[i]);
            var value = stack.pop();
            if (symbol !== -1) scope.bindSymbol(symbol + 1, value);
            if (hasEval) lookup[callerNames[i]] = value;
        }
        var numPositionalArgs = stack.pop();
        assert(typeof numPositionalArgs === 'number', '[BUG] Incorrect value of positional argument count found during invoke-dynamic-layout.');
        // Currently we don't support accessing positional args in templates, so just throw them away
        stack.pop(numPositionalArgs);
        var inverseSymbol = symbols.indexOf('&inverse');
        var inverse = stack.pop();
        if (inverseSymbol !== -1) {
            scope.bindBlock(inverseSymbol + 1, inverse);
        }
        if (lookup) lookup['&inverse'] = inverse;
        var defaultSymbol = symbols.indexOf('&default');
        var defaultBlock = stack.pop();
        if (defaultSymbol !== -1) {
            scope.bindBlock(defaultSymbol + 1, defaultBlock);
        }
        if (lookup) lookup['&default'] = defaultBlock;
        if (lookup) scope.bindEvalScope(lookup);
        vm.pushFrame();
        vm.call(layout.handle);
    };

    InvokeDynamicLayout.prototype.toJSON = function toJSON() {
        return { GlimmerDebug: '<invoke-dynamic-layout>' };
    };

    return InvokeDynamicLayout;
}();
STATEMENTS.add(Ops.Component, function (sexp, builder) {
    var tag = sexp[1],
        attrs = sexp[2],
        args = sexp[3],
        block = sexp[4];

    if (builder.env.hasComponentDefinition(tag, builder.meta.templateMeta)) {
        var child = builder.template(block);
        var attrsBlock = new RawInlineBlock(builder.meta, attrs, EMPTY_ARRAY);
        var definition = builder.env.getComponentDefinition(tag, builder.meta.templateMeta);
        builder.pushComponentManager(definition);
        builder.invokeComponent(attrsBlock, null, args, child && child.scan());
    } else if (block && block.parameters.length) {
        throw new Error('Compile Error: Cannot find component ' + tag);
    } else {
        builder.openPrimitiveElement(tag);
        for (var i = 0; i < attrs.length; i++) {
            STATEMENTS.compile(attrs[i], builder);
        }
        builder.flushElement();
        if (block) {
            var stmts = block.statements;
            for (var _i = 0; _i < stmts.length; _i++) {
                STATEMENTS.compile(stmts[_i], builder);
            }
        }
        builder.closeElement();
    }
});
export var PartialInvoker = function () {
    function PartialInvoker(outerSymbols, evalInfo) {
        _classCallCheck(this, PartialInvoker);

        this.outerSymbols = outerSymbols;
        this.evalInfo = evalInfo;
    }

    PartialInvoker.prototype.invoke = function invoke(vm, _partial) {
        var partial = _partial;
        var partialSymbols = partial.symbolTable.symbols;
        var outerScope = vm.scope();
        var partialScope = vm.pushRootScope(partialSymbols.length, false);
        partialScope.bindCallerScope(outerScope.getCallerScope());
        partialScope.bindEvalScope(outerScope.getEvalScope());
        partialScope.bindSelf(outerScope.getSelf());
        var evalInfo = this.evalInfo,
            outerSymbols = this.outerSymbols;

        var locals = dict();
        for (var i = 0; i < evalInfo.length; i++) {
            var slot = evalInfo[i];
            var name = outerSymbols[slot - 1];
            var ref = outerScope.getSymbol(slot);
            locals[name] = ref;
        }
        var evalScope = outerScope.getEvalScope();
        for (var _i2 = 0; _i2 < partialSymbols.length; _i2++) {
            var _name = partialSymbols[_i2];
            var symbol = _i2 + 1;
            var value = evalScope[_name];
            if (value !== undefined) partialScope.bind(symbol, value);
        }
        partialScope.bindPartialMap(locals);
        vm.pushFrame();
        vm.call(partial.handle);
    };

    return PartialInvoker;
}();
STATEMENTS.add(Ops.Partial, function (sexp, builder) {
    var name = sexp[1],
        evalInfo = sexp[2];
    var _builder$meta = builder.meta,
        templateMeta = _builder$meta.templateMeta,
        symbols = _builder$meta.symbols;

    function helper(vm, args) {
        var env = vm.env;

        var nameRef = args.positional.at(0);
        return map(nameRef, function (n) {
            if (typeof n === 'string' && n) {
                if (!env.hasPartial(n, templateMeta)) {
                    throw new Error('Could not find a partial named "' + n + '"');
                }
                return env.lookupPartial(n, templateMeta);
            } else if (n) {
                throw new Error('Could not find a partial named "' + String(n) + '"');
            } else {
                return null;
            }
        });
    }
    builder.startLabels();
    builder.pushFrame();
    builder.returnTo('END');
    expr(name, builder);
    builder.pushImmediate(1);
    builder.pushImmediate(EMPTY_ARRAY);
    builder.pushArgs(true);
    builder.helper(helper);
    builder.dup();
    builder.test('simple');
    builder.enter(2);
    builder.jumpUnless('ELSE');
    builder.getPartialTemplate();
    builder.compileDynamicBlock();
    builder.invokeDynamic(new PartialInvoker(symbols, evalInfo));
    builder.popScope();
    builder.popFrame();
    builder.label('ELSE');
    builder.exit();
    builder.return();
    builder.label('END');
    builder.popFrame();
    builder.stopLabels();
});

var InvokeDynamicYield = function () {
    function InvokeDynamicYield(callerCount) {
        _classCallCheck(this, InvokeDynamicYield);

        this.callerCount = callerCount;
    }

    InvokeDynamicYield.prototype.invoke = function invoke(vm, block) {
        var callerCount = this.callerCount;

        var stack = vm.stack;
        if (!block) {
            // To balance the pop{Frame,Scope}
            vm.pushFrame();
            vm.pushCallerScope();
            return;
        }
        var table = block.symbolTable;
        var locals = table.parameters; // always present in inline blocks
        var calleeCount = locals ? locals.length : 0;
        var count = Math.min(callerCount, calleeCount);
        vm.pushFrame();
        vm.pushCallerScope(calleeCount > 0);
        var scope = vm.scope();
        for (var i = 0; i < count; i++) {
            scope.bindSymbol(locals[i], stack.fromBase(callerCount - i));
        }
        vm.call(block.handle);
    };

    InvokeDynamicYield.prototype.toJSON = function toJSON() {
        return { GlimmerDebug: '<invoke-dynamic-yield caller-count=' + this.callerCount + '>' };
    };

    return InvokeDynamicYield;
}();

STATEMENTS.add(Ops.Yield, function (sexp, builder) {
    var to = sexp[1],
        params = sexp[2];

    var count = compileList(params, builder);
    builder.getBlock(to);
    builder.compileDynamicBlock();
    builder.invokeDynamic(new InvokeDynamicYield(count));
    builder.popScope();
    builder.popFrame();
    if (count) {
        builder.pop(count);
    }
});
STATEMENTS.add(Ops.Debugger, function (sexp, builder) {
    var evalInfo = sexp[1];

    builder.debugger(builder.meta.symbols, evalInfo);
});
STATEMENTS.add(Ops.ClientSideStatement, function (sexp, builder) {
    CLIENT_SIDE.compile(sexp, builder);
});
var EXPRESSIONS = new Compilers();
var CLIENT_SIDE_EXPRS = new Compilers(1);
var E = WireFormat.Expressions;
export function expr(expression, builder) {
    if (Array.isArray(expression)) {
        EXPRESSIONS.compile(expression, builder);
    } else {
        builder.primitive(expression);
    }
}
EXPRESSIONS.add(Ops.Unknown, function (sexp, builder) {
    var name = sexp[1];
    if (builder.env.hasHelper(name, builder.meta.templateMeta)) {
        EXPRESSIONS.compile([Ops.Helper, name, EMPTY_ARRAY, null], builder);
    } else if (builder.meta.asPartial) {
        builder.resolveMaybeLocal(name);
    } else {
        builder.getVariable(0);
        builder.getProperty(name);
    }
});
EXPRESSIONS.add(Ops.Concat, function (sexp, builder) {
    var parts = sexp[1];
    for (var i = 0; i < parts.length; i++) {
        expr(parts[i], builder);
    }
    builder.concat(parts.length);
});
CLIENT_SIDE_EXPRS.add(ClientSide.Ops.FunctionExpression, function (sexp, builder) {
    builder.function(sexp[2]);
});
EXPRESSIONS.add(Ops.Helper, function (sexp, builder) {
    var env = builder.env,
        meta = builder.meta;
    var name = sexp[1],
        params = sexp[2],
        hash = sexp[3];

    if (env.hasHelper(name, meta.templateMeta)) {
        builder.compileArgs(params, hash, true);
        builder.helper(env.lookupHelper(name, meta.templateMeta));
    } else {
        throw new Error('Compile Error: ' + name + ' is not a helper');
    }
});
EXPRESSIONS.add(Ops.Get, function (sexp, builder) {
    var head = sexp[1],
        path = sexp[2];

    builder.getVariable(head);
    for (var i = 0; i < path.length; i++) {
        builder.getProperty(path[i]);
    }
});
EXPRESSIONS.add(Ops.MaybeLocal, function (sexp, builder) {
    var path = sexp[1];

    if (builder.meta.asPartial) {
        var head = path[0];
        path = path.slice(1);
        builder.resolveMaybeLocal(head);
    } else {
        builder.getVariable(0);
    }
    for (var i = 0; i < path.length; i++) {
        builder.getProperty(path[i]);
    }
});
EXPRESSIONS.add(Ops.Undefined, function (_sexp, builder) {
    return builder.primitive(undefined);
});
EXPRESSIONS.add(Ops.HasBlock, function (sexp, builder) {
    builder.hasBlock(sexp[1]);
});
EXPRESSIONS.add(Ops.HasBlockParams, function (sexp, builder) {
    builder.hasBlockParams(sexp[1]);
});
EXPRESSIONS.add(Ops.ClientSideExpression, function (sexp, builder) {
    CLIENT_SIDE_EXPRS.compile(sexp, builder);
});
export function compileList(params, builder) {
    if (!params) return 0;
    for (var i = 0; i < params.length; i++) {
        expr(params[i], builder);
    }
    return params.length;
}
export var Blocks = function () {
    function Blocks() {
        _classCallCheck(this, Blocks);

        this.names = dict();
        this.funcs = [];
    }

    Blocks.prototype.add = function add(name, func) {
        this.funcs.push(func);
        this.names[name] = this.funcs.length - 1;
    };

    Blocks.prototype.addMissing = function addMissing(func) {
        this.missing = func;
    };

    Blocks.prototype.compile = function compile(name, params, hash, template, inverse, builder) {
        var index = this.names[name];
        if (index === undefined) {
            assert(!!this.missing, name + ' not found, and no catch-all block handler was registered');
            var func = this.missing;
            var handled = func(name, params, hash, template, inverse, builder);
            assert(!!handled, name + ' not found, and the catch-all block handler didn\'t handle it');
        } else {
            var _func = this.funcs[index];
            _func(params, hash, template, inverse, builder);
        }
    };

    return Blocks;
}();
export var BLOCKS = new Blocks();
export var Inlines = function () {
    function Inlines() {
        _classCallCheck(this, Inlines);

        this.names = dict();
        this.funcs = [];
    }

    Inlines.prototype.add = function add(name, func) {
        this.funcs.push(func);
        this.names[name] = this.funcs.length - 1;
    };

    Inlines.prototype.addMissing = function addMissing(func) {
        this.missing = func;
    };

    Inlines.prototype.compile = function compile(sexp, builder) {
        var value = sexp[1];
        // TODO: Fix this so that expression macros can return
        // things like components, so that {{component foo}}
        // is the same as {{(component foo)}}
        if (!Array.isArray(value)) return ['expr', value];
        var name = void 0;
        var params = void 0;
        var hash = void 0;
        if (value[0] === Ops.Helper) {
            name = value[1];
            params = value[2];
            hash = value[3];
        } else if (value[0] === Ops.Unknown) {
            name = value[1];
            params = hash = null;
        } else {
            return ['expr', value];
        }
        var index = this.names[name];
        if (index === undefined && this.missing) {
            var func = this.missing;
            var returned = func(name, params, hash, builder);
            return returned === false ? ['expr', value] : returned;
        } else if (index !== undefined) {
            var _func2 = this.funcs[index];
            var _returned = _func2(name, params, hash, builder);
            return _returned === false ? ['expr', value] : _returned;
        } else {
            return ['expr', value];
        }
    };

    return Inlines;
}();
export var INLINES = new Inlines();
populateBuiltins(BLOCKS, INLINES);
export function populateBuiltins() {
    var blocks = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Blocks();
    var inlines = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Inlines();

    blocks.add('if', function (params, _hash, template, inverse, builder) {
        //        PutArgs
        //        Test(Environment)
        //        Enter(BEGIN, END)
        // BEGIN: Noop
        //        JumpUnless(ELSE)
        //        Evaluate(default)
        //        Jump(END)
        // ELSE:  Noop
        //        Evalulate(inverse)
        // END:   Noop
        //        Exit
        if (!params || params.length !== 1) {
            throw new Error('SYNTAX ERROR: #if requires a single argument');
        }
        builder.startLabels();
        builder.pushFrame();
        builder.returnTo('END');
        expr(params[0], builder);
        builder.test('environment');
        builder.enter(1);
        builder.jumpUnless('ELSE');
        builder.invokeStatic(template);
        if (inverse) {
            builder.jump('EXIT');
            builder.label('ELSE');
            builder.invokeStatic(inverse);
            builder.label('EXIT');
            builder.exit();
            builder.return();
        } else {
            builder.label('ELSE');
            builder.exit();
            builder.return();
        }
        builder.label('END');
        builder.popFrame();
        builder.stopLabels();
    });
    blocks.add('unless', function (params, _hash, template, inverse, builder) {
        //        PutArgs
        //        Test(Environment)
        //        Enter(BEGIN, END)
        // BEGIN: Noop
        //        JumpUnless(ELSE)
        //        Evaluate(default)
        //        Jump(END)
        // ELSE:  Noop
        //        Evalulate(inverse)
        // END:   Noop
        //        Exit
        if (!params || params.length !== 1) {
            throw new Error('SYNTAX ERROR: #unless requires a single argument');
        }
        builder.startLabels();
        builder.pushFrame();
        builder.returnTo('END');
        expr(params[0], builder);
        builder.test('environment');
        builder.enter(1);
        builder.jumpIf('ELSE');
        builder.invokeStatic(template);
        if (inverse) {
            builder.jump('EXIT');
            builder.label('ELSE');
            builder.invokeStatic(inverse);
            builder.label('EXIT');
            builder.exit();
            builder.return();
        } else {
            builder.label('ELSE');
            builder.exit();
            builder.return();
        }
        builder.label('END');
        builder.popFrame();
        builder.stopLabels();
    });
    blocks.add('with', function (params, _hash, template, inverse, builder) {
        //        PutArgs
        //        Test(Environment)
        //        Enter(BEGIN, END)
        // BEGIN: Noop
        //        JumpUnless(ELSE)
        //        Evaluate(default)
        //        Jump(END)
        // ELSE:  Noop
        //        Evalulate(inverse)
        // END:   Noop
        //        Exit
        if (!params || params.length !== 1) {
            throw new Error('SYNTAX ERROR: #with requires a single argument');
        }
        builder.startLabels();
        builder.pushFrame();
        builder.returnTo('END');
        expr(params[0], builder);
        builder.dup();
        builder.test('environment');
        builder.enter(2);
        builder.jumpUnless('ELSE');
        builder.invokeStatic(template, 1);
        if (inverse) {
            builder.jump('EXIT');
            builder.label('ELSE');
            builder.invokeStatic(inverse);
            builder.label('EXIT');
            builder.exit();
            builder.return();
        } else {
            builder.label('ELSE');
            builder.exit();
            builder.return();
        }
        builder.label('END');
        builder.popFrame();
        builder.stopLabels();
    });
    blocks.add('each', function (params, hash, template, inverse, builder) {
        //         Enter(BEGIN, END)
        // BEGIN:  Noop
        //         PutArgs
        //         PutIterable
        //         JumpUnless(ELSE)
        //         EnterList(BEGIN2, END2)
        // ITER:   Noop
        //         NextIter(BREAK)
        // BEGIN2: Noop
        //         PushChildScope
        //         Evaluate(default)
        //         PopScope
        // END2:   Noop
        //         Exit
        //         Jump(ITER)
        // BREAK:  Noop
        //         ExitList
        //         Jump(END)
        // ELSE:   Noop
        //         Evalulate(inverse)
        // END:    Noop
        //         Exit
        builder.startLabels();
        builder.pushFrame();
        builder.returnTo('END');
        if (hash && hash[0][0] === 'key') {
            expr(hash[1][0], builder);
        } else {
            builder.primitive(null);
        }
        expr(params[0], builder);
        builder.enter(2);
        builder.putIterator();
        builder.jumpUnless('ELSE');
        builder.pushFrame();
        builder.returnTo('ITER');
        builder.dup(Register.fp, 1);
        builder.enterList('BODY');
        builder.label('ITER');
        builder.iterate('BREAK');
        builder.label('BODY');
        builder.invokeStatic(template, 2);
        builder.pop(2);
        builder.exit();
        builder.return();
        builder.label('BREAK');
        builder.exitList();
        builder.popFrame();
        if (inverse) {
            builder.jump('EXIT');
            builder.label('ELSE');
            builder.invokeStatic(inverse);
            builder.label('EXIT');
            builder.exit();
            builder.return();
        } else {
            builder.label('ELSE');
            builder.exit();
            builder.return();
        }
        builder.label('END');
        builder.popFrame();
        builder.stopLabels();
    });
    blocks.add('-in-element', function (params, hash, template, _inverse, builder) {
        if (!params || params.length !== 1) {
            throw new Error('SYNTAX ERROR: #-in-element requires a single argument');
        }
        builder.startLabels();
        builder.pushFrame();
        builder.returnTo('END');
        if (hash && hash[0].length) {
            var keys = hash[0],
                values = hash[1];

            if (keys.length === 1 && keys[0] === 'nextSibling') {
                expr(values[0], builder);
            } else {
                throw new Error('SYNTAX ERROR: #-in-element does not take a `' + keys[0] + '` option');
            }
        } else {
            expr(null, builder);
        }
        expr(params[0], builder);
        builder.dup();
        builder.test('simple');
        builder.enter(3);
        builder.jumpUnless('ELSE');
        builder.pushRemoteElement();
        builder.invokeStatic(template);
        builder.popRemoteElement();
        builder.label('ELSE');
        builder.exit();
        builder.return();
        builder.label('END');
        builder.popFrame();
        builder.stopLabels();
    });
    blocks.add('-with-dynamic-vars', function (_params, hash, template, _inverse, builder) {
        if (hash) {
            var names = hash[0],
                expressions = hash[1];

            compileList(expressions, builder);
            builder.pushDynamicScope();
            builder.bindDynamicScope(names);
            builder.invokeStatic(template);
            builder.popDynamicScope();
        } else {
            builder.invokeStatic(template);
        }
    });
    return { blocks: blocks, inlines: inlines };
}
export function compileStatement(statement, builder) {
    STATEMENTS.compile(statement, builder);
}
export function compileStatements(statements, meta, env) {
    var b = new OpcodeBuilder(env, meta);
    for (var i = 0; i < statements.length; i++) {
        compileStatement(statements[i], b);
    }
    return b;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,