function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

import { clear } from '../bounds';
import UpdatingVM from './update';

var RenderResult = function () {
    function RenderResult(env, updating, bounds) {
        _classCallCheck(this, RenderResult);

        this.env = env;
        this.updating = updating;
        this.bounds = bounds;
    }

    RenderResult.prototype.rerender = function rerender() {
        var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : { alwaysRevalidate: false },
            _ref$alwaysRevalidate = _ref.alwaysRevalidate,
            alwaysRevalidate = _ref$alwaysRevalidate === undefined ? false : _ref$alwaysRevalidate;

        var env = this.env,
            updating = this.updating;

        var vm = new UpdatingVM(env, { alwaysRevalidate: alwaysRevalidate });
        vm.execute(updating, this);
    };

    RenderResult.prototype.parentElement = function parentElement() {
        return this.bounds.parentElement();
    };

    RenderResult.prototype.firstNode = function firstNode() {
        return this.bounds.firstNode();
    };

    RenderResult.prototype.lastNode = function lastNode() {
        return this.bounds.lastNode();
    };

    RenderResult.prototype.opcodes = function opcodes() {
        return this.updating;
    };

    RenderResult.prototype.handleException = function handleException() {
        throw "this should never happen";
    };

    RenderResult.prototype.destroy = function destroy() {
        this.bounds.destroy();
        clear(this.bounds);
    };

    return RenderResult;
}();

export default RenderResult;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi92bS9yZW5kZXItcmVzdWx0LmpzIl0sIm5hbWVzIjpbImNsZWFyIiwiVXBkYXRpbmdWTSIsIlJlbmRlclJlc3VsdCIsImVudiIsInVwZGF0aW5nIiwiYm91bmRzIiwicmVyZW5kZXIiLCJhbHdheXNSZXZhbGlkYXRlIiwidm0iLCJleGVjdXRlIiwicGFyZW50RWxlbWVudCIsImZpcnN0Tm9kZSIsImxhc3ROb2RlIiwib3Bjb2RlcyIsImhhbmRsZUV4Y2VwdGlvbiIsImRlc3Ryb3kiXSwibWFwcGluZ3MiOiI7O0FBQUEsU0FBU0EsS0FBVCxRQUFzQixXQUF0QjtBQUNBLE9BQU9DLFVBQVAsTUFBdUIsVUFBdkI7O0lBQ3FCQyxZO0FBQ2pCLDBCQUFZQyxHQUFaLEVBQWlCQyxRQUFqQixFQUEyQkMsTUFBM0IsRUFBbUM7QUFBQTs7QUFDL0IsYUFBS0YsR0FBTCxHQUFXQSxHQUFYO0FBQ0EsYUFBS0MsUUFBTCxHQUFnQkEsUUFBaEI7QUFDQSxhQUFLQyxNQUFMLEdBQWNBLE1BQWQ7QUFDSDs7MkJBQ0RDLFEsdUJBQXFFO0FBQUEsdUZBQTdCLEVBQUVDLGtCQUFrQixLQUFwQixFQUE2QjtBQUFBLHlDQUExREEsZ0JBQTBEO0FBQUEsWUFBMURBLGdCQUEwRCx5Q0FBdkMsS0FBdUM7O0FBQUEsWUFDM0RKLEdBRDJELEdBQ3pDLElBRHlDLENBQzNEQSxHQUQyRDtBQUFBLFlBQ3REQyxRQURzRCxHQUN6QyxJQUR5QyxDQUN0REEsUUFEc0Q7O0FBRWpFLFlBQUlJLEtBQUssSUFBSVAsVUFBSixDQUFlRSxHQUFmLEVBQW9CLEVBQUVJLGtDQUFGLEVBQXBCLENBQVQ7QUFDQUMsV0FBR0MsT0FBSCxDQUFXTCxRQUFYLEVBQXFCLElBQXJCO0FBQ0gsSzs7MkJBQ0RNLGEsNEJBQWdCO0FBQ1osZUFBTyxLQUFLTCxNQUFMLENBQVlLLGFBQVosRUFBUDtBQUNILEs7OzJCQUNEQyxTLHdCQUFZO0FBQ1IsZUFBTyxLQUFLTixNQUFMLENBQVlNLFNBQVosRUFBUDtBQUNILEs7OzJCQUNEQyxRLHVCQUFXO0FBQ1AsZUFBTyxLQUFLUCxNQUFMLENBQVlPLFFBQVosRUFBUDtBQUNILEs7OzJCQUNEQyxPLHNCQUFVO0FBQ04sZUFBTyxLQUFLVCxRQUFaO0FBQ0gsSzs7MkJBQ0RVLGUsOEJBQWtCO0FBQ2QsY0FBTSwwQkFBTjtBQUNILEs7OzJCQUNEQyxPLHNCQUFVO0FBQ04sYUFBS1YsTUFBTCxDQUFZVSxPQUFaO0FBQ0FmLGNBQU0sS0FBS0ssTUFBWDtBQUNILEs7Ozs7O2VBN0JnQkgsWSIsImZpbGUiOiJsaWIvdm0vcmVuZGVyLXJlc3VsdC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNsZWFyIH0gZnJvbSAnLi4vYm91bmRzJztcbmltcG9ydCBVcGRhdGluZ1ZNIGZyb20gJy4vdXBkYXRlJztcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFJlbmRlclJlc3VsdCB7XG4gICAgY29uc3RydWN0b3IoZW52LCB1cGRhdGluZywgYm91bmRzKSB7XG4gICAgICAgIHRoaXMuZW52ID0gZW52O1xuICAgICAgICB0aGlzLnVwZGF0aW5nID0gdXBkYXRpbmc7XG4gICAgICAgIHRoaXMuYm91bmRzID0gYm91bmRzO1xuICAgIH1cbiAgICByZXJlbmRlcih7IGFsd2F5c1JldmFsaWRhdGUgPSBmYWxzZSB9ID0geyBhbHdheXNSZXZhbGlkYXRlOiBmYWxzZSB9KSB7XG4gICAgICAgIGxldCB7IGVudiwgdXBkYXRpbmcgfSA9IHRoaXM7XG4gICAgICAgIGxldCB2bSA9IG5ldyBVcGRhdGluZ1ZNKGVudiwgeyBhbHdheXNSZXZhbGlkYXRlIH0pO1xuICAgICAgICB2bS5leGVjdXRlKHVwZGF0aW5nLCB0aGlzKTtcbiAgICB9XG4gICAgcGFyZW50RWxlbWVudCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYm91bmRzLnBhcmVudEVsZW1lbnQoKTtcbiAgICB9XG4gICAgZmlyc3ROb2RlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5ib3VuZHMuZmlyc3ROb2RlKCk7XG4gICAgfVxuICAgIGxhc3ROb2RlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5ib3VuZHMubGFzdE5vZGUoKTtcbiAgICB9XG4gICAgb3Bjb2RlcygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudXBkYXRpbmc7XG4gICAgfVxuICAgIGhhbmRsZUV4Y2VwdGlvbigpIHtcbiAgICAgICAgdGhyb3cgXCJ0aGlzIHNob3VsZCBuZXZlciBoYXBwZW5cIjtcbiAgICB9XG4gICAgZGVzdHJveSgpIHtcbiAgICAgICAgdGhpcy5ib3VuZHMuZGVzdHJveSgpO1xuICAgICAgICBjbGVhcih0aGlzLmJvdW5kcyk7XG4gICAgfVxufSJdfQ==