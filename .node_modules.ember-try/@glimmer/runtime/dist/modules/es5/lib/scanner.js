function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

import { EMPTY_ARRAY } from '@glimmer/util';
import * as WireFormat from '@glimmer/wire-format';
import * as ClientSide from './syntax/client-side';
import CompilableTemplate from './syntax/compilable-template';
import { ATTRS_BLOCK } from './syntax/functions';
var Ops = WireFormat.Ops;

var Scanner = function () {
    function Scanner(block, env) {
        _classCallCheck(this, Scanner);

        this.block = block;
        this.env = env;
    }

    Scanner.prototype.scanEntryPoint = function scanEntryPoint(meta) {
        var block = this.block;
        var statements = block.statements,
            symbols = block.symbols,
            hasEval = block.hasEval;

        return new CompilableTemplate(statements, { meta: meta, symbols: symbols, hasEval: hasEval });
    };

    Scanner.prototype.scanBlock = function scanBlock(meta) {
        var block = this.block;
        var statements = block.statements;

        return new CompilableTemplate(statements, { meta: meta, parameters: EMPTY_ARRAY });
    };

    Scanner.prototype.scanLayout = function scanLayout(meta, attrs, componentName) {
        var block = this.block;
        var statements = block.statements,
            symbols = block.symbols,
            hasEval = block.hasEval;

        var symbolTable = { meta: meta, hasEval: hasEval, symbols: symbols };
        var newStatements = [];
        var toplevel = void 0;
        var inTopLevel = false;
        for (var i = 0; i < statements.length; i++) {
            var statement = statements[i];
            if (WireFormat.Statements.isComponent(statement)) {
                var tagName = statement[1];
                if (!this.env.hasComponentDefinition(tagName, meta.templateMeta)) {
                    if (toplevel !== undefined) {
                        newStatements.push([Ops.OpenElement, tagName]);
                    } else {
                        toplevel = tagName;
                        decorateTopLevelElement(tagName, symbols, attrs, newStatements);
                    }
                    addFallback(statement, newStatements);
                } else {
                    if (toplevel === undefined && tagName === componentName) {
                        toplevel = tagName;
                        decorateTopLevelElement(tagName, symbols, attrs, newStatements);
                        addFallback(statement, newStatements);
                    } else {
                        newStatements.push(statement);
                    }
                }
            } else {
                if (toplevel === undefined && WireFormat.Statements.isOpenElement(statement)) {
                    toplevel = statement[1];
                    inTopLevel = true;
                    decorateTopLevelElement(toplevel, symbols, attrs, newStatements);
                } else {
                    if (inTopLevel) {
                        if (WireFormat.Statements.isFlushElement(statement)) {
                            inTopLevel = false;
                        } else if (WireFormat.Statements.isModifier(statement)) {
                            throw Error('Found modifier "' + statement[1] + '" on the top-level element of "' + componentName + '". Modifiers cannot be on the top-level element');
                        }
                    }
                    newStatements.push(statement);
                }
            }
        }
        newStatements.push([Ops.ClientSideStatement, ClientSide.Ops.DidRenderLayout]);
        return new CompilableTemplate(newStatements, symbolTable);
    };

    return Scanner;
}();

export default Scanner;

function addFallback(statement, buffer) {
    var attrs = statement[2],
        block = statement[4];

    for (var i = 0; i < attrs.length; i++) {
        buffer.push(attrs[i]);
    }
    buffer.push([Ops.FlushElement]);
    if (block) {
        var statements = block.statements;

        for (var _i = 0; _i < statements.length; _i++) {
            buffer.push(statements[_i]);
        }
    }
    buffer.push([Ops.CloseElement]);
}
function decorateTopLevelElement(tagName, symbols, attrs, buffer) {
    var attrsSymbol = symbols.push(ATTRS_BLOCK);
    buffer.push([Ops.ClientSideStatement, ClientSide.Ops.OpenComponentElement, tagName]);
    buffer.push([Ops.ClientSideStatement, ClientSide.Ops.DidCreateElement]);
    buffer.push([Ops.Yield, attrsSymbol, EMPTY_ARRAY]);
    buffer.push.apply(buffer, attrs);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,