function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

import { initializeGuid, fillNulls, unreachable, typePos } from '@glimmer/util';

/**
 * Registers
 *
 * For the most part, these follows MIPS naming conventions, however the
 * register numbers are different.
 */
export var Register;
(function (Register) {
    // $0 or $pc (program counter): pointer into `program` for the next insturction; -1 means exit
    Register[Register["pc"] = 0] = "pc";
    // $1 or $ra (return address): pointer into `program` for the return
    Register[Register["ra"] = 1] = "ra";
    // $2 or $fp (frame pointer): pointer into the `evalStack` for the base of the stack
    Register[Register["fp"] = 2] = "fp";
    // $3 or $sp (stack pointer): pointer into the `evalStack` for the top of the stack
    Register[Register["sp"] = 3] = "sp";
    // $4-$5 or $s0-$s1 (saved): callee saved general-purpose registers
    Register[Register["s0"] = 4] = "s0";
    Register[Register["s1"] = 5] = "s1";
    // $6-$7 or $t0-$t1 (temporaries): caller saved general-purpose registers
    Register[Register["t0"] = 6] = "t0";
    Register[Register["t1"] = 7] = "t1";
})(Register || (Register = {}));
export function debugSlice(env, start, end) {
    if (!false && false) {
        /* tslint:disable:no-console */
        var program = env.program;
        var constants = program.constants;
        // console is not available in IE9

        if (typeof console === 'undefined') {
            return;
        }
        // IE10 does not have `console.group`
        if (typeof console.group !== 'function') {
            return;
        }
        console.group("%c" + start + ":" + end, 'color: #999');
        for (var i = start; i < end; i = i + 4) {
            var _program$opcode = program.opcode(i),
                type = _program$opcode.type,
                op1 = _program$opcode.op1,
                op2 = _program$opcode.op2,
                op3 = _program$opcode.op3;

            var _debug = debug(constants, type, op1, op2, op3),
                name = _debug[0],
                params = _debug[1];

            console.log(i + ". " + logOpcode(name, params));
        }
        console.groupEnd();
        /* tslint:enable:no-console */
    }
}
function logOpcode(type, params) {
    if (!false && false) {
        var out = type;
        if (params) {
            var args = Object.keys(params).map(function (p) {
                return " " + p + "=" + json(params[p]);
            }).join('');
            out += args;
        }
        return "(" + out + ")";
    }
}
function json(param) {
    if (typeof param === 'function') {
        return '<function>';
    }
    var string = void 0;
    try {
        string = JSON.stringify(param);
    } catch (e) {
        return '<cannot generate JSON>';
    }
    if (string === undefined) {
        return 'undefined';
    }
    var debug = JSON.parse(string);
    if (typeof debug === 'object' && debug !== null && debug.GlimmerDebug !== undefined) {
        return debug.GlimmerDebug;
    }
    return string;
}
function debug(c, op, op1, op2, op3) {
    if (!false && false) {
        switch (op) {
            case 0 /* Bug */:
                throw unreachable();
            case 1 /* Helper */:
                return ['Helper', { helper: c.getFunction(op1) }];
            case 2 /* Function */:
                return ['Function', { function: c.getFunction(op1) }];
            case 4 /* SetVariable */:
                return ['SetVariable', { symbol: op1 }];
            case 5 /* GetVariable */:
                return ['GetVariable', { symbol: op1 }];
            case 6 /* GetProperty */:
                return ['GetProperty', { key: c.getString(op1) }];
            case 7 /* PushBlock */:
                return ['PushBlock', { block: c.getBlock(op1) }];
            case 8 /* GetBlock */:
                return ['GetBlock', { symbol: op1 }];
            case 9 /* HasBlock */:
                return ['HasBlock', { block: op1 }];
            case 10 /* HasBlockParams */:
                return ['HasBlockParams', { block: op1 }];
            case 11 /* Concat */:
                return ['Concat', { size: op1 }];
            case 12 /* Immediate */:
                return ['Immediate', { value: op1 }];
            case 13 /* Constant */:
                return ['Constant', { value: c.getOther(op1) }];
            case 14 /* PrimitiveReference */:
                return ['PrimitiveReference', { primitive: op1 }];
            case 15 /* Dup */:
                return ['Dup', { register: Register[op1], offset: op2 }];
            case 16 /* Pop */:
                return ['Pop', { count: op1 }];
            case 17 /* Load */:
                return ['Load', { register: Register[op1] }];
            case 18 /* Fetch */:
                return ['Fetch', { register: Register[op1] }];
            /// PRELUDE & EXIT
            case 19 /* RootScope */:
                return ['RootScope', { symbols: op1, bindCallerScope: !!op2 }];
            case 20 /* ChildScope */:
                return ['ChildScope', {}];
            case 21 /* PopScope */:
                return ['PopScope', {}];
            case 22 /* Return */:
                return ['Return', {}];
            case 23 /* ReturnTo */:
                return ['ReturnTo', { offset: op1 }];
            /// HTML
            case 24 /* Text */:
                return ['Text', { text: c.getString(op1) }];
            case 25 /* Comment */:
                return ['Comment', { comment: c.getString(op1) }];
            case 26 /* DynamicContent */:
                return ['DynamicContent', { value: c.getOther(op1) }];
            case 27 /* OpenElement */:
                return ['OpenElement', { tag: c.getString(op1) }];
            case 28 /* OpenElementWithOperations */:
                return ['OpenElementWithOperations', { tag: c.getString(op1) }];
            case 29 /* OpenDynamicElement */:
                return ['OpenDynamicElement', {}];
            case 30 /* StaticAttr */:
                return ['StaticAttr', { name: c.getString(op1), value: c.getString(op2), namespace: op3 ? c.getString(op3) : null }];
            case 31 /* DynamicAttr */:
                return ['DynamicAttr', { name: c.getString(op1), trusting: !!op2 }];
            case 32 /* DynamicAttrNS */:
                return ['DynamicAttrNS', { name: c.getString(op1), ns: c.getString(op2), trusting: !!op2 }];
            case 33 /* FlushElement */:
                return ['FlushElement', {}];
            case 34 /* CloseElement */:
                return ['CloseElement', {}];
            /// MODIFIER
            case 35 /* Modifier */:
                return ['Modifier', {}];
            /// WORMHOLE
            case 36 /* PushRemoteElement */:
                return ['PushRemoteElement', {}];
            case 37 /* PopRemoteElement */:
                return ['PopRemoteElement', {}];
            /// DYNAMIC SCOPE
            case 38 /* BindDynamicScope */:
                return ['BindDynamicScope', {}];
            case 39 /* PushDynamicScope */:
                return ['PushDynamicScope', {}];
            case 40 /* PopDynamicScope */:
                return ['PopDynamicScope', {}];
            /// VM
            case 41 /* CompileDynamicBlock */:
                return ['CompileDynamicBlock', {}];
            case 42 /* InvokeStatic */:
                return ['InvokeStatic', { block: c.getBlock(op1) }];
            case 43 /* InvokeDynamic */:
                return ['InvokeDynamic', { invoker: c.getOther(op1) }];
            case 44 /* Jump */:
                return ['Jump', { to: op1 }];
            case 45 /* JumpIf */:
                return ['JumpIf', { to: op1 }];
            case 46 /* JumpUnless */:
                return ['JumpUnless', { to: op1 }];
            case 47 /* PushFrame */:
                return ['PushFrame', {}];
            case 48 /* PopFrame */:
                return ['PopFrame', {}];
            case 49 /* Enter */:
                return ['Enter', { args: op1 }];
            case 50 /* Exit */:
                return ['Exit', {}];
            case 51 /* Test */:
                return ['ToBoolean', {}];
            /// LISTS
            case 52 /* EnterList */:
                return ['EnterList', { start: op1 }];
            case 53 /* ExitList */:
                return ['ExitList', {}];
            case 54 /* PutIterator */:
                return ['PutIterator', {}];
            case 55 /* Iterate */:
                return ['Iterate', { end: op1 }];
            /// COMPONENTS
            case 56 /* PushComponentManager */:
                return ['PushComponentManager', { definition: c.getOther(op1) }];
            case 57 /* PushDynamicComponentManager */:
                return ['PushDynamicComponentManager', {}];
            case 58 /* PushArgs */:
                return ['PushArgs', { synthetic: !!op2 }];
            case 59 /* PrepareArgs */:
                return ['PrepareArgs', { state: Register[op1] }];
            case 60 /* CreateComponent */:
                return ['CreateComponent', { flags: op1, state: Register[op2] }];
            case 61 /* RegisterComponentDestructor */:
                return ['RegisterComponentDestructor', {}];
            case 62 /* PushComponentOperations */:
                return ['PushComponentOperations', {}];
            case 63 /* GetComponentSelf */:
                return ['GetComponentSelf', { state: Register[op1] }];
            case 64 /* GetComponentLayout */:
                return ['GetComponentLayout', { state: Register[op1] }];
            case 65 /* BeginComponentTransaction */:
                return ['BeginComponentTransaction', {}];
            case 66 /* CommitComponentTransaction */:
                return ['CommitComponentTransaction', {}];
            case 67 /* DidCreateElement */:
                return ['DidCreateElement', { state: Register[op1] }];
            case 68 /* DidRenderLayout */:
                return ['DidRenderLayout', {}];
            /// PARTIALS
            case 69 /* GetPartialTemplate */:
                return ['CompilePartial', {}];
            case 70 /* ResolveMaybeLocal */:
                return ['ResolveMaybeLocal', { name: c.getString(op1) }];
            /// DEBUGGER
            case 71 /* Debugger */:
                return ['Debugger', { symbols: c.getOther(op1), evalInfo: c.getArray(op2) }];
            /// STATEMENTS
            case 72 /* Size */:
                throw unreachable();
        }
        throw unreachable();
    }
    return ['', {}];
}
export var AppendOpcodes = function () {
    function AppendOpcodes() {
        _classCallCheck(this, AppendOpcodes);

        this.evaluateOpcode = fillNulls(72 /* Size */).slice();
    }

    AppendOpcodes.prototype.add = function add(name, evaluate) {
        this.evaluateOpcode[name] = evaluate;
    };

    AppendOpcodes.prototype.evaluate = function evaluate(vm, opcode, type) {
        var func = this.evaluateOpcode[type];
        if (!false && false) {
            /* tslint:disable */
            var _debug2 = debug(vm.constants, opcode.type, opcode.op1, opcode.op2, opcode.op3),
                name = _debug2[0],
                params = _debug2[1];

            console.log(typePos(vm['pc']) + ". " + logOpcode(name, params));
            // console.log(...debug(vm.constants, type, opcode.op1, opcode.op2, opcode.op3));
            /* tslint:enable */
        }
        func(vm, opcode);
        if (!false && false) {
            /* tslint:disable */
            console.log('%c -> pc: %d, ra: %d, fp: %d, sp: %d, s0: %O, s1: %O, t0: %O, t1: %O', 'color: orange', vm['pc'], vm['ra'], vm['fp'], vm['sp'], vm['s0'], vm['s1'], vm['t0'], vm['t1']);
            console.log('%c -> eval stack', 'color: red', vm.stack.toArray());
            console.log('%c -> scope', 'color: green', vm.scope()['slots'].map(function (s) {
                return s && s['value'] ? s['value']() : s;
            }));
            console.log('%c -> elements', 'color: blue', vm.elements()['elementStack'].toArray());
            /* tslint:enable */
        }
    };

    return AppendOpcodes;
}();
export var APPEND_OPCODES = new AppendOpcodes();
export var AbstractOpcode = function () {
    function AbstractOpcode() {
        _classCallCheck(this, AbstractOpcode);

        initializeGuid(this);
    }

    AbstractOpcode.prototype.toJSON = function toJSON() {
        return { guid: this._guid, type: this.type };
    };

    return AbstractOpcode;
}();
export var UpdatingOpcode = function (_AbstractOpcode) {
    _inherits(UpdatingOpcode, _AbstractOpcode);

    function UpdatingOpcode() {
        _classCallCheck(this, UpdatingOpcode);

        var _this = _possibleConstructorReturn(this, _AbstractOpcode.apply(this, arguments));

        _this.next = null;
        _this.prev = null;
        return _this;
    }

    return UpdatingOpcode;
}(AbstractOpcode);
export function inspect(opcodes) {
    var buffer = [];
    opcodes.forEach(function (opcode, i) {
        _inspect(opcode.toJSON(), buffer, 0, i);
    });
    return buffer.join('');
}
function _inspect(opcode, buffer, level, index) {
    var indentation = [];
    for (var i = 0; i < level; i++) {
        indentation.push('  ');
    }
    buffer.push.apply(buffer, indentation);
    buffer.push(index + ". " + opcode.type);
    if (opcode.args || opcode.details) {
        buffer.push('(');
        if (opcode.args) {
            buffer.push(opcode.args.join(', '));
        }
        if (opcode.details) {
            var keys = Object.keys(opcode.details);
            if (keys.length) {
                if (opcode.args && opcode.args.length) {
                    buffer.push(', ');
                }
                buffer.push(keys.map(function (key) {
                    return key + "=" + (opcode.details && opcode.details[key]);
                }).join(', '));
            }
        }
        buffer.push(')');
    }
    buffer.push('\n');
    if (opcode.children && opcode.children.length) {
        for (var _i = 0; _i < opcode.children.length; _i++) {
            _inspect(opcode.children[_i], buffer, level + 1, _i);
        }
    }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,