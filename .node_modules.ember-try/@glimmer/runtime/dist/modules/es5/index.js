import './lib/bootstrap';
export { default as templateFactory } from './lib/template';
export { NULL_REFERENCE, UNDEFINED_REFERENCE, PrimitiveReference, ConditionalReference } from './lib/references';
export { default as OpcodeBuilderDSL } from './lib/compiled/opcodes/builder';
export { compileLayout } from './lib/compiler';
export { CompiledStaticTemplate, CompiledDynamicTemplate } from './lib/compiled/blocks';
export { AttributeManager as IAttributeManager, AttributeManager, PropertyManager, INPUT_VALUE_PROPERTY_MANAGER, defaultManagers, defaultAttributeManagers, defaultPropertyManagers, readDOMAttr } from './lib/dom/attribute-managers';
export { Register, debugSlice } from './lib/opcodes';
export { normalizeTextValue } from './lib/compiled/opcodes/content';
export { setDebuggerCallback, resetDebuggerCallback } from './lib/compiled/opcodes/debugger';
export { default as getDynamicVar } from './lib/helpers/get-dynamic-var';
export { Blocks as BlockMacros, Inlines as InlineMacros, compileList, expr as compileExpression } from './lib/syntax/functions';
export { UpdatingVM, RenderResult } from './lib/vm';
export { isSafeString } from './lib/upsert';
export { Scope, default as Environment } from './lib/environment';
export { PartialDefinition } from './lib/partial';
export { ComponentDefinition, isComponentDefinition } from './lib/component/interfaces';
export { default as DOMChanges, DOMChanges as IDOMChanges, DOMTreeConstruction, isWhitespace, insertHTMLBefore } from './lib/dom/helper';
import * as Simple from './lib/dom/interfaces';
export { Simple };
export { ElementStack } from './lib/builder';
export { ConcreteBounds } from './lib/bounds';
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sIm5hbWVzIjpbImRlZmF1bHQiLCJ0ZW1wbGF0ZUZhY3RvcnkiLCJOVUxMX1JFRkVSRU5DRSIsIlVOREVGSU5FRF9SRUZFUkVOQ0UiLCJQcmltaXRpdmVSZWZlcmVuY2UiLCJDb25kaXRpb25hbFJlZmVyZW5jZSIsIk9wY29kZUJ1aWxkZXJEU0wiLCJjb21waWxlTGF5b3V0IiwiQ29tcGlsZWRTdGF0aWNUZW1wbGF0ZSIsIkNvbXBpbGVkRHluYW1pY1RlbXBsYXRlIiwiQXR0cmlidXRlTWFuYWdlciIsIklBdHRyaWJ1dGVNYW5hZ2VyIiwiUHJvcGVydHlNYW5hZ2VyIiwiSU5QVVRfVkFMVUVfUFJPUEVSVFlfTUFOQUdFUiIsImRlZmF1bHRNYW5hZ2VycyIsImRlZmF1bHRBdHRyaWJ1dGVNYW5hZ2VycyIsImRlZmF1bHRQcm9wZXJ0eU1hbmFnZXJzIiwicmVhZERPTUF0dHIiLCJSZWdpc3RlciIsImRlYnVnU2xpY2UiLCJub3JtYWxpemVUZXh0VmFsdWUiLCJzZXREZWJ1Z2dlckNhbGxiYWNrIiwicmVzZXREZWJ1Z2dlckNhbGxiYWNrIiwiZ2V0RHluYW1pY1ZhciIsIkJsb2NrcyIsIkJsb2NrTWFjcm9zIiwiSW5saW5lcyIsIklubGluZU1hY3JvcyIsImNvbXBpbGVMaXN0IiwiZXhwciIsImNvbXBpbGVFeHByZXNzaW9uIiwiVXBkYXRpbmdWTSIsIlJlbmRlclJlc3VsdCIsImlzU2FmZVN0cmluZyIsIlNjb3BlIiwiRW52aXJvbm1lbnQiLCJQYXJ0aWFsRGVmaW5pdGlvbiIsIkNvbXBvbmVudERlZmluaXRpb24iLCJpc0NvbXBvbmVudERlZmluaXRpb24iLCJET01DaGFuZ2VzIiwiSURPTUNoYW5nZXMiLCJET01UcmVlQ29uc3RydWN0aW9uIiwiaXNXaGl0ZXNwYWNlIiwiaW5zZXJ0SFRNTEJlZm9yZSIsIlNpbXBsZSIsIkVsZW1lbnRTdGFjayIsIkNvbmNyZXRlQm91bmRzIl0sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLGlCQUFQO0FBQ0EsU0FBU0EsV0FBV0MsZUFBcEIsUUFBMkMsZ0JBQTNDO0FBQ0EsU0FBU0MsY0FBVCxFQUF5QkMsbUJBQXpCLEVBQThDQyxrQkFBOUMsRUFBa0VDLG9CQUFsRSxRQUE4RixrQkFBOUY7QUFDQSxTQUFTTCxXQUFXTSxnQkFBcEIsUUFBNEMsZ0NBQTVDO0FBQ0EsU0FBU0MsYUFBVCxRQUE4QixnQkFBOUI7QUFDQSxTQUFTQyxzQkFBVCxFQUFpQ0MsdUJBQWpDLFFBQWdFLHVCQUFoRTtBQUNBLFNBQVNDLG9CQUFvQkMsaUJBQTdCLEVBQWdERCxnQkFBaEQsRUFBa0VFLGVBQWxFLEVBQW1GQyw0QkFBbkYsRUFBaUhDLGVBQWpILEVBQWtJQyx3QkFBbEksRUFBNEpDLHVCQUE1SixFQUFxTEMsV0FBckwsUUFBd00sOEJBQXhNO0FBQ0EsU0FBU0MsUUFBVCxFQUFtQkMsVUFBbkIsUUFBcUMsZUFBckM7QUFDQSxTQUFTQyxrQkFBVCxRQUFtQyxnQ0FBbkM7QUFDQSxTQUFTQyxtQkFBVCxFQUE4QkMscUJBQTlCLFFBQTJELGlDQUEzRDtBQUNBLFNBQVN0QixXQUFXdUIsYUFBcEIsUUFBeUMsK0JBQXpDO0FBQ0EsU0FBU0MsVUFBVUMsV0FBbkIsRUFBZ0NDLFdBQVdDLFlBQTNDLEVBQXlEQyxXQUF6RCxFQUFzRUMsUUFBUUMsaUJBQTlFLFFBQXVHLHdCQUF2RztBQUNBLFNBQVNDLFVBQVQsRUFBcUJDLFlBQXJCLFFBQXlDLFVBQXpDO0FBQ0EsU0FBU0MsWUFBVCxRQUE2QixjQUE3QjtBQUNBLFNBQVNDLEtBQVQsRUFBZ0JsQyxXQUFXbUMsV0FBM0IsUUFBOEMsbUJBQTlDO0FBQ0EsU0FBU0MsaUJBQVQsUUFBa0MsZUFBbEM7QUFDQSxTQUFTQyxtQkFBVCxFQUE4QkMscUJBQTlCLFFBQTJELDRCQUEzRDtBQUNBLFNBQVN0QyxXQUFXdUMsVUFBcEIsRUFBZ0NBLGNBQWNDLFdBQTlDLEVBQTJEQyxtQkFBM0QsRUFBZ0ZDLFlBQWhGLEVBQThGQyxnQkFBOUYsUUFBc0gsa0JBQXRIO0FBQ0EsT0FBTyxLQUFLQyxNQUFaLE1BQXdCLHNCQUF4QjtBQUNBLFNBQVNBLE1BQVQ7QUFDQSxTQUFTQyxZQUFULFFBQTZCLGVBQTdCO0FBQ0EsU0FBU0MsY0FBVCxRQUErQixjQUEvQiIsImZpbGUiOiJpbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAnLi9saWIvYm9vdHN0cmFwJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgdGVtcGxhdGVGYWN0b3J5IH0gZnJvbSAnLi9saWIvdGVtcGxhdGUnO1xuZXhwb3J0IHsgTlVMTF9SRUZFUkVOQ0UsIFVOREVGSU5FRF9SRUZFUkVOQ0UsIFByaW1pdGl2ZVJlZmVyZW5jZSwgQ29uZGl0aW9uYWxSZWZlcmVuY2UgfSBmcm9tICcuL2xpYi9yZWZlcmVuY2VzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgT3Bjb2RlQnVpbGRlckRTTCB9IGZyb20gJy4vbGliL2NvbXBpbGVkL29wY29kZXMvYnVpbGRlcic7XG5leHBvcnQgeyBjb21waWxlTGF5b3V0IH0gZnJvbSAnLi9saWIvY29tcGlsZXInO1xuZXhwb3J0IHsgQ29tcGlsZWRTdGF0aWNUZW1wbGF0ZSwgQ29tcGlsZWREeW5hbWljVGVtcGxhdGUgfSBmcm9tICcuL2xpYi9jb21waWxlZC9ibG9ja3MnO1xuZXhwb3J0IHsgQXR0cmlidXRlTWFuYWdlciBhcyBJQXR0cmlidXRlTWFuYWdlciwgQXR0cmlidXRlTWFuYWdlciwgUHJvcGVydHlNYW5hZ2VyLCBJTlBVVF9WQUxVRV9QUk9QRVJUWV9NQU5BR0VSLCBkZWZhdWx0TWFuYWdlcnMsIGRlZmF1bHRBdHRyaWJ1dGVNYW5hZ2VycywgZGVmYXVsdFByb3BlcnR5TWFuYWdlcnMsIHJlYWRET01BdHRyIH0gZnJvbSAnLi9saWIvZG9tL2F0dHJpYnV0ZS1tYW5hZ2Vycyc7XG5leHBvcnQgeyBSZWdpc3RlciwgZGVidWdTbGljZSB9IGZyb20gJy4vbGliL29wY29kZXMnO1xuZXhwb3J0IHsgbm9ybWFsaXplVGV4dFZhbHVlIH0gZnJvbSAnLi9saWIvY29tcGlsZWQvb3Bjb2Rlcy9jb250ZW50JztcbmV4cG9ydCB7IHNldERlYnVnZ2VyQ2FsbGJhY2ssIHJlc2V0RGVidWdnZXJDYWxsYmFjayB9IGZyb20gJy4vbGliL2NvbXBpbGVkL29wY29kZXMvZGVidWdnZXInO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBnZXREeW5hbWljVmFyIH0gZnJvbSAnLi9saWIvaGVscGVycy9nZXQtZHluYW1pYy12YXInO1xuZXhwb3J0IHsgQmxvY2tzIGFzIEJsb2NrTWFjcm9zLCBJbmxpbmVzIGFzIElubGluZU1hY3JvcywgY29tcGlsZUxpc3QsIGV4cHIgYXMgY29tcGlsZUV4cHJlc3Npb24gfSBmcm9tICcuL2xpYi9zeW50YXgvZnVuY3Rpb25zJztcbmV4cG9ydCB7IFVwZGF0aW5nVk0sIFJlbmRlclJlc3VsdCB9IGZyb20gJy4vbGliL3ZtJztcbmV4cG9ydCB7IGlzU2FmZVN0cmluZyB9IGZyb20gJy4vbGliL3Vwc2VydCc7XG5leHBvcnQgeyBTY29wZSwgZGVmYXVsdCBhcyBFbnZpcm9ubWVudCB9IGZyb20gJy4vbGliL2Vudmlyb25tZW50JztcbmV4cG9ydCB7IFBhcnRpYWxEZWZpbml0aW9uIH0gZnJvbSAnLi9saWIvcGFydGlhbCc7XG5leHBvcnQgeyBDb21wb25lbnREZWZpbml0aW9uLCBpc0NvbXBvbmVudERlZmluaXRpb24gfSBmcm9tICcuL2xpYi9jb21wb25lbnQvaW50ZXJmYWNlcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIERPTUNoYW5nZXMsIERPTUNoYW5nZXMgYXMgSURPTUNoYW5nZXMsIERPTVRyZWVDb25zdHJ1Y3Rpb24sIGlzV2hpdGVzcGFjZSwgaW5zZXJ0SFRNTEJlZm9yZSB9IGZyb20gJy4vbGliL2RvbS9oZWxwZXInO1xuaW1wb3J0ICogYXMgU2ltcGxlIGZyb20gJy4vbGliL2RvbS9pbnRlcmZhY2VzJztcbmV4cG9ydCB7IFNpbXBsZSB9O1xuZXhwb3J0IHsgRWxlbWVudFN0YWNrIH0gZnJvbSAnLi9saWIvYnVpbGRlcic7XG5leHBvcnQgeyBDb25jcmV0ZUJvdW5kcyB9IGZyb20gJy4vbGliL2JvdW5kcyc7Il19