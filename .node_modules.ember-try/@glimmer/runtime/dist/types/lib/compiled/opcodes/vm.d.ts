import { Opaque, Option, SymbolTable } from '@glimmer/interfaces';
import { ReferenceCache, Reference, Tag } from '@glimmer/reference';
import Environment from '../../environment';
import { OpcodeJSON, UpdatingOpcode } from '../../opcodes';
import { UpdatingVM, VM } from '../../vm';
import { CompiledDynamicTemplate } from '../blocks';
export interface DynamicInvoker<S extends SymbolTable> {
    invoke(vm: VM, block: Option<CompiledDynamicTemplate<S>>): void;
}
export declare type TestFunction = (ref: Reference<Opaque>, env: Environment) => Reference<boolean>;
export declare const ConstTest: TestFunction;
export declare const SimpleTest: TestFunction;
export declare const EnvironmentTest: TestFunction;
export declare class Assert extends UpdatingOpcode {
    type: string;
    private cache;
    constructor(cache: ReferenceCache<Opaque>);
    evaluate(vm: UpdatingVM): void;
    toJSON(): OpcodeJSON;
}
export declare class JumpIfNotModifiedOpcode extends UpdatingOpcode {
    private target;
    type: string;
    private lastRevision;
    constructor(tag: Tag, target: LabelOpcode);
    evaluate(vm: UpdatingVM): void;
    didModify(): void;
    toJSON(): OpcodeJSON;
}
export declare class DidModifyOpcode extends UpdatingOpcode {
    private target;
    type: string;
    constructor(target: JumpIfNotModifiedOpcode);
    evaluate(): void;
}
export declare class LabelOpcode implements UpdatingOpcode {
    tag: Tag;
    type: string;
    label: Option<string>;
    _guid: number;
    prev: any;
    next: any;
    constructor(label: string);
    evaluate(): void;
    inspect(): string;
    toJSON(): OpcodeJSON;
}
