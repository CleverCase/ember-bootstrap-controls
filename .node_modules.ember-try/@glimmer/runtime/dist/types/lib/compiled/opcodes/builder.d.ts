import { CompilationMeta, Opaque, Option, SymbolTable } from '@glimmer/interfaces';
import * as WireFormat from '@glimmer/wire-format';
import { ComponentDefinition } from '../../component/interfaces';
import Environment, { Program, Heap, Handle } from '../../environment';
import { ConstantArray, ConstantBlock, ConstantFunction, ConstantOther, Constants, ConstantString, ConstantFloat } from '../../environment/constants';
import { ModifierManager } from '../../modifier/interfaces';
import { ComponentBuilder as IComponentBuilder } from '../../opcode-builder';
import { Op, Register } from '../../opcodes';
import { FunctionExpressionCallback } from '../../syntax/client-side';
import { Block } from '../../syntax/interfaces';
import RawInlineBlock from '../../syntax/raw-block';
import { Insertion } from '../../upsert';
import * as content from './content';
import * as vm from './vm';
export interface CompilesInto<E> {
    compile(builder: OpcodeBuilder): E;
}
export declare type Represents<E> = CompilesInto<E> | E;
export declare type Label = string;
export declare abstract class BasicOpcodeBuilder {
    env: Environment;
    meta: CompilationMeta;
    program: Program;
    constants: Constants;
    heap: Heap;
    start: Handle;
    private labelsStack;
    constructor(env: Environment, meta: CompilationMeta, program: Program);
    abstract compile<E>(expr: Represents<E>): E;
    private readonly pos;
    private readonly nextPos;
    upvars<T extends [Opaque]>(count: number): T;
    reserve(name: Op): void;
    push(name: Op, op1?: number, op2?: number, op3?: number): void;
    finalize(): Handle;
    pushArgs(synthetic: boolean): void;
    private readonly labels;
    startLabels(): void;
    stopLabels(): void;
    pushComponentManager(definition: ComponentDefinition<Opaque>): void;
    pushDynamicComponentManager(): void;
    prepareArgs(state: Register): void;
    createComponent(state: Register, hasDefault: boolean, hasInverse: boolean): void;
    registerComponentDestructor(state: Register): void;
    beginComponentTransaction(): void;
    commitComponentTransaction(): void;
    pushComponentOperations(): void;
    getComponentSelf(state: Register): void;
    getComponentLayout(state: Register): void;
    didCreateElement(state: Register): void;
    didRenderLayout(state: Register): void;
    getPartialTemplate(): void;
    resolveMaybeLocal(name: string): void;
    debugger(symbols: string[], evalInfo: number[]): void;
    dynamicContent(Opcode: content.AppendDynamicOpcode<Insertion>): void;
    cautiousAppend(): void;
    trustingAppend(): void;
    text(text: string): void;
    openPrimitiveElement(tag: string): void;
    openElementWithOperations(tag: string): void;
    openDynamicElement(): void;
    flushElement(): void;
    closeElement(): void;
    staticAttr(_name: string, _namespace: Option<string>, _value: string): void;
    dynamicAttrNS(_name: string, _namespace: string, trusting: boolean): void;
    dynamicAttr(_name: string, trusting: boolean): void;
    comment(_comment: string): void;
    modifier(_definition: ModifierManager<Opaque>): void;
    putIterator(): void;
    enterList(start: string): void;
    exitList(): void;
    iterate(breaks: string): void;
    setVariable(symbol: number): void;
    getVariable(symbol: number): void;
    getProperty(key: string): void;
    getBlock(symbol: number): void;
    hasBlock(symbol: number): void;
    hasBlockParams(symbol: number): void;
    concat(size: number): void;
    function(f: FunctionExpressionCallback<Opaque>): void;
    load(register: Register): void;
    fetch(register: Register): void;
    dup(register?: Register, offset?: number): void;
    pop(count?: number): void;
    pushRemoteElement(): void;
    popRemoteElement(): void;
    label(name: string): void;
    pushRootScope(symbols: number, bindCallerScope: boolean): void;
    pushChildScope(): void;
    popScope(): void;
    returnTo(label: string): void;
    pushDynamicScope(): void;
    popDynamicScope(): void;
    pushImmediate<T>(value: T): void;
    primitive(_primitive: string | number | null | undefined | boolean): void;
    helper(func: Function): void;
    pushBlock(block: Option<Block>): void;
    bindDynamicScope(_names: string[]): void;
    enter(args: number): void;
    exit(): void;
    return(): void;
    pushFrame(): void;
    popFrame(): void;
    compileDynamicBlock(): void;
    invokeDynamic(invoker: vm.DynamicInvoker<SymbolTable>): void;
    invokeStatic(block: Block, callerCount?: number): void;
    test(testFunc: 'const' | 'simple' | 'environment' | vm.TestFunction): void;
    jump(target: string): void;
    jumpIf(target: string): void;
    jumpUnless(target: string): void;
    string(_string: string): ConstantString;
    float(num: number): ConstantFloat;
    protected names(_names: string[]): ConstantArray;
    protected symbols(symbols: number[]): ConstantArray;
    protected other(value: Opaque): ConstantOther;
    protected block(block: Option<Block>): ConstantBlock;
    protected func(func: Function): ConstantFunction;
}
export default class OpcodeBuilder extends BasicOpcodeBuilder {
    component: IComponentBuilder;
    constructor(env: Environment, meta: CompilationMeta, program?: Program);
    compileArgs(params: Option<WireFormat.Core.Params>, hash: Option<WireFormat.Core.Hash>, synthetic: boolean): void;
    compile<E>(expr: Represents<E>): E;
    guardedAppend(expression: WireFormat.Expression, trusting: boolean): void;
    invokeComponent(attrs: Option<RawInlineBlock>, params: Option<WireFormat.Core.Params>, hash: Option<WireFormat.Core.Hash>, block: Option<Block>, inverse?: Option<Block>): void;
    template(block: Option<WireFormat.SerializedInlineBlock>): Option<RawInlineBlock>;
}
export declare type BlockCallback = (dsl: OpcodeBuilder, BEGIN: Label, END: Label) => void;
