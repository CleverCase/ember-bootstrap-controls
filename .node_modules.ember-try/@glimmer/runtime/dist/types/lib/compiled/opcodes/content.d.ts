import { Opaque } from '@glimmer/interfaces';
import { Reference, ReferenceCache } from '@glimmer/reference';
import { Cursor } from '../../bounds';
import { Fragment } from '../../builder';
import { DOMTreeConstruction } from '../../dom/helper';
import { UpdatingOpcode } from '../../opcodes';
import { ConditionalReference } from '../../references';
import Upsert, { CautiousInsertion, Insertion, TrustingInsertion } from '../../upsert';
import { VM } from '../../vm';
export declare function normalizeTextValue(value: Opaque): string;
export declare abstract class AppendDynamicOpcode<T extends Insertion> {
    evaluate(vm: VM): void;
    protected abstract normalize(reference: Reference<Opaque>): Reference<T>;
    protected abstract insert(dom: DOMTreeConstruction, cursor: Cursor, value: T): Upsert;
    protected abstract updateWith(vm: VM, reference: Reference<Opaque>, cache: ReferenceCache<T>, bounds: Fragment, upsert: Upsert): UpdatingOpcode;
}
export declare class IsComponentDefinitionReference extends ConditionalReference {
    static create(inner: Reference<Opaque>): IsComponentDefinitionReference;
    toBool(value: Opaque): boolean;
}
export declare class OptimizedCautiousAppendOpcode extends AppendDynamicOpcode<CautiousInsertion> {
    type: string;
    protected normalize(reference: Reference<Opaque>): Reference<CautiousInsertion>;
    protected insert(dom: DOMTreeConstruction, cursor: Cursor, value: CautiousInsertion): Upsert;
    protected updateWith(_vm: VM, _reference: Reference<Opaque>, cache: ReferenceCache<CautiousInsertion>, bounds: Fragment, upsert: Upsert): UpdatingOpcode;
}
export declare class OptimizedTrustingAppendOpcode extends AppendDynamicOpcode<TrustingInsertion> {
    type: string;
    protected normalize(reference: Reference<Opaque>): Reference<TrustingInsertion>;
    protected insert(dom: DOMTreeConstruction, cursor: Cursor, value: TrustingInsertion): Upsert;
    protected updateWith(_vm: VM, _reference: Reference<Opaque>, cache: ReferenceCache<TrustingInsertion>, bounds: Fragment, upsert: Upsert): UpdatingOpcode;
}
export declare type AppendDynamicOpcodeConstructor = typeof OptimizedCautiousAppendOpcode | typeof OptimizedTrustingAppendOpcode;
