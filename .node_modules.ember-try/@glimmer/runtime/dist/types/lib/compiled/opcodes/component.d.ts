import { Tag } from '@glimmer/reference';
import Bounds from '../../bounds';
import { Component, ComponentDefinition, ComponentManager } from '../../component/interfaces';
import { DynamicScope } from '../../environment';
import { OpcodeJSON, UpdatingOpcode } from '../../opcodes';
import { UpdatingVM } from '../../vm';
export interface ComponentState<T> {
    definition: ComponentDefinition<T>;
    manager: ComponentManager<T>;
    component: T;
}
export declare class UpdateComponentOpcode extends UpdatingOpcode {
    private name;
    private component;
    private manager;
    private dynamicScope;
    type: string;
    constructor(tag: Tag, name: string, component: Component, manager: ComponentManager<Component>, dynamicScope: DynamicScope);
    evaluate(_vm: UpdatingVM): void;
    toJSON(): OpcodeJSON;
}
export declare class DidUpdateLayoutOpcode extends UpdatingOpcode {
    private manager;
    private component;
    private bounds;
    type: string;
    tag: Tag;
    constructor(manager: ComponentManager<Component>, component: Component, bounds: Bounds);
    evaluate(vm: UpdatingVM): void;
}
