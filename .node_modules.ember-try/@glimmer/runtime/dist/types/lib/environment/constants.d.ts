import { VersionedPathReference } from "@glimmer/reference";
import { Opaque } from "@glimmer/interfaces";
import { Block } from "../syntax/interfaces";
export declare type ConstantType = 'slice' | 'block' | 'reference' | 'string' | 'number' | 'expression';
export declare type ConstantReference = number;
export declare type ConstantString = number;
export declare type ConstantFloat = number;
export declare type ConstantExpression = number;
export declare type ConstantSlice = number;
export declare type ConstantBlock = number;
export declare type ConstantFunction = number;
export declare type ConstantArray = number;
export declare type ConstantOther = number;
export declare class Constants {
    private references;
    private strings;
    private expressions;
    private floats;
    private arrays;
    private blocks;
    private functions;
    private others;
    getReference<T extends Opaque>(value: ConstantReference): VersionedPathReference<T>;
    reference(value: VersionedPathReference<Opaque>): ConstantReference;
    getString(value: ConstantString): string;
    getFloat(value: ConstantFloat): number;
    float(value: number): ConstantFloat;
    string(value: string): ConstantString;
    getExpression<T>(value: ConstantExpression): T;
    getArray(value: ConstantArray): number[];
    getNames(value: ConstantArray): string[];
    array(values: number[]): ConstantArray;
    getBlock(value: ConstantBlock): Block;
    block(block: Block): ConstantBlock;
    getFunction<T extends Function>(value: ConstantFunction): T;
    function(f: Function): ConstantFunction;
    getOther<T>(value: ConstantOther): T;
    other(other: Opaque): ConstantOther;
}
