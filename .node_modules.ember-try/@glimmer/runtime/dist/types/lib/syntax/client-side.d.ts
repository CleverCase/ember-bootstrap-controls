import { Opaque, SymbolTable } from '@glimmer/interfaces';
import { VersionedPathReference } from '@glimmer/reference';
import { Ops as WireFormatOps } from '@glimmer/wire-format';
import { PublicVM } from '../vm';
export declare enum Ops {
    OpenComponentElement = 0,
    DidCreateElement = 1,
    DidRenderLayout = 2,
    FunctionExpression = 3,
}
import ClientSideStatement = WireFormatOps.ClientSideStatement;
import ClientSideExpression = WireFormatOps.ClientSideExpression;
export declare type OpenComponentElement = [ClientSideStatement, Ops.OpenComponentElement, string];
export declare type DidCreateElement = [ClientSideStatement, Ops.DidCreateElement];
export declare type DidRenderLayout = [ClientSideStatement, Ops.DidRenderLayout];
export declare type FunctionExpression = [ClientSideExpression, Ops.FunctionExpression, FunctionExpressionCallback<Opaque>];
export declare type FunctionExpressionCallback<T> = (VM: PublicVM, symbolTable: SymbolTable) => VersionedPathReference<T>;
export declare type ClientSideStatement = OpenComponentElement | DidCreateElement | DidRenderLayout;
export declare type ClientSideExpression = FunctionExpression;
