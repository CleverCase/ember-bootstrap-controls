import { Opaque, CompilationMeta } from '@glimmer/interfaces';
import Environment from './environment';
import { CompiledDynamicProgram } from './compiled/blocks';
import { ComponentArgs, ComponentBuilder as IComponentBuilder, DynamicComponentDefinition } from './opcode-builder';
import OpcodeBuilderDSL from './compiled/opcodes/builder';
import * as Component from './component/interfaces';
export interface CompilableLayout {
    compile(builder: Component.ComponentLayoutBuilder): void;
}
export declare function compileLayout(compilable: CompilableLayout, env: Environment): CompiledDynamicProgram;
export declare class ComponentBuilder implements IComponentBuilder {
    private builder;
    private env;
    constructor(builder: OpcodeBuilderDSL);
    static(definition: Component.ComponentDefinition<Opaque>, args: ComponentArgs): void;
    dynamic(definitionArgs: ComponentArgs, getDefinition: DynamicComponentDefinition, args: ComponentArgs): void;
}
export declare function builder(env: Environment, meta: CompilationMeta): OpcodeBuilderDSL;
