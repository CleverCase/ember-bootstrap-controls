"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
class Constants {
    constructor() {
        // `0` means NULL
        this.references = [];
        this.strings = [];
        this.expressions = [];
        this.floats = [];
        this.arrays = [];
        this.blocks = [];
        this.functions = [];
        this.others = [];
    }
    getReference(value) {
        return this.references[value - 1];
    }
    reference(value) {
        let index = this.references.length;
        this.references.push(value);
        return index + 1;
    }
    getString(value) {
        return this.strings[value - 1];
    }
    getFloat(value) {
        return this.floats[value - 1];
    }
    float(value) {
        return this.floats.push(value);
    }
    string(value) {
        let index = this.strings.length;
        this.strings.push(value);
        return index + 1;
    }
    getExpression(value) {
        return this.expressions[value - 1];
    }
    getArray(value) {
        return this.arrays[value - 1];
    }
    getNames(value) {
        let _names = [];
        let names = this.getArray(value);
        for (let i = 0; i < names.length; i++) {
            let n = names[i];
            _names[i] = this.getString(n);
        }
        return _names;
    }
    array(values) {
        let index = this.arrays.length;
        this.arrays.push(values);
        return index + 1;
    }
    getBlock(value) {
        return this.blocks[value - 1];
    }
    block(block) {
        let index = this.blocks.length;
        this.blocks.push(block);
        return index + 1;
    }
    getFunction(value) {
        return this.functions[value - 1];
    }
    function(f) {
        let index = this.functions.length;
        this.functions.push(f);
        return index + 1;
    }
    getOther(value) {
        return this.others[value - 1];
    }
    other(other) {
        let index = this.others.length;
        this.others.push(other);
        return index + 1;
    }
}
exports.Constants = Constants;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9lbnZpcm9ubWVudC9jb25zdGFudHMuanMiXSwibmFtZXMiOlsiQ29uc3RhbnRzIiwiY29uc3RydWN0b3IiLCJyZWZlcmVuY2VzIiwic3RyaW5ncyIsImV4cHJlc3Npb25zIiwiZmxvYXRzIiwiYXJyYXlzIiwiYmxvY2tzIiwiZnVuY3Rpb25zIiwib3RoZXJzIiwiZ2V0UmVmZXJlbmNlIiwidmFsdWUiLCJyZWZlcmVuY2UiLCJpbmRleCIsImxlbmd0aCIsInB1c2giLCJnZXRTdHJpbmciLCJnZXRGbG9hdCIsImZsb2F0Iiwic3RyaW5nIiwiZ2V0RXhwcmVzc2lvbiIsImdldEFycmF5IiwiZ2V0TmFtZXMiLCJfbmFtZXMiLCJuYW1lcyIsImkiLCJuIiwiYXJyYXkiLCJ2YWx1ZXMiLCJnZXRCbG9jayIsImJsb2NrIiwiZ2V0RnVuY3Rpb24iLCJmdW5jdGlvbiIsImYiLCJnZXRPdGhlciIsIm90aGVyIl0sIm1hcHBpbmdzIjoiOzs7OztBQUFPLE1BQU1BLFNBQU4sQ0FBZ0I7QUFDbkJDLGtCQUFjO0FBQ1Y7QUFDQSxhQUFLQyxVQUFMLEdBQWtCLEVBQWxCO0FBQ0EsYUFBS0MsT0FBTCxHQUFlLEVBQWY7QUFDQSxhQUFLQyxXQUFMLEdBQW1CLEVBQW5CO0FBQ0EsYUFBS0MsTUFBTCxHQUFjLEVBQWQ7QUFDQSxhQUFLQyxNQUFMLEdBQWMsRUFBZDtBQUNBLGFBQUtDLE1BQUwsR0FBYyxFQUFkO0FBQ0EsYUFBS0MsU0FBTCxHQUFpQixFQUFqQjtBQUNBLGFBQUtDLE1BQUwsR0FBYyxFQUFkO0FBQ0g7QUFDREMsaUJBQWFDLEtBQWIsRUFBb0I7QUFDaEIsZUFBTyxLQUFLVCxVQUFMLENBQWdCUyxRQUFRLENBQXhCLENBQVA7QUFDSDtBQUNEQyxjQUFVRCxLQUFWLEVBQWlCO0FBQ2IsWUFBSUUsUUFBUSxLQUFLWCxVQUFMLENBQWdCWSxNQUE1QjtBQUNBLGFBQUtaLFVBQUwsQ0FBZ0JhLElBQWhCLENBQXFCSixLQUFyQjtBQUNBLGVBQU9FLFFBQVEsQ0FBZjtBQUNIO0FBQ0RHLGNBQVVMLEtBQVYsRUFBaUI7QUFDYixlQUFPLEtBQUtSLE9BQUwsQ0FBYVEsUUFBUSxDQUFyQixDQUFQO0FBQ0g7QUFDRE0sYUFBU04sS0FBVCxFQUFnQjtBQUNaLGVBQU8sS0FBS04sTUFBTCxDQUFZTSxRQUFRLENBQXBCLENBQVA7QUFDSDtBQUNETyxVQUFNUCxLQUFOLEVBQWE7QUFDVCxlQUFPLEtBQUtOLE1BQUwsQ0FBWVUsSUFBWixDQUFpQkosS0FBakIsQ0FBUDtBQUNIO0FBQ0RRLFdBQU9SLEtBQVAsRUFBYztBQUNWLFlBQUlFLFFBQVEsS0FBS1YsT0FBTCxDQUFhVyxNQUF6QjtBQUNBLGFBQUtYLE9BQUwsQ0FBYVksSUFBYixDQUFrQkosS0FBbEI7QUFDQSxlQUFPRSxRQUFRLENBQWY7QUFDSDtBQUNETyxrQkFBY1QsS0FBZCxFQUFxQjtBQUNqQixlQUFPLEtBQUtQLFdBQUwsQ0FBaUJPLFFBQVEsQ0FBekIsQ0FBUDtBQUNIO0FBQ0RVLGFBQVNWLEtBQVQsRUFBZ0I7QUFDWixlQUFPLEtBQUtMLE1BQUwsQ0FBWUssUUFBUSxDQUFwQixDQUFQO0FBQ0g7QUFDRFcsYUFBU1gsS0FBVCxFQUFnQjtBQUNaLFlBQUlZLFNBQVMsRUFBYjtBQUNBLFlBQUlDLFFBQVEsS0FBS0gsUUFBTCxDQUFjVixLQUFkLENBQVo7QUFDQSxhQUFLLElBQUljLElBQUksQ0FBYixFQUFnQkEsSUFBSUQsTUFBTVYsTUFBMUIsRUFBa0NXLEdBQWxDLEVBQXVDO0FBQ25DLGdCQUFJQyxJQUFJRixNQUFNQyxDQUFOLENBQVI7QUFDQUYsbUJBQU9FLENBQVAsSUFBWSxLQUFLVCxTQUFMLENBQWVVLENBQWYsQ0FBWjtBQUNIO0FBQ0QsZUFBT0gsTUFBUDtBQUNIO0FBQ0RJLFVBQU1DLE1BQU4sRUFBYztBQUNWLFlBQUlmLFFBQVEsS0FBS1AsTUFBTCxDQUFZUSxNQUF4QjtBQUNBLGFBQUtSLE1BQUwsQ0FBWVMsSUFBWixDQUFpQmEsTUFBakI7QUFDQSxlQUFPZixRQUFRLENBQWY7QUFDSDtBQUNEZ0IsYUFBU2xCLEtBQVQsRUFBZ0I7QUFDWixlQUFPLEtBQUtKLE1BQUwsQ0FBWUksUUFBUSxDQUFwQixDQUFQO0FBQ0g7QUFDRG1CLFVBQU1BLEtBQU4sRUFBYTtBQUNULFlBQUlqQixRQUFRLEtBQUtOLE1BQUwsQ0FBWU8sTUFBeEI7QUFDQSxhQUFLUCxNQUFMLENBQVlRLElBQVosQ0FBaUJlLEtBQWpCO0FBQ0EsZUFBT2pCLFFBQVEsQ0FBZjtBQUNIO0FBQ0RrQixnQkFBWXBCLEtBQVosRUFBbUI7QUFDZixlQUFPLEtBQUtILFNBQUwsQ0FBZUcsUUFBUSxDQUF2QixDQUFQO0FBQ0g7QUFDRHFCLGFBQVNDLENBQVQsRUFBWTtBQUNSLFlBQUlwQixRQUFRLEtBQUtMLFNBQUwsQ0FBZU0sTUFBM0I7QUFDQSxhQUFLTixTQUFMLENBQWVPLElBQWYsQ0FBb0JrQixDQUFwQjtBQUNBLGVBQU9wQixRQUFRLENBQWY7QUFDSDtBQUNEcUIsYUFBU3ZCLEtBQVQsRUFBZ0I7QUFDWixlQUFPLEtBQUtGLE1BQUwsQ0FBWUUsUUFBUSxDQUFwQixDQUFQO0FBQ0g7QUFDRHdCLFVBQU1BLEtBQU4sRUFBYTtBQUNULFlBQUl0QixRQUFRLEtBQUtKLE1BQUwsQ0FBWUssTUFBeEI7QUFDQSxhQUFLTCxNQUFMLENBQVlNLElBQVosQ0FBaUJvQixLQUFqQjtBQUNBLGVBQU90QixRQUFRLENBQWY7QUFDSDtBQTdFa0I7UUFBVmIsUyxHQUFBQSxTIiwiZmlsZSI6ImxpYi9lbnZpcm9ubWVudC9jb25zdGFudHMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY2xhc3MgQ29uc3RhbnRzIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgLy8gYDBgIG1lYW5zIE5VTExcbiAgICAgICAgdGhpcy5yZWZlcmVuY2VzID0gW107XG4gICAgICAgIHRoaXMuc3RyaW5ncyA9IFtdO1xuICAgICAgICB0aGlzLmV4cHJlc3Npb25zID0gW107XG4gICAgICAgIHRoaXMuZmxvYXRzID0gW107XG4gICAgICAgIHRoaXMuYXJyYXlzID0gW107XG4gICAgICAgIHRoaXMuYmxvY2tzID0gW107XG4gICAgICAgIHRoaXMuZnVuY3Rpb25zID0gW107XG4gICAgICAgIHRoaXMub3RoZXJzID0gW107XG4gICAgfVxuICAgIGdldFJlZmVyZW5jZSh2YWx1ZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5yZWZlcmVuY2VzW3ZhbHVlIC0gMV07XG4gICAgfVxuICAgIHJlZmVyZW5jZSh2YWx1ZSkge1xuICAgICAgICBsZXQgaW5kZXggPSB0aGlzLnJlZmVyZW5jZXMubGVuZ3RoO1xuICAgICAgICB0aGlzLnJlZmVyZW5jZXMucHVzaCh2YWx1ZSk7XG4gICAgICAgIHJldHVybiBpbmRleCArIDE7XG4gICAgfVxuICAgIGdldFN0cmluZyh2YWx1ZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5zdHJpbmdzW3ZhbHVlIC0gMV07XG4gICAgfVxuICAgIGdldEZsb2F0KHZhbHVlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmZsb2F0c1t2YWx1ZSAtIDFdO1xuICAgIH1cbiAgICBmbG9hdCh2YWx1ZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5mbG9hdHMucHVzaCh2YWx1ZSk7XG4gICAgfVxuICAgIHN0cmluZyh2YWx1ZSkge1xuICAgICAgICBsZXQgaW5kZXggPSB0aGlzLnN0cmluZ3MubGVuZ3RoO1xuICAgICAgICB0aGlzLnN0cmluZ3MucHVzaCh2YWx1ZSk7XG4gICAgICAgIHJldHVybiBpbmRleCArIDE7XG4gICAgfVxuICAgIGdldEV4cHJlc3Npb24odmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZXhwcmVzc2lvbnNbdmFsdWUgLSAxXTtcbiAgICB9XG4gICAgZ2V0QXJyYXkodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYXJyYXlzW3ZhbHVlIC0gMV07XG4gICAgfVxuICAgIGdldE5hbWVzKHZhbHVlKSB7XG4gICAgICAgIGxldCBfbmFtZXMgPSBbXTtcbiAgICAgICAgbGV0IG5hbWVzID0gdGhpcy5nZXRBcnJheSh2YWx1ZSk7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbmFtZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGxldCBuID0gbmFtZXNbaV07XG4gICAgICAgICAgICBfbmFtZXNbaV0gPSB0aGlzLmdldFN0cmluZyhuKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gX25hbWVzO1xuICAgIH1cbiAgICBhcnJheSh2YWx1ZXMpIHtcbiAgICAgICAgbGV0IGluZGV4ID0gdGhpcy5hcnJheXMubGVuZ3RoO1xuICAgICAgICB0aGlzLmFycmF5cy5wdXNoKHZhbHVlcyk7XG4gICAgICAgIHJldHVybiBpbmRleCArIDE7XG4gICAgfVxuICAgIGdldEJsb2NrKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmJsb2Nrc1t2YWx1ZSAtIDFdO1xuICAgIH1cbiAgICBibG9jayhibG9jaykge1xuICAgICAgICBsZXQgaW5kZXggPSB0aGlzLmJsb2Nrcy5sZW5ndGg7XG4gICAgICAgIHRoaXMuYmxvY2tzLnB1c2goYmxvY2spO1xuICAgICAgICByZXR1cm4gaW5kZXggKyAxO1xuICAgIH1cbiAgICBnZXRGdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5mdW5jdGlvbnNbdmFsdWUgLSAxXTtcbiAgICB9XG4gICAgZnVuY3Rpb24oZikge1xuICAgICAgICBsZXQgaW5kZXggPSB0aGlzLmZ1bmN0aW9ucy5sZW5ndGg7XG4gICAgICAgIHRoaXMuZnVuY3Rpb25zLnB1c2goZik7XG4gICAgICAgIHJldHVybiBpbmRleCArIDE7XG4gICAgfVxuICAgIGdldE90aGVyKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm90aGVyc1t2YWx1ZSAtIDFdO1xuICAgIH1cbiAgICBvdGhlcihvdGhlcikge1xuICAgICAgICBsZXQgaW5kZXggPSB0aGlzLm90aGVycy5sZW5ndGg7XG4gICAgICAgIHRoaXMub3RoZXJzLnB1c2gob3RoZXIpO1xuICAgICAgICByZXR1cm4gaW5kZXggKyAxO1xuICAgIH1cbn0iXX0=