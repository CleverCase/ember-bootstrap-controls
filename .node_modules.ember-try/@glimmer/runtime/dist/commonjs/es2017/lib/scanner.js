'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _util = require('@glimmer/util');

var _wireFormat = require('@glimmer/wire-format');

var WireFormat = _interopRequireWildcard(_wireFormat);

var _clientSide = require('./syntax/client-side');

var ClientSide = _interopRequireWildcard(_clientSide);

var _compilableTemplate = require('./syntax/compilable-template');

var _compilableTemplate2 = _interopRequireDefault(_compilableTemplate);

var _functions = require('./syntax/functions');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var Ops = WireFormat.Ops;
class Scanner {
    constructor(block, env) {
        this.block = block;
        this.env = env;
    }
    scanEntryPoint(meta) {
        let { block } = this;
        let { statements, symbols, hasEval } = block;
        return new _compilableTemplate2.default(statements, { meta, symbols, hasEval });
    }
    scanBlock(meta) {
        let { block } = this;
        let { statements } = block;
        return new _compilableTemplate2.default(statements, { meta, parameters: _util.EMPTY_ARRAY });
    }
    scanLayout(meta, attrs, componentName) {
        let { block } = this;
        let { statements, symbols, hasEval } = block;
        let symbolTable = { meta, hasEval, symbols };
        let newStatements = [];
        let toplevel;
        let inTopLevel = false;
        for (let i = 0; i < statements.length; i++) {
            let statement = statements[i];
            if (WireFormat.Statements.isComponent(statement)) {
                let tagName = statement[1];
                if (!this.env.hasComponentDefinition(tagName, meta.templateMeta)) {
                    if (toplevel !== undefined) {
                        newStatements.push([Ops.OpenElement, tagName]);
                    } else {
                        toplevel = tagName;
                        decorateTopLevelElement(tagName, symbols, attrs, newStatements);
                    }
                    addFallback(statement, newStatements);
                } else {
                    if (toplevel === undefined && tagName === componentName) {
                        toplevel = tagName;
                        decorateTopLevelElement(tagName, symbols, attrs, newStatements);
                        addFallback(statement, newStatements);
                    } else {
                        newStatements.push(statement);
                    }
                }
            } else {
                if (toplevel === undefined && WireFormat.Statements.isOpenElement(statement)) {
                    toplevel = statement[1];
                    inTopLevel = true;
                    decorateTopLevelElement(toplevel, symbols, attrs, newStatements);
                } else {
                    if (inTopLevel) {
                        if (WireFormat.Statements.isFlushElement(statement)) {
                            inTopLevel = false;
                        } else if (WireFormat.Statements.isModifier(statement)) {
                            throw Error(`Found modifier "${statement[1]}" on the top-level element of "${componentName}"\. Modifiers cannot be on the top-level element`);
                        }
                    }
                    newStatements.push(statement);
                }
            }
        }
        newStatements.push([Ops.ClientSideStatement, ClientSide.Ops.DidRenderLayout]);
        return new _compilableTemplate2.default(newStatements, symbolTable);
    }
}
exports.default = Scanner;
function addFallback(statement, buffer) {
    let [,, attrs,, block] = statement;
    for (let i = 0; i < attrs.length; i++) {
        buffer.push(attrs[i]);
    }
    buffer.push([Ops.FlushElement]);
    if (block) {
        let { statements } = block;
        for (let i = 0; i < statements.length; i++) {
            buffer.push(statements[i]);
        }
    }
    buffer.push([Ops.CloseElement]);
}
function decorateTopLevelElement(tagName, symbols, attrs, buffer) {
    let attrsSymbol = symbols.push(_functions.ATTRS_BLOCK);
    buffer.push([Ops.ClientSideStatement, ClientSide.Ops.OpenComponentElement, tagName]);
    buffer.push([Ops.ClientSideStatement, ClientSide.Ops.DidCreateElement]);
    buffer.push([Ops.Yield, attrsSymbol, _util.EMPTY_ARRAY]);
    buffer.push(...attrs);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,