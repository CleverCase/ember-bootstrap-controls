'use strict';

var _reference = require('@glimmer/reference');

var _opcodes = require('../../opcodes');

class IterablePresenceReference {
    constructor(artifacts) {
        this.tag = artifacts.tag;
        this.artifacts = artifacts;
    }
    value() {
        return !this.artifacts.isEmpty();
    }
}
_opcodes.APPEND_OPCODES.add(54 /* PutIterator */, vm => {
    let stack = vm.stack;
    let listRef = stack.pop();
    let key = stack.pop();
    let iterable = vm.env.iterableFor(listRef, key.value());
    let iterator = new _reference.ReferenceIterator(iterable);
    stack.push(iterator);
    stack.push(new IterablePresenceReference(iterator.artifacts));
});
_opcodes.APPEND_OPCODES.add(52 /* EnterList */, (vm, { op1: relativeStart }) => {
    vm.enterList(relativeStart);
});
_opcodes.APPEND_OPCODES.add(53 /* ExitList */, vm => vm.exitList());
_opcodes.APPEND_OPCODES.add(55 /* Iterate */, (vm, { op1: breaks }) => {
    let stack = vm.stack;
    let item = stack.peek().next();
    if (item) {
        let tryOpcode = vm.iterate(item.memo, item.value);
        vm.enterItem(item.key, tryOpcode);
    } else {
        vm.goto(breaks);
    }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9jb21waWxlZC9vcGNvZGVzL2xpc3RzLmpzIl0sIm5hbWVzIjpbIkl0ZXJhYmxlUHJlc2VuY2VSZWZlcmVuY2UiLCJjb25zdHJ1Y3RvciIsImFydGlmYWN0cyIsInRhZyIsInZhbHVlIiwiaXNFbXB0eSIsImFkZCIsInZtIiwic3RhY2siLCJsaXN0UmVmIiwicG9wIiwia2V5IiwiaXRlcmFibGUiLCJlbnYiLCJpdGVyYWJsZUZvciIsIml0ZXJhdG9yIiwicHVzaCIsIm9wMSIsInJlbGF0aXZlU3RhcnQiLCJlbnRlckxpc3QiLCJleGl0TGlzdCIsImJyZWFrcyIsIml0ZW0iLCJwZWVrIiwibmV4dCIsInRyeU9wY29kZSIsIml0ZXJhdGUiLCJtZW1vIiwiZW50ZXJJdGVtIiwiZ290byJdLCJtYXBwaW5ncyI6Ijs7QUFBQTs7QUFDQTs7QUFDQSxNQUFNQSx5QkFBTixDQUFnQztBQUM1QkMsZ0JBQVlDLFNBQVosRUFBdUI7QUFDbkIsYUFBS0MsR0FBTCxHQUFXRCxVQUFVQyxHQUFyQjtBQUNBLGFBQUtELFNBQUwsR0FBaUJBLFNBQWpCO0FBQ0g7QUFDREUsWUFBUTtBQUNKLGVBQU8sQ0FBQyxLQUFLRixTQUFMLENBQWVHLE9BQWYsRUFBUjtBQUNIO0FBUDJCO0FBU2hDLHdCQUFlQyxHQUFmLENBQW1CLEVBQW5CLENBQXNCLGlCQUF0QixFQUF5Q0MsTUFBTTtBQUMzQyxRQUFJQyxRQUFRRCxHQUFHQyxLQUFmO0FBQ0EsUUFBSUMsVUFBVUQsTUFBTUUsR0FBTixFQUFkO0FBQ0EsUUFBSUMsTUFBTUgsTUFBTUUsR0FBTixFQUFWO0FBQ0EsUUFBSUUsV0FBV0wsR0FBR00sR0FBSCxDQUFPQyxXQUFQLENBQW1CTCxPQUFuQixFQUE0QkUsSUFBSVAsS0FBSixFQUE1QixDQUFmO0FBQ0EsUUFBSVcsV0FBVyxpQ0FBc0JILFFBQXRCLENBQWY7QUFDQUosVUFBTVEsSUFBTixDQUFXRCxRQUFYO0FBQ0FQLFVBQU1RLElBQU4sQ0FBVyxJQUFJaEIseUJBQUosQ0FBOEJlLFNBQVNiLFNBQXZDLENBQVg7QUFDSCxDQVJEO0FBU0Esd0JBQWVJLEdBQWYsQ0FBbUIsRUFBbkIsQ0FBc0IsZUFBdEIsRUFBdUMsQ0FBQ0MsRUFBRCxFQUFLLEVBQUVVLEtBQUtDLGFBQVAsRUFBTCxLQUFnQztBQUNuRVgsT0FBR1ksU0FBSCxDQUFhRCxhQUFiO0FBQ0gsQ0FGRDtBQUdBLHdCQUFlWixHQUFmLENBQW1CLEVBQW5CLENBQXNCLGNBQXRCLEVBQXNDQyxNQUFNQSxHQUFHYSxRQUFILEVBQTVDO0FBQ0Esd0JBQWVkLEdBQWYsQ0FBbUIsRUFBbkIsQ0FBc0IsYUFBdEIsRUFBcUMsQ0FBQ0MsRUFBRCxFQUFLLEVBQUVVLEtBQUtJLE1BQVAsRUFBTCxLQUF5QjtBQUMxRCxRQUFJYixRQUFRRCxHQUFHQyxLQUFmO0FBQ0EsUUFBSWMsT0FBT2QsTUFBTWUsSUFBTixHQUFhQyxJQUFiLEVBQVg7QUFDQSxRQUFJRixJQUFKLEVBQVU7QUFDTixZQUFJRyxZQUFZbEIsR0FBR21CLE9BQUgsQ0FBV0osS0FBS0ssSUFBaEIsRUFBc0JMLEtBQUtsQixLQUEzQixDQUFoQjtBQUNBRyxXQUFHcUIsU0FBSCxDQUFhTixLQUFLWCxHQUFsQixFQUF1QmMsU0FBdkI7QUFDSCxLQUhELE1BR087QUFDSGxCLFdBQUdzQixJQUFILENBQVFSLE1BQVI7QUFDSDtBQUNKLENBVEQiLCJmaWxlIjoibGliL2NvbXBpbGVkL29wY29kZXMvbGlzdHMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBSZWZlcmVuY2VJdGVyYXRvciB9IGZyb20gJ0BnbGltbWVyL3JlZmVyZW5jZSc7XG5pbXBvcnQgeyBBUFBFTkRfT1BDT0RFUyB9IGZyb20gJy4uLy4uL29wY29kZXMnO1xuY2xhc3MgSXRlcmFibGVQcmVzZW5jZVJlZmVyZW5jZSB7XG4gICAgY29uc3RydWN0b3IoYXJ0aWZhY3RzKSB7XG4gICAgICAgIHRoaXMudGFnID0gYXJ0aWZhY3RzLnRhZztcbiAgICAgICAgdGhpcy5hcnRpZmFjdHMgPSBhcnRpZmFjdHM7XG4gICAgfVxuICAgIHZhbHVlKCkge1xuICAgICAgICByZXR1cm4gIXRoaXMuYXJ0aWZhY3RzLmlzRW1wdHkoKTtcbiAgICB9XG59XG5BUFBFTkRfT1BDT0RFUy5hZGQoNTQgLyogUHV0SXRlcmF0b3IgKi8sIHZtID0+IHtcbiAgICBsZXQgc3RhY2sgPSB2bS5zdGFjaztcbiAgICBsZXQgbGlzdFJlZiA9IHN0YWNrLnBvcCgpO1xuICAgIGxldCBrZXkgPSBzdGFjay5wb3AoKTtcbiAgICBsZXQgaXRlcmFibGUgPSB2bS5lbnYuaXRlcmFibGVGb3IobGlzdFJlZiwga2V5LnZhbHVlKCkpO1xuICAgIGxldCBpdGVyYXRvciA9IG5ldyBSZWZlcmVuY2VJdGVyYXRvcihpdGVyYWJsZSk7XG4gICAgc3RhY2sucHVzaChpdGVyYXRvcik7XG4gICAgc3RhY2sucHVzaChuZXcgSXRlcmFibGVQcmVzZW5jZVJlZmVyZW5jZShpdGVyYXRvci5hcnRpZmFjdHMpKTtcbn0pO1xuQVBQRU5EX09QQ09ERVMuYWRkKDUyIC8qIEVudGVyTGlzdCAqLywgKHZtLCB7IG9wMTogcmVsYXRpdmVTdGFydCB9KSA9PiB7XG4gICAgdm0uZW50ZXJMaXN0KHJlbGF0aXZlU3RhcnQpO1xufSk7XG5BUFBFTkRfT1BDT0RFUy5hZGQoNTMgLyogRXhpdExpc3QgKi8sIHZtID0+IHZtLmV4aXRMaXN0KCkpO1xuQVBQRU5EX09QQ09ERVMuYWRkKDU1IC8qIEl0ZXJhdGUgKi8sICh2bSwgeyBvcDE6IGJyZWFrcyB9KSA9PiB7XG4gICAgbGV0IHN0YWNrID0gdm0uc3RhY2s7XG4gICAgbGV0IGl0ZW0gPSBzdGFjay5wZWVrKCkubmV4dCgpO1xuICAgIGlmIChpdGVtKSB7XG4gICAgICAgIGxldCB0cnlPcGNvZGUgPSB2bS5pdGVyYXRlKGl0ZW0ubWVtbywgaXRlbS52YWx1ZSk7XG4gICAgICAgIHZtLmVudGVySXRlbShpdGVtLmtleSwgdHJ5T3Bjb2RlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICB2bS5nb3RvKGJyZWFrcyk7XG4gICAgfVxufSk7Il19