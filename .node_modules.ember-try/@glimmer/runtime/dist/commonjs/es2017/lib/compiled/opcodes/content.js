'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.OptimizedTrustingAppendOpcode = exports.OptimizedCautiousAppendOpcode = exports.IsComponentDefinitionReference = exports.AppendDynamicOpcode = undefined;
exports.normalizeTextValue = normalizeTextValue;

var _reference2 = require('@glimmer/reference');

var _bounds = require('../../bounds');

var _builder = require('../../builder');

var _interfaces = require('../../component/interfaces');

var _opcodes = require('../../opcodes');

var _references = require('../../references');

var _upsert = require('../../upsert');

_opcodes.APPEND_OPCODES.add(26 /* DynamicContent */, (vm, { op1: append }) => {
    let opcode = vm.constants.getOther(append);
    opcode.evaluate(vm);
});
function isEmpty(value) {
    return value === null || value === undefined || typeof value.toString !== 'function';
}
function normalizeTextValue(value) {
    if (isEmpty(value)) {
        return '';
    }
    return String(value);
}
function normalizeTrustedValue(value) {
    if (isEmpty(value)) {
        return '';
    }
    if ((0, _upsert.isString)(value)) {
        return value;
    }
    if ((0, _upsert.isSafeString)(value)) {
        return value.toHTML();
    }
    if ((0, _upsert.isNode)(value)) {
        return value;
    }
    return String(value);
}
function normalizeValue(value) {
    if (isEmpty(value)) {
        return '';
    }
    if ((0, _upsert.isString)(value)) {
        return value;
    }
    if ((0, _upsert.isSafeString)(value) || (0, _upsert.isNode)(value)) {
        return value;
    }
    return String(value);
}
class AppendDynamicOpcode {
    evaluate(vm) {
        let reference = vm.stack.pop();
        let normalized = this.normalize(reference);
        let value;
        let cache;
        if ((0, _reference2.isConst)(reference)) {
            value = normalized.value();
        } else {
            cache = new _reference2.ReferenceCache(normalized);
            value = cache.peek();
        }
        let stack = vm.elements();
        let upsert = this.insert(vm.env.getAppendOperations(), stack, value);
        let bounds = new _builder.Fragment(upsert.bounds);
        stack.newBounds(bounds);
        if (cache /* i.e. !isConst(reference) */) {
                vm.updateWith(this.updateWith(vm, reference, cache, bounds, upsert));
            }
    }
}
exports.AppendDynamicOpcode = AppendDynamicOpcode;
class IsComponentDefinitionReference extends _references.ConditionalReference {
    static create(inner) {
        return new IsComponentDefinitionReference(inner);
    }
    toBool(value) {
        return (0, _interfaces.isComponentDefinition)(value);
    }
}
exports.IsComponentDefinitionReference = IsComponentDefinitionReference;
class UpdateOpcode extends _opcodes.UpdatingOpcode {
    constructor(cache, bounds, upsert) {
        super();
        this.cache = cache;
        this.bounds = bounds;
        this.upsert = upsert;
        this.tag = cache.tag;
    }
    evaluate(vm) {
        let value = this.cache.revalidate();
        if ((0, _reference2.isModified)(value)) {
            let { bounds, upsert } = this;
            let { dom } = vm;
            if (!this.upsert.update(dom, value)) {
                let cursor = new _bounds.Cursor(bounds.parentElement(), (0, _bounds.clear)(bounds));
                upsert = this.upsert = this.insert(vm.env.getAppendOperations(), cursor, value);
            }
            bounds.update(upsert.bounds);
        }
    }
    toJSON() {
        let { _guid: guid, type, cache } = this;
        return {
            details: { lastValue: JSON.stringify(cache.peek()) },
            guid,
            type
        };
    }
}
class OptimizedCautiousAppendOpcode extends AppendDynamicOpcode {
    constructor() {
        super(...arguments);
        this.type = 'optimized-cautious-append';
    }
    normalize(reference) {
        return (0, _reference2.map)(reference, normalizeValue);
    }
    insert(dom, cursor, value) {
        return (0, _upsert.cautiousInsert)(dom, cursor, value);
    }
    updateWith(_vm, _reference, cache, bounds, upsert) {
        return new OptimizedCautiousUpdateOpcode(cache, bounds, upsert);
    }
}
exports.OptimizedCautiousAppendOpcode = OptimizedCautiousAppendOpcode;
class OptimizedCautiousUpdateOpcode extends UpdateOpcode {
    constructor() {
        super(...arguments);
        this.type = 'optimized-cautious-update';
    }
    insert(dom, cursor, value) {
        return (0, _upsert.cautiousInsert)(dom, cursor, value);
    }
}
class OptimizedTrustingAppendOpcode extends AppendDynamicOpcode {
    constructor() {
        super(...arguments);
        this.type = 'optimized-trusting-append';
    }
    normalize(reference) {
        return (0, _reference2.map)(reference, normalizeTrustedValue);
    }
    insert(dom, cursor, value) {
        return (0, _upsert.trustingInsert)(dom, cursor, value);
    }
    updateWith(_vm, _reference, cache, bounds, upsert) {
        return new OptimizedTrustingUpdateOpcode(cache, bounds, upsert);
    }
}
exports.OptimizedTrustingAppendOpcode = OptimizedTrustingAppendOpcode;
class OptimizedTrustingUpdateOpcode extends UpdateOpcode {
    constructor() {
        super(...arguments);
        this.type = 'optimized-trusting-update';
    }
    insert(dom, cursor, value) {
        return (0, _upsert.trustingInsert)(dom, cursor, value);
    }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,