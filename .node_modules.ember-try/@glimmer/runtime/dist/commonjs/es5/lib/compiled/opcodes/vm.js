"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.LabelOpcode = exports.DidModifyOpcode = exports.JumpIfNotModifiedOpcode = exports.Assert = exports.EnvironmentTest = exports.SimpleTest = exports.ConstTest = undefined;

var _reference = require("@glimmer/reference");

var _util = require("@glimmer/util");

var _opcodes = require("../../opcodes");

var _references = require("../../references");

function _defaults(obj, defaults) {
    var keys = Object.getOwnPropertyNames(defaults);for (var i = 0; i < keys.length; i++) {
        var key = keys[i];var value = Object.getOwnPropertyDescriptor(defaults, key);if (value && value.configurable && obj[key] === undefined) {
            Object.defineProperty(obj, key, value);
        }
    }return obj;
}

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}

function _possibleConstructorReturn(self, call) {
    if (!self) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }return call && (typeof call === "object" || typeof call === "function") ? call : self;
}

function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass);
}

_opcodes.APPEND_OPCODES.add(20 /* ChildScope */, function (vm) {
    return vm.pushChildScope();
});
_opcodes.APPEND_OPCODES.add(21 /* PopScope */, function (vm) {
    return vm.popScope();
});
_opcodes.APPEND_OPCODES.add(39 /* PushDynamicScope */, function (vm) {
    return vm.pushDynamicScope();
});
_opcodes.APPEND_OPCODES.add(40 /* PopDynamicScope */, function (vm) {
    return vm.popDynamicScope();
});
_opcodes.APPEND_OPCODES.add(12 /* Immediate */, function (vm, _ref) {
    var number = _ref.op1;

    vm.stack.push(number);
});
_opcodes.APPEND_OPCODES.add(13 /* Constant */, function (vm, _ref2) {
    var other = _ref2.op1;

    vm.stack.push(vm.constants.getOther(other));
});
_opcodes.APPEND_OPCODES.add(14 /* PrimitiveReference */, function (vm, _ref3) {
    var primitive = _ref3.op1;

    var stack = vm.stack;
    var flag = (primitive & 3 << 30) >>> 30;
    var value = primitive & ~(3 << 30);
    switch (flag) {
        case 0:
            stack.push(_references.PrimitiveReference.create(value));
            break;
        case 1:
            stack.push(_references.PrimitiveReference.create(vm.constants.getFloat(value)));
            break;
        case 2:
            stack.push(_references.PrimitiveReference.create(vm.constants.getString(value)));
            break;
        case 3:
            switch (value) {
                case 0:
                    stack.push(_references.FALSE_REFERENCE);
                    break;
                case 1:
                    stack.push(_references.TRUE_REFERENCE);
                    break;
                case 2:
                    stack.push(_references.NULL_REFERENCE);
                    break;
                case 3:
                    stack.push(_references.UNDEFINED_REFERENCE);
                    break;
            }
            break;
    }
});
_opcodes.APPEND_OPCODES.add(15 /* Dup */, function (vm, _ref4) {
    var register = _ref4.op1,
        offset = _ref4.op2;

    var position = vm.fetchValue(register) - offset;
    vm.stack.dup(position);
});
_opcodes.APPEND_OPCODES.add(16 /* Pop */, function (vm, _ref5) {
    var count = _ref5.op1;
    return vm.stack.pop(count);
});
_opcodes.APPEND_OPCODES.add(17 /* Load */, function (vm, _ref6) {
    var register = _ref6.op1;
    return vm.load(register);
});
_opcodes.APPEND_OPCODES.add(18 /* Fetch */, function (vm, _ref7) {
    var register = _ref7.op1;
    return vm.fetch(register);
});
_opcodes.APPEND_OPCODES.add(38 /* BindDynamicScope */, function (vm, _ref8) {
    var _names = _ref8.op1;

    var names = vm.constants.getArray(_names);
    vm.bindDynamicScope(names);
});
_opcodes.APPEND_OPCODES.add(47 /* PushFrame */, function (vm) {
    return vm.pushFrame();
});
_opcodes.APPEND_OPCODES.add(48 /* PopFrame */, function (vm) {
    return vm.popFrame();
});
_opcodes.APPEND_OPCODES.add(49 /* Enter */, function (vm, _ref9) {
    var args = _ref9.op1;
    return vm.enter(args);
});
_opcodes.APPEND_OPCODES.add(50 /* Exit */, function (vm) {
    return vm.exit();
});
_opcodes.APPEND_OPCODES.add(41 /* CompileDynamicBlock */, function (vm) {
    var stack = vm.stack;
    var block = stack.pop();
    stack.push(block ? block.compileDynamic(vm.env) : null);
});
_opcodes.APPEND_OPCODES.add(42 /* InvokeStatic */, function (vm, _ref10) {
    var _block = _ref10.op1;

    var block = vm.constants.getBlock(_block);
    var compiled = block.compileStatic(vm.env);
    vm.call(compiled.handle);
});
_opcodes.APPEND_OPCODES.add(43 /* InvokeDynamic */, function (vm, _ref11) {
    var _invoker = _ref11.op1;

    var invoker = vm.constants.getOther(_invoker);
    var block = vm.stack.pop();
    invoker.invoke(vm, block);
});
_opcodes.APPEND_OPCODES.add(44 /* Jump */, function (vm, _ref12) {
    var target = _ref12.op1;
    return vm.goto(target);
});
_opcodes.APPEND_OPCODES.add(45 /* JumpIf */, function (vm, _ref13) {
    var target = _ref13.op1;

    var reference = vm.stack.pop();
    if ((0, _reference.isConst)(reference)) {
        if (reference.value()) {
            vm.goto(target);
        }
    } else {
        var cache = new _reference.ReferenceCache(reference);
        if (cache.peek()) {
            vm.goto(target);
        }
        vm.updateWith(new Assert(cache));
    }
});
_opcodes.APPEND_OPCODES.add(46 /* JumpUnless */, function (vm, _ref14) {
    var target = _ref14.op1;

    var reference = vm.stack.pop();
    if ((0, _reference.isConst)(reference)) {
        if (!reference.value()) {
            vm.goto(target);
        }
    } else {
        var cache = new _reference.ReferenceCache(reference);
        if (!cache.peek()) {
            vm.goto(target);
        }
        vm.updateWith(new Assert(cache));
    }
});
_opcodes.APPEND_OPCODES.add(22 /* Return */, function (vm) {
    return vm.return();
});
_opcodes.APPEND_OPCODES.add(23 /* ReturnTo */, function (vm, _ref15) {
    var relative = _ref15.op1;

    vm.returnTo(relative);
});
var ConstTest = exports.ConstTest = function (ref, _env) {
    return new _reference.ConstReference(!!ref.value());
};
var SimpleTest = exports.SimpleTest = function (ref, _env) {
    return ref;
};
var EnvironmentTest = exports.EnvironmentTest = function (ref, env) {
    return env.toConditionalReference(ref);
};
_opcodes.APPEND_OPCODES.add(51 /* Test */, function (vm, _ref16) {
    var _func = _ref16.op1;

    var stack = vm.stack;
    var operand = stack.pop();
    var func = vm.constants.getFunction(_func);
    stack.push(func(operand, vm.env));
});
var Assert = exports.Assert = function (_UpdatingOpcode) {
    _inherits(Assert, _UpdatingOpcode);

    function Assert(cache) {
        _classCallCheck(this, Assert);

        var _this = _possibleConstructorReturn(this, _UpdatingOpcode.call(this));

        _this.type = 'assert';
        _this.tag = cache.tag;
        _this.cache = cache;
        return _this;
    }

    Assert.prototype.evaluate = function evaluate(vm) {
        var cache = this.cache;

        if ((0, _reference.isModified)(cache.revalidate())) {
            vm.throw();
        }
    };

    Assert.prototype.toJSON = function toJSON() {
        var type = this.type,
            _guid = this._guid,
            cache = this.cache;

        var expected = void 0;
        try {
            expected = JSON.stringify(cache.peek());
        } catch (e) {
            expected = String(cache.peek());
        }
        return {
            args: [],
            details: { expected: expected },
            guid: _guid,
            type: type
        };
    };

    return Assert;
}(_opcodes.UpdatingOpcode);
var JumpIfNotModifiedOpcode = exports.JumpIfNotModifiedOpcode = function (_UpdatingOpcode2) {
    _inherits(JumpIfNotModifiedOpcode, _UpdatingOpcode2);

    function JumpIfNotModifiedOpcode(tag, target) {
        _classCallCheck(this, JumpIfNotModifiedOpcode);

        var _this2 = _possibleConstructorReturn(this, _UpdatingOpcode2.call(this));

        _this2.target = target;
        _this2.type = 'jump-if-not-modified';
        _this2.tag = tag;
        _this2.lastRevision = tag.value();
        return _this2;
    }

    JumpIfNotModifiedOpcode.prototype.evaluate = function evaluate(vm) {
        var tag = this.tag,
            target = this.target,
            lastRevision = this.lastRevision;

        if (!vm.alwaysRevalidate && tag.validate(lastRevision)) {
            vm.goto(target);
        }
    };

    JumpIfNotModifiedOpcode.prototype.didModify = function didModify() {
        this.lastRevision = this.tag.value();
    };

    JumpIfNotModifiedOpcode.prototype.toJSON = function toJSON() {
        return {
            args: [JSON.stringify(this.target.inspect())],
            guid: this._guid,
            type: this.type
        };
    };

    return JumpIfNotModifiedOpcode;
}(_opcodes.UpdatingOpcode);
var DidModifyOpcode = exports.DidModifyOpcode = function (_UpdatingOpcode3) {
    _inherits(DidModifyOpcode, _UpdatingOpcode3);

    function DidModifyOpcode(target) {
        _classCallCheck(this, DidModifyOpcode);

        var _this3 = _possibleConstructorReturn(this, _UpdatingOpcode3.call(this));

        _this3.target = target;
        _this3.type = 'did-modify';
        _this3.tag = _reference.CONSTANT_TAG;
        return _this3;
    }

    DidModifyOpcode.prototype.evaluate = function evaluate() {
        this.target.didModify();
    };

    return DidModifyOpcode;
}(_opcodes.UpdatingOpcode);
var LabelOpcode = exports.LabelOpcode = function () {
    function LabelOpcode(label) {
        _classCallCheck(this, LabelOpcode);

        this.tag = _reference.CONSTANT_TAG;
        this.type = 'label';
        this.label = null;
        this.prev = null;
        this.next = null;
        (0, _util.initializeGuid)(this);
        this.label = label;
    }

    LabelOpcode.prototype.evaluate = function evaluate() {};

    LabelOpcode.prototype.inspect = function inspect() {
        return this.label + ' [' + this._guid + ']';
    };

    LabelOpcode.prototype.toJSON = function toJSON() {
        return {
            args: [JSON.stringify(this.inspect())],
            guid: this._guid,
            type: this.type
        };
    };

    return LabelOpcode;
}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,