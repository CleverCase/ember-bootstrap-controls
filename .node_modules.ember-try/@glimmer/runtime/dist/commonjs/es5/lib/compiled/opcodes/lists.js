'use strict';

var _reference = require('@glimmer/reference');

var _opcodes = require('../../opcodes');

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}

var IterablePresenceReference = function () {
    function IterablePresenceReference(artifacts) {
        _classCallCheck(this, IterablePresenceReference);

        this.tag = artifacts.tag;
        this.artifacts = artifacts;
    }

    IterablePresenceReference.prototype.value = function value() {
        return !this.artifacts.isEmpty();
    };

    return IterablePresenceReference;
}();

_opcodes.APPEND_OPCODES.add(54 /* PutIterator */, function (vm) {
    var stack = vm.stack;
    var listRef = stack.pop();
    var key = stack.pop();
    var iterable = vm.env.iterableFor(listRef, key.value());
    var iterator = new _reference.ReferenceIterator(iterable);
    stack.push(iterator);
    stack.push(new IterablePresenceReference(iterator.artifacts));
});
_opcodes.APPEND_OPCODES.add(52 /* EnterList */, function (vm, _ref) {
    var relativeStart = _ref.op1;

    vm.enterList(relativeStart);
});
_opcodes.APPEND_OPCODES.add(53 /* ExitList */, function (vm) {
    return vm.exitList();
});
_opcodes.APPEND_OPCODES.add(55 /* Iterate */, function (vm, _ref2) {
    var breaks = _ref2.op1;

    var stack = vm.stack;
    var item = stack.peek().next();
    if (item) {
        var tryOpcode = vm.iterate(item.memo, item.value);
        vm.enterItem(item.key, tryOpcode);
    } else {
        vm.goto(breaks);
    }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9jb21waWxlZC9vcGNvZGVzL2xpc3RzLmpzIl0sIm5hbWVzIjpbIlJlZmVyZW5jZUl0ZXJhdG9yIiwiQVBQRU5EX09QQ09ERVMiLCJJdGVyYWJsZVByZXNlbmNlUmVmZXJlbmNlIiwiYXJ0aWZhY3RzIiwidGFnIiwidmFsdWUiLCJpc0VtcHR5IiwiYWRkIiwic3RhY2siLCJ2bSIsImxpc3RSZWYiLCJwb3AiLCJrZXkiLCJpdGVyYWJsZSIsImVudiIsIml0ZXJhYmxlRm9yIiwiaXRlcmF0b3IiLCJwdXNoIiwicmVsYXRpdmVTdGFydCIsIm9wMSIsImVudGVyTGlzdCIsImV4aXRMaXN0IiwiYnJlYWtzIiwiaXRlbSIsInBlZWsiLCJuZXh0IiwidHJ5T3Bjb2RlIiwiaXRlcmF0ZSIsIm1lbW8iLCJlbnRlckl0ZW0iLCJnb3RvIl0sIm1hcHBpbmdzIjoiOztBQUFBLEFBQVMsQUFBVCxBQUFrQyxBQUFsQzs7QUFDQSxBQUFTLEFBQVQsQUFBK0IsQUFBL0I7Ozs7Ozs7O0lBQ00sQSx3Q0FDRjt1Q0FBWSxBQUFaLFdBQXVCOzhCQUNuQjs7YUFBSyxBQUFMLE1BQVcsVUFBVSxBQUFyQixBQUNBO2FBQUssQUFBTCxZQUFpQixBQUFqQixBQUNIOzs7d0NBQ0QsQSx5QkFBUSxBQUNKO2VBQU8sQ0FBQyxLQUFLLEFBQUwsVUFBZSxBQUFmLEFBQVIsQUFDSDtBOzs7OztBQUVMLHdCQUFlLEFBQWYsSUFBbUIsQUFBbkIsR0FBc0IsQUFBdEIsbUJBQXlDLGNBQU0sQUFDM0M7UUFBSSxRQUFRLEdBQUcsQUFBZixBQUNBO1FBQUksVUFBVSxNQUFNLEFBQU4sQUFBZCxBQUNBO1FBQUksTUFBTSxNQUFNLEFBQU4sQUFBVixBQUNBO1FBQUksV0FBVyxHQUFHLEFBQUgsSUFBTyxBQUFQLFlBQW1CLEFBQW5CLFNBQTRCLElBQUksQUFBSixBQUE1QixBQUFmLEFBQ0E7UUFBSSxXQUFXLEFBQUksQUFBSixpQ0FBc0IsQUFBdEIsQUFBZixBQUNBO1VBQU0sQUFBTixLQUFXLEFBQVgsQUFDQTtVQUFNLEFBQU4sS0FBVyxJQUFJLEFBQUosMEJBQThCLFNBQVMsQUFBdkMsQUFBWCxBQUNIO0FBUkQ7QUFTQSx3QkFBZSxBQUFmLElBQW1CLEFBQW5CLEdBQXNCLEFBQXRCLGlCQUF1QyxVQUFDLEFBQUQsVUFBZ0M7UUFBcEIsQUFBb0IscUJBQXpCLEFBQXlCLEFBQ25FOztPQUFHLEFBQUgsVUFBYSxBQUFiLEFBQ0g7QUFGRDtBQUdBLHdCQUFlLEFBQWYsSUFBbUIsQUFBbkIsR0FBc0IsQUFBdEIsZ0JBQXNDLGNBQUE7V0FBTSxHQUFHLEFBQUgsQUFBTjtBQUF0QztBQUNBLHdCQUFlLEFBQWYsSUFBbUIsQUFBbkIsR0FBc0IsQUFBdEIsZUFBcUMsVUFBQyxBQUFELFdBQXlCO1FBQWIsQUFBYSxlQUFsQixBQUFrQixBQUMxRDs7UUFBSSxRQUFRLEdBQUcsQUFBZixBQUNBO1FBQUksT0FBTyxNQUFNLEFBQU4sT0FBYSxBQUFiLEFBQVgsQUFDQTtRQUFJLEFBQUosTUFBVSxBQUNOO1lBQUksWUFBWSxHQUFHLEFBQUgsUUFBVyxLQUFLLEFBQWhCLE1BQXNCLEtBQUssQUFBM0IsQUFBaEIsQUFDQTtXQUFHLEFBQUgsVUFBYSxLQUFLLEFBQWxCLEtBQXVCLEFBQXZCLEFBQ0g7QUFIRCxXQUdPLEFBQ0g7V0FBRyxBQUFILEtBQVEsQUFBUixBQUNIO0FBQ0o7QUFURCIsImZpbGUiOiJsaWIvY29tcGlsZWQvb3Bjb2Rlcy9saXN0cy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFJlZmVyZW5jZUl0ZXJhdG9yIH0gZnJvbSAnQGdsaW1tZXIvcmVmZXJlbmNlJztcbmltcG9ydCB7IEFQUEVORF9PUENPREVTIH0gZnJvbSAnLi4vLi4vb3Bjb2Rlcyc7XG5jbGFzcyBJdGVyYWJsZVByZXNlbmNlUmVmZXJlbmNlIHtcbiAgICBjb25zdHJ1Y3RvcihhcnRpZmFjdHMpIHtcbiAgICAgICAgdGhpcy50YWcgPSBhcnRpZmFjdHMudGFnO1xuICAgICAgICB0aGlzLmFydGlmYWN0cyA9IGFydGlmYWN0cztcbiAgICB9XG4gICAgdmFsdWUoKSB7XG4gICAgICAgIHJldHVybiAhdGhpcy5hcnRpZmFjdHMuaXNFbXB0eSgpO1xuICAgIH1cbn1cbkFQUEVORF9PUENPREVTLmFkZCg1NCAvKiBQdXRJdGVyYXRvciAqLywgdm0gPT4ge1xuICAgIGxldCBzdGFjayA9IHZtLnN0YWNrO1xuICAgIGxldCBsaXN0UmVmID0gc3RhY2sucG9wKCk7XG4gICAgbGV0IGtleSA9IHN0YWNrLnBvcCgpO1xuICAgIGxldCBpdGVyYWJsZSA9IHZtLmVudi5pdGVyYWJsZUZvcihsaXN0UmVmLCBrZXkudmFsdWUoKSk7XG4gICAgbGV0IGl0ZXJhdG9yID0gbmV3IFJlZmVyZW5jZUl0ZXJhdG9yKGl0ZXJhYmxlKTtcbiAgICBzdGFjay5wdXNoKGl0ZXJhdG9yKTtcbiAgICBzdGFjay5wdXNoKG5ldyBJdGVyYWJsZVByZXNlbmNlUmVmZXJlbmNlKGl0ZXJhdG9yLmFydGlmYWN0cykpO1xufSk7XG5BUFBFTkRfT1BDT0RFUy5hZGQoNTIgLyogRW50ZXJMaXN0ICovLCAodm0sIHsgb3AxOiByZWxhdGl2ZVN0YXJ0IH0pID0+IHtcbiAgICB2bS5lbnRlckxpc3QocmVsYXRpdmVTdGFydCk7XG59KTtcbkFQUEVORF9PUENPREVTLmFkZCg1MyAvKiBFeGl0TGlzdCAqLywgdm0gPT4gdm0uZXhpdExpc3QoKSk7XG5BUFBFTkRfT1BDT0RFUy5hZGQoNTUgLyogSXRlcmF0ZSAqLywgKHZtLCB7IG9wMTogYnJlYWtzIH0pID0+IHtcbiAgICBsZXQgc3RhY2sgPSB2bS5zdGFjaztcbiAgICBsZXQgaXRlbSA9IHN0YWNrLnBlZWsoKS5uZXh0KCk7XG4gICAgaWYgKGl0ZW0pIHtcbiAgICAgICAgbGV0IHRyeU9wY29kZSA9IHZtLml0ZXJhdGUoaXRlbS5tZW1vLCBpdGVtLnZhbHVlKTtcbiAgICAgICAgdm0uZW50ZXJJdGVtKGl0ZW0ua2V5LCB0cnlPcGNvZGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHZtLmdvdG8oYnJlYWtzKTtcbiAgICB9XG59KTsiXX0=