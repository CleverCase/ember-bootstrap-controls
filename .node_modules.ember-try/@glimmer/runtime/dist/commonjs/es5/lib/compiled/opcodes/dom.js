"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.PatchElementOpcode = exports.DynamicAttribute = exports.StaticAttribute = exports.UpdateModifierOpcode = exports.ComponentElementOperations = exports.SimpleElementOperations = undefined;

var _reference = require("@glimmer/reference");

var _opcodes = require("../../opcodes");

var _references = require("../../references");

var _vm = require("./vm");

function _defaults(obj, defaults) {
    var keys = Object.getOwnPropertyNames(defaults);for (var i = 0; i < keys.length; i++) {
        var key = keys[i];var value = Object.getOwnPropertyDescriptor(defaults, key);if (value && value.configurable && obj[key] === undefined) {
            Object.defineProperty(obj, key, value);
        }
    }return obj;
}

function _possibleConstructorReturn(self, call) {
    if (!self) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }return call && (typeof call === "object" || typeof call === "function") ? call : self;
}

function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass);
}

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}

_opcodes.APPEND_OPCODES.add(24 /* Text */, function (vm, _ref) {
    var text = _ref.op1;

    vm.elements().appendText(vm.constants.getString(text));
});
_opcodes.APPEND_OPCODES.add(25 /* Comment */, function (vm, _ref2) {
    var text = _ref2.op1;

    vm.elements().appendComment(vm.constants.getString(text));
});
_opcodes.APPEND_OPCODES.add(27 /* OpenElement */, function (vm, _ref3) {
    var tag = _ref3.op1;

    vm.elements().openElement(vm.constants.getString(tag));
});
_opcodes.APPEND_OPCODES.add(28 /* OpenElementWithOperations */, function (vm, _ref4) {
    var tag = _ref4.op1;

    var tagName = vm.constants.getString(tag);
    var operations = vm.stack.pop();
    vm.elements().openElement(tagName, operations);
});
_opcodes.APPEND_OPCODES.add(29 /* OpenDynamicElement */, function (vm) {
    var operations = vm.stack.pop();
    var tagName = vm.stack.pop().value();
    vm.elements().openElement(tagName, operations);
});
_opcodes.APPEND_OPCODES.add(36 /* PushRemoteElement */, function (vm) {
    var elementRef = vm.stack.pop();
    var nextSiblingRef = vm.stack.pop();
    var element = void 0;
    var nextSibling = void 0;
    if ((0, _reference.isConst)(elementRef)) {
        element = elementRef.value();
    } else {
        var cache = new _reference.ReferenceCache(elementRef);
        element = cache.peek();
        vm.updateWith(new _vm.Assert(cache));
    }
    if ((0, _reference.isConst)(nextSiblingRef)) {
        nextSibling = nextSiblingRef.value();
    } else {
        var _cache = new _reference.ReferenceCache(nextSiblingRef);
        nextSibling = _cache.peek();
        vm.updateWith(new _vm.Assert(_cache));
    }
    vm.elements().pushRemoteElement(element, nextSibling);
});
_opcodes.APPEND_OPCODES.add(37 /* PopRemoteElement */, function (vm) {
    return vm.elements().popRemoteElement();
});

var ClassList = function () {
    function ClassList() {
        _classCallCheck(this, ClassList);

        this.list = null;
        this.isConst = true;
    }

    ClassList.prototype.append = function append(reference) {
        var list = this.list,
            isConst = this.isConst;

        if (list === null) list = this.list = [];
        list.push(reference);
        this.isConst = isConst && (0, _reference.isConst)(reference);
    };

    ClassList.prototype.toReference = function toReference() {
        var list = this.list,
            isConst = this.isConst;

        if (!list) return _references.NULL_REFERENCE;
        if (isConst) return _references.PrimitiveReference.create(toClassName(list));
        return new ClassListReference(list);
    };

    return ClassList;
}();

var ClassListReference = function (_CachedReference) {
    _inherits(ClassListReference, _CachedReference);

    function ClassListReference(list) {
        _classCallCheck(this, ClassListReference);

        var _this = _possibleConstructorReturn(this, _CachedReference.call(this));

        _this.list = [];
        _this.tag = (0, _reference.combineTagged)(list);
        _this.list = list;
        return _this;
    }

    ClassListReference.prototype.compute = function compute() {
        return toClassName(this.list);
    };

    return ClassListReference;
}(_reference.CachedReference);

function toClassName(list) {
    var ret = [];
    for (var i = 0; i < list.length; i++) {
        var value = list[i].value();
        if (value !== false && value !== null && value !== undefined) ret.push(value);
    }
    return ret.length === 0 ? null : ret.join(' ');
}
var SimpleElementOperations = exports.SimpleElementOperations = function () {
    function SimpleElementOperations(env) {
        _classCallCheck(this, SimpleElementOperations);

        this.env = env;
        this.opcodes = null;
        this.classList = null;
    }

    SimpleElementOperations.prototype.addStaticAttribute = function addStaticAttribute(element, name, value) {
        if (name === 'class') {
            this.addClass(_references.PrimitiveReference.create(value));
        } else {
            this.env.getAppendOperations().setAttribute(element, name, value);
        }
    };

    SimpleElementOperations.prototype.addStaticAttributeNS = function addStaticAttributeNS(element, namespace, name, value) {
        this.env.getAppendOperations().setAttribute(element, name, value, namespace);
    };

    SimpleElementOperations.prototype.addDynamicAttribute = function addDynamicAttribute(element, name, reference, isTrusting) {
        if (name === 'class') {
            this.addClass(reference);
        } else {
            var attributeManager = this.env.attributeFor(element, name, isTrusting);
            var attribute = new DynamicAttribute(element, attributeManager, name, reference);
            this.addAttribute(attribute);
        }
    };

    SimpleElementOperations.prototype.addDynamicAttributeNS = function addDynamicAttributeNS(element, namespace, name, reference, isTrusting) {
        var attributeManager = this.env.attributeFor(element, name, isTrusting, namespace);
        var nsAttribute = new DynamicAttribute(element, attributeManager, name, reference, namespace);
        this.addAttribute(nsAttribute);
    };

    SimpleElementOperations.prototype.flush = function flush(element, vm) {
        var env = vm.env;
        var opcodes = this.opcodes,
            classList = this.classList;

        for (var i = 0; opcodes && i < opcodes.length; i++) {
            vm.updateWith(opcodes[i]);
        }
        if (classList) {
            var attributeManager = env.attributeFor(element, 'class', false);
            var attribute = new DynamicAttribute(element, attributeManager, 'class', classList.toReference());
            var opcode = attribute.flush(env);
            if (opcode) {
                vm.updateWith(opcode);
            }
        }
        this.opcodes = null;
        this.classList = null;
    };

    SimpleElementOperations.prototype.addClass = function addClass(reference) {
        var classList = this.classList;

        if (!classList) {
            classList = this.classList = new ClassList();
        }
        classList.append(reference);
    };

    SimpleElementOperations.prototype.addAttribute = function addAttribute(attribute) {
        var opcode = attribute.flush(this.env);
        if (opcode) {
            var opcodes = this.opcodes;

            if (!opcodes) {
                opcodes = this.opcodes = [];
            }
            opcodes.push(opcode);
        }
    };

    return SimpleElementOperations;
}();
var ComponentElementOperations = exports.ComponentElementOperations = function () {
    function ComponentElementOperations(env) {
        _classCallCheck(this, ComponentElementOperations);

        this.env = env;
        this.attributeNames = null;
        this.attributes = null;
        this.classList = null;
    }

    ComponentElementOperations.prototype.addStaticAttribute = function addStaticAttribute(element, name, value) {
        if (name === 'class') {
            this.addClass(_references.PrimitiveReference.create(value));
        } else if (this.shouldAddAttribute(name)) {
            this.addAttribute(name, new StaticAttribute(element, name, value));
        }
    };

    ComponentElementOperations.prototype.addStaticAttributeNS = function addStaticAttributeNS(element, namespace, name, value) {
        if (this.shouldAddAttribute(name)) {
            this.addAttribute(name, new StaticAttribute(element, name, value, namespace));
        }
    };

    ComponentElementOperations.prototype.addDynamicAttribute = function addDynamicAttribute(element, name, reference, isTrusting) {
        if (name === 'class') {
            this.addClass(reference);
        } else if (this.shouldAddAttribute(name)) {
            var attributeManager = this.env.attributeFor(element, name, isTrusting);
            var attribute = new DynamicAttribute(element, attributeManager, name, reference);
            this.addAttribute(name, attribute);
        }
    };

    ComponentElementOperations.prototype.addDynamicAttributeNS = function addDynamicAttributeNS(element, namespace, name, reference, isTrusting) {
        if (this.shouldAddAttribute(name)) {
            var attributeManager = this.env.attributeFor(element, name, isTrusting, namespace);
            var nsAttribute = new DynamicAttribute(element, attributeManager, name, reference, namespace);
            this.addAttribute(name, nsAttribute);
        }
    };

    ComponentElementOperations.prototype.flush = function flush(element, vm) {
        var env = this.env;
        var attributes = this.attributes,
            classList = this.classList;

        for (var i = 0; attributes && i < attributes.length; i++) {
            var opcode = attributes[i].flush(env);
            if (opcode) {
                vm.updateWith(opcode);
            }
        }
        if (classList) {
            var attributeManager = env.attributeFor(element, 'class', false);
            var attribute = new DynamicAttribute(element, attributeManager, 'class', classList.toReference());
            var _opcode = attribute.flush(env);
            if (_opcode) {
                vm.updateWith(_opcode);
            }
        }
    };

    ComponentElementOperations.prototype.shouldAddAttribute = function shouldAddAttribute(name) {
        return !this.attributeNames || this.attributeNames.indexOf(name) === -1;
    };

    ComponentElementOperations.prototype.addClass = function addClass(reference) {
        var classList = this.classList;

        if (!classList) {
            classList = this.classList = new ClassList();
        }
        classList.append(reference);
    };

    ComponentElementOperations.prototype.addAttribute = function addAttribute(name, attribute) {
        var attributeNames = this.attributeNames,
            attributes = this.attributes;

        if (!attributeNames) {
            attributeNames = this.attributeNames = [];
            attributes = this.attributes = [];
        }
        attributeNames.push(name);
        attributes.push(attribute);
    };

    return ComponentElementOperations;
}();
_opcodes.APPEND_OPCODES.add(33 /* FlushElement */, function (vm) {
    var stack = vm.elements();
    var action = 'FlushElementOpcode#evaluate';
    stack.expectOperations(action).flush(stack.expectConstructing(action), vm);
    stack.flushElement();
});
_opcodes.APPEND_OPCODES.add(34 /* CloseElement */, function (vm) {
    return vm.elements().closeElement();
});
_opcodes.APPEND_OPCODES.add(30 /* StaticAttr */, function (vm, _ref5) {
    var _name = _ref5.op1,
        _value = _ref5.op2,
        _namespace = _ref5.op3;

    var name = vm.constants.getString(_name);
    var value = vm.constants.getString(_value);
    if (_namespace) {
        var namespace = vm.constants.getString(_namespace);
        vm.elements().setStaticAttributeNS(namespace, name, value);
    } else {
        vm.elements().setStaticAttribute(name, value);
    }
});
_opcodes.APPEND_OPCODES.add(35 /* Modifier */, function (vm, _ref6) {
    var _manager = _ref6.op1;

    var manager = vm.constants.getOther(_manager);
    var stack = vm.stack;
    var args = stack.pop();
    var tag = args.tag;

    var _vm$elements = vm.elements(),
        element = _vm$elements.constructing,
        updateOperations = _vm$elements.updateOperations;

    var dynamicScope = vm.dynamicScope();
    var modifier = manager.create(element, args, dynamicScope, updateOperations);
    args.clear();
    vm.env.scheduleInstallModifier(modifier, manager);
    var destructor = manager.getDestructor(modifier);
    if (destructor) {
        vm.newDestroyable(destructor);
    }
    vm.updateWith(new UpdateModifierOpcode(tag, manager, modifier));
});
var UpdateModifierOpcode = exports.UpdateModifierOpcode = function (_UpdatingOpcode) {
    _inherits(UpdateModifierOpcode, _UpdatingOpcode);

    function UpdateModifierOpcode(tag, manager, modifier) {
        _classCallCheck(this, UpdateModifierOpcode);

        var _this2 = _possibleConstructorReturn(this, _UpdatingOpcode.call(this));

        _this2.tag = tag;
        _this2.manager = manager;
        _this2.modifier = modifier;
        _this2.type = 'update-modifier';
        _this2.lastUpdated = tag.value();
        return _this2;
    }

    UpdateModifierOpcode.prototype.evaluate = function evaluate(vm) {
        var manager = this.manager,
            modifier = this.modifier,
            tag = this.tag,
            lastUpdated = this.lastUpdated;

        if (!tag.validate(lastUpdated)) {
            vm.env.scheduleUpdateModifier(modifier, manager);
            this.lastUpdated = tag.value();
        }
    };

    UpdateModifierOpcode.prototype.toJSON = function toJSON() {
        return {
            guid: this._guid,
            type: this.type
        };
    };

    return UpdateModifierOpcode;
}(_opcodes.UpdatingOpcode);
var StaticAttribute = exports.StaticAttribute = function () {
    function StaticAttribute(element, name, value, namespace) {
        _classCallCheck(this, StaticAttribute);

        this.element = element;
        this.name = name;
        this.value = value;
        this.namespace = namespace;
    }

    StaticAttribute.prototype.flush = function flush(env) {
        env.getAppendOperations().setAttribute(this.element, this.name, this.value, this.namespace);
        return null;
    };

    return StaticAttribute;
}();
var DynamicAttribute = exports.DynamicAttribute = function () {
    function DynamicAttribute(element, attributeManager, name, reference, namespace) {
        _classCallCheck(this, DynamicAttribute);

        this.element = element;
        this.attributeManager = attributeManager;
        this.name = name;
        this.reference = reference;
        this.namespace = namespace;
        this.cache = null;
        this.tag = reference.tag;
    }

    DynamicAttribute.prototype.patch = function patch(env) {
        var element = this.element,
            cache = this.cache;

        var value = cache.revalidate();
        if ((0, _reference.isModified)(value)) {
            this.attributeManager.updateAttribute(env, element, value, this.namespace);
        }
    };

    DynamicAttribute.prototype.flush = function flush(env) {
        var reference = this.reference,
            element = this.element;

        if ((0, _reference.isConst)(reference)) {
            var value = reference.value();
            this.attributeManager.setAttribute(env, element, value, this.namespace);
            return null;
        } else {
            var cache = this.cache = new _reference.ReferenceCache(reference);
            var _value2 = cache.peek();
            this.attributeManager.setAttribute(env, element, _value2, this.namespace);
            return new PatchElementOpcode(this);
        }
    };

    DynamicAttribute.prototype.toJSON = function toJSON() {
        var element = this.element,
            namespace = this.namespace,
            name = this.name,
            cache = this.cache;

        var formattedElement = formatElement(element);
        var lastValue = cache.peek();
        if (namespace) {
            return {
                element: formattedElement,
                lastValue: lastValue,
                name: name,
                namespace: namespace,
                type: 'attribute'
            };
        }
        return {
            element: formattedElement,
            lastValue: lastValue,
            name: name,
            namespace: namespace === undefined ? null : namespace,
            type: 'attribute'
        };
    };

    return DynamicAttribute;
}();
function formatElement(element) {
    return JSON.stringify('<' + element.tagName.toLowerCase() + ' />');
}
_opcodes.APPEND_OPCODES.add(32 /* DynamicAttrNS */, function (vm, _ref7) {
    var _name = _ref7.op1,
        _namespace = _ref7.op2,
        trusting = _ref7.op3;

    var name = vm.constants.getString(_name);
    var namespace = vm.constants.getString(_namespace);
    var reference = vm.stack.pop();
    vm.elements().setDynamicAttributeNS(namespace, name, reference, !!trusting);
});
_opcodes.APPEND_OPCODES.add(31 /* DynamicAttr */, function (vm, _ref8) {
    var _name = _ref8.op1,
        trusting = _ref8.op2;

    var name = vm.constants.getString(_name);
    var reference = vm.stack.pop();
    vm.elements().setDynamicAttribute(name, reference, !!trusting);
});
var PatchElementOpcode = exports.PatchElementOpcode = function (_UpdatingOpcode2) {
    _inherits(PatchElementOpcode, _UpdatingOpcode2);

    function PatchElementOpcode(operation) {
        _classCallCheck(this, PatchElementOpcode);

        var _this3 = _possibleConstructorReturn(this, _UpdatingOpcode2.call(this));

        _this3.type = 'patch-element';
        _this3.tag = operation.tag;
        _this3.operation = operation;
        return _this3;
    }

    PatchElementOpcode.prototype.evaluate = function evaluate(vm) {
        this.operation.patch(vm.env);
    };

    PatchElementOpcode.prototype.toJSON = function toJSON() {
        var _guid = this._guid,
            type = this.type,
            operation = this.operation;

        return {
            details: operation.toJSON(),
            guid: _guid,
            type: type
        };
    };

    return PatchElementOpcode;
}(_opcodes.UpdatingOpcode);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,