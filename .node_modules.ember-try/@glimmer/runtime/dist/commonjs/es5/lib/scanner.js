'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _util = require('@glimmer/util');

var _wireFormat = require('@glimmer/wire-format');

var WireFormat = _interopRequireWildcard(_wireFormat);

var _clientSide = require('./syntax/client-side');

var ClientSide = _interopRequireWildcard(_clientSide);

var _compilableTemplate = require('./syntax/compilable-template');

var _compilableTemplate2 = _interopRequireDefault(_compilableTemplate);

var _functions = require('./syntax/functions');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}

var Ops = WireFormat.Ops;

var Scanner = function () {
    function Scanner(block, env) {
        _classCallCheck(this, Scanner);

        this.block = block;
        this.env = env;
    }

    Scanner.prototype.scanEntryPoint = function scanEntryPoint(meta) {
        var block = this.block;
        var statements = block.statements,
            symbols = block.symbols,
            hasEval = block.hasEval;

        return new _compilableTemplate2.default(statements, { meta: meta, symbols: symbols, hasEval: hasEval });
    };

    Scanner.prototype.scanBlock = function scanBlock(meta) {
        var block = this.block;
        var statements = block.statements;

        return new _compilableTemplate2.default(statements, { meta: meta, parameters: _util.EMPTY_ARRAY });
    };

    Scanner.prototype.scanLayout = function scanLayout(meta, attrs, componentName) {
        var block = this.block;
        var statements = block.statements,
            symbols = block.symbols,
            hasEval = block.hasEval;

        var symbolTable = { meta: meta, hasEval: hasEval, symbols: symbols };
        var newStatements = [];
        var toplevel = void 0;
        var inTopLevel = false;
        for (var i = 0; i < statements.length; i++) {
            var statement = statements[i];
            if (WireFormat.Statements.isComponent(statement)) {
                var tagName = statement[1];
                if (!this.env.hasComponentDefinition(tagName, meta.templateMeta)) {
                    if (toplevel !== undefined) {
                        newStatements.push([Ops.OpenElement, tagName]);
                    } else {
                        toplevel = tagName;
                        decorateTopLevelElement(tagName, symbols, attrs, newStatements);
                    }
                    addFallback(statement, newStatements);
                } else {
                    if (toplevel === undefined && tagName === componentName) {
                        toplevel = tagName;
                        decorateTopLevelElement(tagName, symbols, attrs, newStatements);
                        addFallback(statement, newStatements);
                    } else {
                        newStatements.push(statement);
                    }
                }
            } else {
                if (toplevel === undefined && WireFormat.Statements.isOpenElement(statement)) {
                    toplevel = statement[1];
                    inTopLevel = true;
                    decorateTopLevelElement(toplevel, symbols, attrs, newStatements);
                } else {
                    if (inTopLevel) {
                        if (WireFormat.Statements.isFlushElement(statement)) {
                            inTopLevel = false;
                        } else if (WireFormat.Statements.isModifier(statement)) {
                            throw Error('Found modifier "' + statement[1] + '" on the top-level element of "' + componentName + '". Modifiers cannot be on the top-level element');
                        }
                    }
                    newStatements.push(statement);
                }
            }
        }
        newStatements.push([Ops.ClientSideStatement, ClientSide.Ops.DidRenderLayout]);
        return new _compilableTemplate2.default(newStatements, symbolTable);
    };

    return Scanner;
}();

exports.default = Scanner;


function addFallback(statement, buffer) {
    var attrs = statement[2],
        block = statement[4];

    for (var i = 0; i < attrs.length; i++) {
        buffer.push(attrs[i]);
    }
    buffer.push([Ops.FlushElement]);
    if (block) {
        var statements = block.statements;

        for (var _i = 0; _i < statements.length; _i++) {
            buffer.push(statements[_i]);
        }
    }
    buffer.push([Ops.CloseElement]);
}
function decorateTopLevelElement(tagName, symbols, attrs, buffer) {
    var attrsSymbol = symbols.push(_functions.ATTRS_BLOCK);
    buffer.push([Ops.ClientSideStatement, ClientSide.Ops.OpenComponentElement, tagName]);
    buffer.push([Ops.ClientSideStatement, ClientSide.Ops.DidCreateElement]);
    buffer.push([Ops.Yield, attrsSymbol, _util.EMPTY_ARRAY]);
    buffer.push.apply(buffer, attrs);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,