"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.isSafeString = isSafeString;
exports.isNode = isNode;
exports.isString = isString;
exports.cautiousInsert = cautiousInsert;
exports.trustingInsert = trustingInsert;

var _util = require("@glimmer/util");

var _bounds = require("./bounds");

function _defaults(obj, defaults) {
    var keys = Object.getOwnPropertyNames(defaults);for (var i = 0; i < keys.length; i++) {
        var key = keys[i];var value = Object.getOwnPropertyDescriptor(defaults, key);if (value && value.configurable && obj[key] === undefined) {
            Object.defineProperty(obj, key, value);
        }
    }return obj;
}

function _possibleConstructorReturn(self, call) {
    if (!self) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }return call && (typeof call === "object" || typeof call === "function") ? call : self;
}

function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass);
}

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}

function isSafeString(value) {
    return typeof value === 'object' && value !== null && typeof value.toHTML === 'function';
}
function isNode(value) {
    return typeof value === 'object' && value !== null && typeof value.nodeType === 'number';
}
function isString(value) {
    return typeof value === 'string';
}

var Upsert = function Upsert(bounds) {
    _classCallCheck(this, Upsert);

    this.bounds = bounds;
};

exports.default = Upsert;
function cautiousInsert(dom, cursor, value) {
    if (isString(value)) {
        return TextUpsert.insert(dom, cursor, value);
    }
    if (isSafeString(value)) {
        return SafeStringUpsert.insert(dom, cursor, value);
    }
    if (isNode(value)) {
        return NodeUpsert.insert(dom, cursor, value);
    }
    throw (0, _util.unreachable)();
}
function trustingInsert(dom, cursor, value) {
    if (isString(value)) {
        return HTMLUpsert.insert(dom, cursor, value);
    }
    if (isNode(value)) {
        return NodeUpsert.insert(dom, cursor, value);
    }
    throw (0, _util.unreachable)();
}

var TextUpsert = function (_Upsert) {
    _inherits(TextUpsert, _Upsert);

    TextUpsert.insert = function insert(dom, cursor, value) {
        var textNode = dom.createTextNode(value);
        dom.insertBefore(cursor.element, textNode, cursor.nextSibling);
        var bounds = new _bounds.SingleNodeBounds(cursor.element, textNode);
        return new TextUpsert(bounds, textNode);
    };

    function TextUpsert(bounds, textNode) {
        _classCallCheck(this, TextUpsert);

        var _this = _possibleConstructorReturn(this, _Upsert.call(this, bounds));

        _this.textNode = textNode;
        return _this;
    }

    TextUpsert.prototype.update = function update(_dom, value) {
        if (isString(value)) {
            var textNode = this.textNode;

            textNode.nodeValue = value;
            return true;
        } else {
            return false;
        }
    };

    return TextUpsert;
}(Upsert);

var HTMLUpsert = function (_Upsert2) {
    _inherits(HTMLUpsert, _Upsert2);

    function HTMLUpsert() {
        _classCallCheck(this, HTMLUpsert);

        return _possibleConstructorReturn(this, _Upsert2.apply(this, arguments));
    }

    HTMLUpsert.insert = function insert(dom, cursor, value) {
        var bounds = dom.insertHTMLBefore(cursor.element, cursor.nextSibling, value);
        return new HTMLUpsert(bounds);
    };

    HTMLUpsert.prototype.update = function update(dom, value) {
        if (isString(value)) {
            var bounds = this.bounds;

            var parentElement = bounds.parentElement();
            var nextSibling = (0, _bounds.clear)(bounds);
            this.bounds = dom.insertHTMLBefore(parentElement, nextSibling, value);
            return true;
        } else {
            return false;
        }
    };

    return HTMLUpsert;
}(Upsert);

var SafeStringUpsert = function (_Upsert3) {
    _inherits(SafeStringUpsert, _Upsert3);

    function SafeStringUpsert(bounds, lastStringValue) {
        _classCallCheck(this, SafeStringUpsert);

        var _this3 = _possibleConstructorReturn(this, _Upsert3.call(this, bounds));

        _this3.lastStringValue = lastStringValue;
        return _this3;
    }

    SafeStringUpsert.insert = function insert(dom, cursor, value) {
        var stringValue = value.toHTML();
        var bounds = dom.insertHTMLBefore(cursor.element, cursor.nextSibling, stringValue);
        return new SafeStringUpsert(bounds, stringValue);
    };

    SafeStringUpsert.prototype.update = function update(dom, value) {
        if (isSafeString(value)) {
            var stringValue = value.toHTML();
            if (stringValue !== this.lastStringValue) {
                var bounds = this.bounds;

                var parentElement = bounds.parentElement();
                var nextSibling = (0, _bounds.clear)(bounds);
                this.bounds = dom.insertHTMLBefore(parentElement, nextSibling, stringValue);
                this.lastStringValue = stringValue;
            }
            return true;
        } else {
            return false;
        }
    };

    return SafeStringUpsert;
}(Upsert);

var NodeUpsert = function (_Upsert4) {
    _inherits(NodeUpsert, _Upsert4);

    function NodeUpsert() {
        _classCallCheck(this, NodeUpsert);

        return _possibleConstructorReturn(this, _Upsert4.apply(this, arguments));
    }

    NodeUpsert.insert = function insert(dom, cursor, node) {
        dom.insertBefore(cursor.element, node, cursor.nextSibling);
        return new NodeUpsert((0, _bounds.single)(cursor.element, node));
    };

    NodeUpsert.prototype.update = function update(dom, value) {
        if (isNode(value)) {
            var bounds = this.bounds;

            var parentElement = bounds.parentElement();
            var nextSibling = (0, _bounds.clear)(bounds);
            this.bounds = dom.insertNodeBefore(parentElement, value, nextSibling);
            return true;
        } else {
            return false;
        }
    };

    return NodeUpsert;
}(Upsert);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,