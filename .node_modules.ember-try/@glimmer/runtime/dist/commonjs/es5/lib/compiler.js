"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.ComponentBuilder = undefined;
exports.compileLayout = compileLayout;
exports.builder = builder;

var _blocks = require("./compiled/blocks");

var _wireFormat = require("@glimmer/wire-format");

var _opcodes = require("./opcodes");

var _functions = require("./syntax/functions");

var _clientSide = require("./syntax/client-side");

var ClientSide = _interopRequireWildcard(_clientSide);

var _builder = require("./compiled/opcodes/builder");

var _builder2 = _interopRequireDefault(_builder);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var _createClass = function () {
    function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
        }
    }return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
    };
}();

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}

function compileLayout(compilable, env) {
    var builder = new ComponentLayoutBuilder(env);
    compilable.compile(builder);
    return builder.compile();
}

var ComponentLayoutBuilder = function () {
    function ComponentLayoutBuilder(env) {
        _classCallCheck(this, ComponentLayoutBuilder);

        this.env = env;
    }

    ComponentLayoutBuilder.prototype.wrapLayout = function wrapLayout(layout) {
        this.inner = new WrappedBuilder(this.env, layout);
    };

    ComponentLayoutBuilder.prototype.fromLayout = function fromLayout(componentName, layout) {
        this.inner = new UnwrappedBuilder(this.env, componentName, layout);
    };

    ComponentLayoutBuilder.prototype.compile = function compile() {
        return this.inner.compile();
    };

    _createClass(ComponentLayoutBuilder, [{
        key: 'tag',
        get: function () {
            return this.inner.tag;
        }
    }, {
        key: 'attrs',
        get: function () {
            return this.inner.attrs;
        }
    }]);

    return ComponentLayoutBuilder;
}();

var WrappedBuilder = function () {
    function WrappedBuilder(env, layout) {
        _classCallCheck(this, WrappedBuilder);

        this.env = env;
        this.layout = layout;
        this.tag = new ComponentTagBuilder();
        this.attrs = new ComponentAttrsBuilder();
    }

    WrappedBuilder.prototype.compile = function compile() {
        //========DYNAMIC
        //        PutValue(TagExpr)
        //        Test
        //        JumpUnless(BODY)
        //        OpenDynamicPrimitiveElement
        //        DidCreateElement
        //        ...attr statements...
        //        FlushElement
        // BODY:  Noop
        //        ...body statements...
        //        PutValue(TagExpr)
        //        Test
        //        JumpUnless(END)
        //        CloseElement
        // END:   Noop
        //        DidRenderLayout
        //        Exit
        //
        //========STATIC
        //        OpenPrimitiveElementOpcode
        //        DidCreateElement
        //        ...attr statements...
        //        FlushElement
        //        ...body statements...
        //        CloseElement
        //        DidRenderLayout
        //        Exit
        var env = this.env,
            layout = this.layout;

        var meta = { templateMeta: layout.meta, symbols: layout.symbols, asPartial: false };
        var dynamicTag = this.tag.getDynamic();
        var staticTag = this.tag.getStatic();
        var b = builder(env, meta);
        b.startLabels();
        if (dynamicTag) {
            b.fetch(_opcodes.Register.s1);
            (0, _functions.expr)(dynamicTag, b);
            b.dup();
            b.load(_opcodes.Register.s1);
            b.test('simple');
            b.jumpUnless('BODY');
            b.fetch(_opcodes.Register.s1);
            b.pushComponentOperations();
            b.openDynamicElement();
        } else if (staticTag) {
            b.pushComponentOperations();
            b.openElementWithOperations(staticTag);
        }
        if (dynamicTag || staticTag) {
            b.didCreateElement(_opcodes.Register.s0);
            var attrs = this.attrs.buffer;
            for (var i = 0; i < attrs.length; i++) {
                (0, _functions.compileStatement)(attrs[i], b);
            }
            b.flushElement();
        }
        b.label('BODY');
        b.invokeStatic(layout.asBlock());
        if (dynamicTag) {
            b.fetch(_opcodes.Register.s1);
            b.test('simple');
            b.jumpUnless('END');
            b.closeElement();
        } else if (staticTag) {
            b.closeElement();
        }
        b.label('END');
        b.didRenderLayout(_opcodes.Register.s0);
        if (dynamicTag) {
            b.load(_opcodes.Register.s1);
        }
        b.stopLabels();
        var start = b.start;
        var end = b.finalize();
        if (false) {
            (0, _opcodes.debugSlice)(env, env.program.heap.getaddr(start), env.program.heap.getaddr(end));
        }
        return new _blocks.CompiledDynamicTemplate(start, {
            meta: meta,
            hasEval: layout.hasEval,
            symbols: layout.symbols.concat([_functions.ATTRS_BLOCK])
        });
    };

    return WrappedBuilder;
}();

var UnwrappedBuilder = function () {
    function UnwrappedBuilder(env, componentName, layout) {
        _classCallCheck(this, UnwrappedBuilder);

        this.env = env;
        this.componentName = componentName;
        this.layout = layout;
        this.attrs = new ComponentAttrsBuilder();
    }

    UnwrappedBuilder.prototype.compile = function compile() {
        var env = this.env,
            layout = this.layout;

        return layout.asLayout(this.componentName, this.attrs.buffer).compileDynamic(env);
    };

    _createClass(UnwrappedBuilder, [{
        key: 'tag',
        get: function () {
            throw new Error('BUG: Cannot call `tag` on an UnwrappedBuilder');
        }
    }]);

    return UnwrappedBuilder;
}();

var ComponentTagBuilder = function () {
    function ComponentTagBuilder() {
        _classCallCheck(this, ComponentTagBuilder);

        this.isDynamic = null;
        this.isStatic = null;
        this.staticTagName = null;
        this.dynamicTagName = null;
    }

    ComponentTagBuilder.prototype.getDynamic = function getDynamic() {
        if (this.isDynamic) {
            return this.dynamicTagName;
        }
    };

    ComponentTagBuilder.prototype.getStatic = function getStatic() {
        if (this.isStatic) {
            return this.staticTagName;
        }
    };

    ComponentTagBuilder.prototype.static = function _static(tagName) {
        this.isStatic = true;
        this.staticTagName = tagName;
    };

    ComponentTagBuilder.prototype.dynamic = function dynamic(tagName) {
        this.isDynamic = true;
        this.dynamicTagName = [_wireFormat.Ops.ClientSideExpression, ClientSide.Ops.FunctionExpression, tagName];
    };

    return ComponentTagBuilder;
}();

var ComponentAttrsBuilder = function () {
    function ComponentAttrsBuilder() {
        _classCallCheck(this, ComponentAttrsBuilder);

        this.buffer = [];
    }

    ComponentAttrsBuilder.prototype.static = function _static(name, value) {
        this.buffer.push([_wireFormat.Ops.StaticAttr, name, value, null]);
    };

    ComponentAttrsBuilder.prototype.dynamic = function dynamic(name, value) {
        this.buffer.push([_wireFormat.Ops.DynamicAttr, name, [_wireFormat.Ops.ClientSideExpression, ClientSide.Ops.FunctionExpression, value], null]);
    };

    return ComponentAttrsBuilder;
}();

var ComponentBuilder = exports.ComponentBuilder = function () {
    function ComponentBuilder(builder) {
        _classCallCheck(this, ComponentBuilder);

        this.builder = builder;
        this.env = builder.env;
    }

    ComponentBuilder.prototype.static = function _static(definition, args) {
        var params = args[0],
            hash = args[1],
            _default = args[2],
            inverse = args[3];
        var builder = this.builder;

        builder.pushComponentManager(definition);
        builder.invokeComponent(null, params, hash, _default, inverse);
    };

    ComponentBuilder.prototype.dynamic = function dynamic(definitionArgs, getDefinition, args) {
        var params = args[0],
            hash = args[1],
            block = args[2],
            inverse = args[3];
        var builder = this.builder;

        if (!definitionArgs || definitionArgs.length === 0) {
            throw new Error("Dynamic syntax without an argument");
        }
        var meta = this.builder.meta.templateMeta;
        function helper(vm, a) {
            return getDefinition(vm, a, meta);
        }
        builder.startLabels();
        builder.pushFrame();
        builder.returnTo('END');
        builder.compileArgs(definitionArgs[0], definitionArgs[1], true);
        builder.helper(helper);
        builder.dup();
        builder.test('simple');
        builder.enter(2);
        builder.jumpUnless('ELSE');
        builder.pushDynamicComponentManager();
        builder.invokeComponent(null, params, hash, block, inverse);
        builder.label('ELSE');
        builder.exit();
        builder.return();
        builder.label('END');
        builder.popFrame();
        builder.stopLabels();
    };

    return ComponentBuilder;
}();
function builder(env, meta) {
    return new _builder2.default(env, meta);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,