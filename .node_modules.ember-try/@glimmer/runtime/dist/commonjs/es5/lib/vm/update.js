"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.ListBlockOpcode = exports.TryOpcode = exports.BlockOpcode = undefined;

var _bounds = require("../bounds");

var _builder = require("../builder");

var _util = require("@glimmer/util");

var _reference = require("@glimmer/reference");

var _opcodes = require("../opcodes");

var _append = require("./append");

var _append2 = _interopRequireDefault(_append);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defaults(obj, defaults) {
    var keys = Object.getOwnPropertyNames(defaults);for (var i = 0; i < keys.length; i++) {
        var key = keys[i];var value = Object.getOwnPropertyDescriptor(defaults, key);if (value && value.configurable && obj[key] === undefined) {
            Object.defineProperty(obj, key, value);
        }
    }return obj;
}

var _createClass = function () {
    function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
        }
    }return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
    };
}();

function _possibleConstructorReturn(self, call) {
    if (!self) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }return call && (typeof call === "object" || typeof call === "function") ? call : self;
}

function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass);
}

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}

var UpdatingVM = function () {
    function UpdatingVM(env, _ref) {
        var _ref$alwaysRevalidate = _ref.alwaysRevalidate,
            alwaysRevalidate = _ref$alwaysRevalidate === undefined ? false : _ref$alwaysRevalidate;

        _classCallCheck(this, UpdatingVM);

        this.frameStack = new _util.Stack();
        this.env = env;
        this.constants = env.program.constants;
        this.dom = env.getDOM();
        this.alwaysRevalidate = alwaysRevalidate;
    }

    UpdatingVM.prototype.execute = function execute(opcodes, handler) {
        var frameStack = this.frameStack;

        this.try(opcodes, handler);
        while (true) {
            if (frameStack.isEmpty()) break;
            var opcode = this.frame.nextStatement();
            if (opcode === null) {
                this.frameStack.pop();
                continue;
            }
            opcode.evaluate(this);
        }
    };

    UpdatingVM.prototype.goto = function goto(op) {
        this.frame.goto(op);
    };

    UpdatingVM.prototype.try = function _try(ops, handler) {
        this.frameStack.push(new UpdatingVMFrame(this, ops, handler));
    };

    UpdatingVM.prototype.throw = function _throw() {
        this.frame.handleException();
        this.frameStack.pop();
    };

    UpdatingVM.prototype.evaluateOpcode = function evaluateOpcode(opcode) {
        opcode.evaluate(this);
    };

    _createClass(UpdatingVM, [{
        key: 'frame',
        get: function () {
            return this.frameStack.current;
        }
    }]);

    return UpdatingVM;
}();

exports.default = UpdatingVM;
var BlockOpcode = exports.BlockOpcode = function (_UpdatingOpcode) {
    _inherits(BlockOpcode, _UpdatingOpcode);

    function BlockOpcode(start, state, bounds, children) {
        _classCallCheck(this, BlockOpcode);

        var _this = _possibleConstructorReturn(this, _UpdatingOpcode.call(this));

        _this.start = start;
        _this.type = "block";
        _this.next = null;
        _this.prev = null;
        var env = state.env,
            scope = state.scope,
            dynamicScope = state.dynamicScope,
            stack = state.stack;

        _this.children = children;
        _this.env = env;
        _this.scope = scope;
        _this.dynamicScope = dynamicScope;
        _this.stack = stack;
        _this.bounds = bounds;
        return _this;
    }

    BlockOpcode.prototype.parentElement = function parentElement() {
        return this.bounds.parentElement();
    };

    BlockOpcode.prototype.firstNode = function firstNode() {
        return this.bounds.firstNode();
    };

    BlockOpcode.prototype.lastNode = function lastNode() {
        return this.bounds.lastNode();
    };

    BlockOpcode.prototype.evaluate = function evaluate(vm) {
        vm.try(this.children, null);
    };

    BlockOpcode.prototype.destroy = function destroy() {
        this.bounds.destroy();
    };

    BlockOpcode.prototype.didDestroy = function didDestroy() {
        this.env.didDestroy(this.bounds);
    };

    BlockOpcode.prototype.toJSON = function toJSON() {
        var details = (0, _util.dict)();
        details["guid"] = '' + this._guid;
        return {
            guid: this._guid,
            type: this.type,
            details: details,
            children: this.children.toArray().map(function (op) {
                return op.toJSON();
            })
        };
    };

    return BlockOpcode;
}(_opcodes.UpdatingOpcode);
var TryOpcode = exports.TryOpcode = function (_BlockOpcode) {
    _inherits(TryOpcode, _BlockOpcode);

    function TryOpcode(start, state, bounds, children) {
        _classCallCheck(this, TryOpcode);

        var _this2 = _possibleConstructorReturn(this, _BlockOpcode.call(this, start, state, bounds, children));

        _this2.type = "try";
        _this2.tag = _this2._tag = _reference.UpdatableTag.create(_reference.CONSTANT_TAG);
        return _this2;
    }

    TryOpcode.prototype.didInitializeChildren = function didInitializeChildren() {
        this._tag.inner.update((0, _reference.combineSlice)(this.children));
    };

    TryOpcode.prototype.evaluate = function evaluate(vm) {
        vm.try(this.children, this);
    };

    TryOpcode.prototype.handleException = function handleException() {
        var _this3 = this;

        var env = this.env,
            bounds = this.bounds,
            children = this.children,
            scope = this.scope,
            dynamicScope = this.dynamicScope,
            start = this.start,
            stack = this.stack,
            prev = this.prev,
            next = this.next;

        children.clear();
        var elementStack = _builder.ElementStack.resume(env, bounds, bounds.reset(env));
        var vm = new _append2.default(env, scope, dynamicScope, elementStack);
        var updating = new _util.LinkedList();
        vm.execute(start, function (vm) {
            vm.stack = _append.EvaluationStack.restore(stack);
            vm.updatingOpcodeStack.push(updating);
            vm.updateWith(_this3);
            vm.updatingOpcodeStack.push(children);
        });
        this.prev = prev;
        this.next = next;
    };

    TryOpcode.prototype.toJSON = function toJSON() {
        var json = _BlockOpcode.prototype.toJSON.call(this);
        var details = json["details"];
        if (!details) {
            details = json["details"] = {};
        }
        return _BlockOpcode.prototype.toJSON.call(this);
    };

    return TryOpcode;
}(BlockOpcode);

var ListRevalidationDelegate = function () {
    function ListRevalidationDelegate(opcode, marker) {
        _classCallCheck(this, ListRevalidationDelegate);

        this.opcode = opcode;
        this.marker = marker;
        this.didInsert = false;
        this.didDelete = false;
        this.map = opcode.map;
        this.updating = opcode['children'];
    }

    ListRevalidationDelegate.prototype.insert = function insert(key, item, memo, before) {
        var map = this.map,
            opcode = this.opcode,
            updating = this.updating;

        var nextSibling = null;
        var reference = null;
        if (before) {
            reference = map[before];
            nextSibling = reference['bounds'].firstNode();
        } else {
            nextSibling = this.marker;
        }
        var vm = opcode.vmForInsertion(nextSibling);
        var tryOpcode = null;
        var start = opcode.start;

        vm.execute(start, function (vm) {
            map[key] = tryOpcode = vm.iterate(memo, item);
            vm.updatingOpcodeStack.push(new _util.LinkedList());
            vm.updateWith(tryOpcode);
            vm.updatingOpcodeStack.push(tryOpcode.children);
        });
        updating.insertBefore(tryOpcode, reference);
        this.didInsert = true;
    };

    ListRevalidationDelegate.prototype.retain = function retain(_key, _item, _memo) {};

    ListRevalidationDelegate.prototype.move = function move(key, _item, _memo, before) {
        var map = this.map,
            updating = this.updating;

        var entry = map[key];
        var reference = map[before] || null;
        if (before) {
            (0, _bounds.move)(entry, reference.firstNode());
        } else {
            (0, _bounds.move)(entry, this.marker);
        }
        updating.remove(entry);
        updating.insertBefore(entry, reference);
    };

    ListRevalidationDelegate.prototype.delete = function _delete(key) {
        var map = this.map;

        var opcode = map[key];
        opcode.didDestroy();
        (0, _bounds.clear)(opcode);
        this.updating.remove(opcode);
        delete map[key];
        this.didDelete = true;
    };

    ListRevalidationDelegate.prototype.done = function done() {
        this.opcode.didInitializeChildren(this.didInsert || this.didDelete);
    };

    return ListRevalidationDelegate;
}();

var ListBlockOpcode = exports.ListBlockOpcode = function (_BlockOpcode2) {
    _inherits(ListBlockOpcode, _BlockOpcode2);

    function ListBlockOpcode(start, state, bounds, children, artifacts) {
        _classCallCheck(this, ListBlockOpcode);

        var _this4 = _possibleConstructorReturn(this, _BlockOpcode2.call(this, start, state, bounds, children));

        _this4.type = "list-block";
        _this4.map = (0, _util.dict)();
        _this4.lastIterated = _reference.INITIAL;
        _this4.artifacts = artifacts;
        var _tag = _this4._tag = _reference.UpdatableTag.create(_reference.CONSTANT_TAG);
        _this4.tag = (0, _reference.combine)([artifacts.tag, _tag]);
        return _this4;
    }

    ListBlockOpcode.prototype.didInitializeChildren = function didInitializeChildren() {
        var listDidChange = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

        this.lastIterated = this.artifacts.tag.value();
        if (listDidChange) {
            this._tag.inner.update((0, _reference.combineSlice)(this.children));
        }
    };

    ListBlockOpcode.prototype.evaluate = function evaluate(vm) {
        var artifacts = this.artifacts,
            lastIterated = this.lastIterated;

        if (!artifacts.tag.validate(lastIterated)) {
            var bounds = this.bounds;
            var dom = vm.dom;

            var marker = dom.createComment('');
            dom.insertAfter(bounds.parentElement(), marker, bounds.lastNode());
            var target = new ListRevalidationDelegate(this, marker);
            var synchronizer = new _reference.IteratorSynchronizer({ target: target, artifacts: artifacts });
            synchronizer.sync();
            this.parentElement().removeChild(marker);
        }
        // Run now-updated updating opcodes
        _BlockOpcode2.prototype.evaluate.call(this, vm);
    };

    ListBlockOpcode.prototype.vmForInsertion = function vmForInsertion(nextSibling) {
        var env = this.env,
            scope = this.scope,
            dynamicScope = this.dynamicScope;

        var elementStack = _builder.ElementStack.forInitialRender(this.env, this.bounds.parentElement(), nextSibling);
        return new _append2.default(env, scope, dynamicScope, elementStack);
    };

    ListBlockOpcode.prototype.toJSON = function toJSON() {
        var json = _BlockOpcode2.prototype.toJSON.call(this);
        var map = this.map;
        var inner = Object.keys(map).map(function (key) {
            return JSON.stringify(key) + ': ' + map[key]._guid;
        }).join(", ");
        var details = json["details"];
        if (!details) {
            details = json["details"] = {};
        }
        details["map"] = '{' + inner + '}';
        return json;
    };

    return ListBlockOpcode;
}(BlockOpcode);

var UpdatingVMFrame = function () {
    function UpdatingVMFrame(vm, ops, exceptionHandler) {
        _classCallCheck(this, UpdatingVMFrame);

        this.vm = vm;
        this.ops = ops;
        this.exceptionHandler = exceptionHandler;
        this.vm = vm;
        this.ops = ops;
        this.current = ops.head();
    }

    UpdatingVMFrame.prototype.goto = function goto(op) {
        this.current = op;
    };

    UpdatingVMFrame.prototype.nextStatement = function nextStatement() {
        var current = this.current,
            ops = this.ops;

        if (current) this.current = ops.nextNode(current);
        return current;
    };

    UpdatingVMFrame.prototype.handleException = function handleException() {
        if (this.exceptionHandler) {
            this.exceptionHandler.handleException();
        }
    };

    return UpdatingVMFrame;
}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,