'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _bounds = require('../bounds');

var _update = require('./update');

var _update2 = _interopRequireDefault(_update);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}

var RenderResult = function () {
    function RenderResult(env, updating, bounds) {
        _classCallCheck(this, RenderResult);

        this.env = env;
        this.updating = updating;
        this.bounds = bounds;
    }

    RenderResult.prototype.rerender = function rerender() {
        var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : { alwaysRevalidate: false },
            _ref$alwaysRevalidate = _ref.alwaysRevalidate,
            alwaysRevalidate = _ref$alwaysRevalidate === undefined ? false : _ref$alwaysRevalidate;

        var env = this.env,
            updating = this.updating;

        var vm = new _update2.default(env, { alwaysRevalidate: alwaysRevalidate });
        vm.execute(updating, this);
    };

    RenderResult.prototype.parentElement = function parentElement() {
        return this.bounds.parentElement();
    };

    RenderResult.prototype.firstNode = function firstNode() {
        return this.bounds.firstNode();
    };

    RenderResult.prototype.lastNode = function lastNode() {
        return this.bounds.lastNode();
    };

    RenderResult.prototype.opcodes = function opcodes() {
        return this.updating;
    };

    RenderResult.prototype.handleException = function handleException() {
        throw "this should never happen";
    };

    RenderResult.prototype.destroy = function destroy() {
        this.bounds.destroy();
        (0, _bounds.clear)(this.bounds);
    };

    return RenderResult;
}();

exports.default = RenderResult;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi92bS9yZW5kZXItcmVzdWx0LmpzIl0sIm5hbWVzIjpbImNsZWFyIiwiVXBkYXRpbmdWTSIsIlJlbmRlclJlc3VsdCIsImVudiIsInVwZGF0aW5nIiwiYm91bmRzIiwicmVyZW5kZXIiLCJhbHdheXNSZXZhbGlkYXRlIiwidm0iLCJleGVjdXRlIiwicGFyZW50RWxlbWVudCIsImZpcnN0Tm9kZSIsImxhc3ROb2RlIiwib3Bjb2RlcyIsImhhbmRsZUV4Y2VwdGlvbiIsImRlc3Ryb3kiXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLEFBQVMsQUFBVCxBQUFzQixBQUF0Qjs7QUFDQSxBQUFPLEFBQVAsQUFBdUIsQUFBdkI7Ozs7Ozs7Ozs7OztJQUNxQixBLDJCQUNqQjswQkFBWSxBQUFaLEtBQWlCLEFBQWpCLFVBQTJCLEFBQTNCLFFBQW1DOzhCQUMvQjs7YUFBSyxBQUFMLE1BQVcsQUFBWCxBQUNBO2FBQUssQUFBTCxXQUFnQixBQUFoQixBQUNBO2FBQUssQUFBTCxTQUFjLEFBQWQsQUFDSDs7OzJCQUNELEEsK0JBQXFFO3VGQUE3QixFQUFFLGtCQUFrQixBQUFwQixBQUE2Qjt5Q0FBMUQsQUFBMEQ7WUFBMUQsQUFBMEQseURBQXZDLEFBQXVDLFFBQUE7O1lBQzNELEFBRDJELE1BQ3pDLEFBRHlDLEtBQzNELEFBRDJEO1lBQ3RELEFBRHNELFdBQ3pDLEFBRHlDLEtBQ3RELEFBRHNELEFBRWpFOztZQUFJLEtBQUssQUFBSSxBQUFKLHFCQUFlLEFBQWYsS0FBb0IsRUFBRSxrQkFBRixBQUFwQixBQUFULEFBQ0E7V0FBRyxBQUFILFFBQVcsQUFBWCxVQUFxQixBQUFyQixBQUNIO0E7OzJCQUNELEEseUNBQWdCLEFBQ1o7ZUFBTyxLQUFLLEFBQUwsT0FBWSxBQUFaLEFBQVAsQUFDSDtBOzsyQkFDRCxBLGlDQUFZLEFBQ1I7ZUFBTyxLQUFLLEFBQUwsT0FBWSxBQUFaLEFBQVAsQUFDSDtBOzsyQkFDRCxBLCtCQUFXLEFBQ1A7ZUFBTyxLQUFLLEFBQUwsT0FBWSxBQUFaLEFBQVAsQUFDSDtBOzsyQkFDRCxBLDZCQUFVLEFBQ047ZUFBTyxLQUFLLEFBQVosQUFDSDtBOzsyQkFDRCxBLDZDQUFrQixBQUNkO2NBQU0sQUFBTixBQUNIO0E7OzJCQUNELEEsNkJBQVUsQUFDTjthQUFLLEFBQUwsT0FBWSxBQUFaLEFBQ0E7MkJBQU0sS0FBSyxBQUFYLEFBQ0g7QTs7Ozs7a0JBN0JnQixBIiwiZmlsZSI6ImxpYi92bS9yZW5kZXItcmVzdWx0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY2xlYXIgfSBmcm9tICcuLi9ib3VuZHMnO1xuaW1wb3J0IFVwZGF0aW5nVk0gZnJvbSAnLi91cGRhdGUnO1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUmVuZGVyUmVzdWx0IHtcbiAgICBjb25zdHJ1Y3RvcihlbnYsIHVwZGF0aW5nLCBib3VuZHMpIHtcbiAgICAgICAgdGhpcy5lbnYgPSBlbnY7XG4gICAgICAgIHRoaXMudXBkYXRpbmcgPSB1cGRhdGluZztcbiAgICAgICAgdGhpcy5ib3VuZHMgPSBib3VuZHM7XG4gICAgfVxuICAgIHJlcmVuZGVyKHsgYWx3YXlzUmV2YWxpZGF0ZSA9IGZhbHNlIH0gPSB7IGFsd2F5c1JldmFsaWRhdGU6IGZhbHNlIH0pIHtcbiAgICAgICAgbGV0IHsgZW52LCB1cGRhdGluZyB9ID0gdGhpcztcbiAgICAgICAgbGV0IHZtID0gbmV3IFVwZGF0aW5nVk0oZW52LCB7IGFsd2F5c1JldmFsaWRhdGUgfSk7XG4gICAgICAgIHZtLmV4ZWN1dGUodXBkYXRpbmcsIHRoaXMpO1xuICAgIH1cbiAgICBwYXJlbnRFbGVtZW50KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5ib3VuZHMucGFyZW50RWxlbWVudCgpO1xuICAgIH1cbiAgICBmaXJzdE5vZGUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmJvdW5kcy5maXJzdE5vZGUoKTtcbiAgICB9XG4gICAgbGFzdE5vZGUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmJvdW5kcy5sYXN0Tm9kZSgpO1xuICAgIH1cbiAgICBvcGNvZGVzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy51cGRhdGluZztcbiAgICB9XG4gICAgaGFuZGxlRXhjZXB0aW9uKCkge1xuICAgICAgICB0aHJvdyBcInRoaXMgc2hvdWxkIG5ldmVyIGhhcHBlblwiO1xuICAgIH1cbiAgICBkZXN0cm95KCkge1xuICAgICAgICB0aGlzLmJvdW5kcy5kZXN0cm95KCk7XG4gICAgICAgIGNsZWFyKHRoaXMuYm91bmRzKTtcbiAgICB9XG59Il19