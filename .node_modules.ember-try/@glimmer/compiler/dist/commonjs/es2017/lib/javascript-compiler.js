"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Template = exports.ComponentBlock = exports.TemplateBlock = exports.InlineBlock = exports.Block = undefined;

var _util = require("@glimmer/util");

var _wireFormat = require("@glimmer/wire-format");

class Block {
    constructor() {
        this.statements = [];
    }
    push(statement) {
        this.statements.push(statement);
    }
}
exports.Block = Block;
class InlineBlock extends Block {
    constructor(table) {
        super();
        this.table = table;
    }
    toJSON() {
        return {
            statements: this.statements,
            parameters: this.table.slots
        };
    }
}
exports.InlineBlock = InlineBlock;
class TemplateBlock extends Block {
    constructor(symbolTable) {
        super();
        this.symbolTable = symbolTable;
        this.type = "template";
        this.yields = new _util.DictSet();
        this.named = new _util.DictSet();
        this.blocks = [];
        this.hasEval = false;
    }
    push(statement) {
        this.statements.push(statement);
    }
    toJSON() {
        return {
            symbols: this.symbolTable.symbols,
            statements: this.statements,
            hasEval: this.hasEval
        };
    }
}
exports.TemplateBlock = TemplateBlock;
class ComponentBlock extends Block {
    constructor(table) {
        super();
        this.table = table;
        this.attributes = [];
        this.arguments = [];
        this.inParams = true;
        this.positionals = [];
    }
    push(statement) {
        if (this.inParams) {
            if (_wireFormat.Statements.isFlushElement(statement)) {
                this.inParams = false;
            } else if (_wireFormat.Statements.isArgument(statement)) {
                this.arguments.push(statement);
            } else if (_wireFormat.Statements.isAttribute(statement)) {
                this.attributes.push(statement);
            } else if (_wireFormat.Statements.isModifier(statement)) {
                throw new Error('Compile Error: Element modifiers are not allowed in components');
            } else {
                throw new Error('Compile Error: only parameters allowed before flush-element');
            }
        } else {
            this.statements.push(statement);
        }
    }
    toJSON() {
        let args = this.arguments;
        let keys = args.map(arg => arg[1]);
        let values = args.map(arg => arg[2]);
        return [this.attributes, [keys, values], {
            statements: this.statements,
            parameters: this.table.slots
        }];
    }
}
exports.ComponentBlock = ComponentBlock;
class Template {
    constructor(symbols, meta) {
        this.meta = meta;
        this.block = new TemplateBlock(symbols);
    }
    toJSON() {
        return {
            block: this.block.toJSON(),
            meta: this.meta
        };
    }
}
exports.Template = Template;
class JavaScriptCompiler {
    constructor(opcodes, symbols, meta) {
        this.blocks = new _util.Stack();
        this.values = [];
        this.opcodes = opcodes;
        this.template = new Template(symbols, meta);
    }
    static process(opcodes, symbols, meta) {
        let compiler = new JavaScriptCompiler(opcodes, symbols, meta);
        return compiler.process();
    }
    get currentBlock() {
        return (0, _util.expect)(this.blocks.current, 'Expected a block on the stack');
    }
    process() {
        this.opcodes.forEach(([opcode, ...args]) => {
            if (!this[opcode]) {
                throw new Error(`unimplemented ${opcode} on JavaScriptCompiler`);
            }
            this[opcode](...args);
        });
        return this.template;
    }
    /// Nesting
    startBlock([program]) {
        let block = new InlineBlock(program['symbols']);
        this.blocks.push(block);
    }
    endBlock() {
        let { template, blocks } = this;
        let block = blocks.pop();
        template.block.blocks.push(block.toJSON());
    }
    startProgram() {
        this.blocks.push(this.template.block);
    }
    endProgram() {}
    /// Statements
    text(content) {
        this.push([_wireFormat.Ops.Text, content]);
    }
    append(trusted) {
        this.push([_wireFormat.Ops.Append, this.popValue(), trusted]);
    }
    comment(value) {
        this.push([_wireFormat.Ops.Comment, value]);
    }
    modifier(name) {
        let params = this.popValue();
        let hash = this.popValue();
        this.push([_wireFormat.Ops.Modifier, name, params, hash]);
    }
    block(name, template, inverse) {
        let params = this.popValue();
        let hash = this.popValue();
        let blocks = this.template.block.blocks;
        (0, _util.assert)(typeof template !== 'number' || blocks[template] !== null, 'missing block in the compiler');
        (0, _util.assert)(typeof inverse !== 'number' || blocks[inverse] !== null, 'missing block in the compiler');
        this.push([_wireFormat.Ops.Block, name, params, hash, blocks[template], blocks[inverse]]);
    }
    openElement(element) {
        let tag = element.tag;
        if (tag.indexOf('-') !== -1) {
            this.startComponent(element);
        } else if (element.blockParams.length > 0) {
            throw new Error(`Compile Error: <${element.tag}> is not a component and doesn't support block parameters`);
        } else {
            this.push([_wireFormat.Ops.OpenElement, tag]);
        }
    }
    flushElement() {
        this.push([_wireFormat.Ops.FlushElement]);
    }
    closeElement(element) {
        let tag = element.tag;
        if (tag.indexOf('-') !== -1) {
            let [attrs, args, block] = this.endComponent();
            this.push([_wireFormat.Ops.Component, tag, attrs, args, block]);
        } else {
            this.push([_wireFormat.Ops.CloseElement]);
        }
    }
    staticAttr(name, namespace) {
        let value = this.popValue();
        this.push([_wireFormat.Ops.StaticAttr, name, value, namespace]);
    }
    dynamicAttr(name, namespace) {
        let value = this.popValue();
        this.push([_wireFormat.Ops.DynamicAttr, name, value, namespace]);
    }
    trustingAttr(name, namespace) {
        let value = this.popValue();
        this.push([_wireFormat.Ops.TrustingAttr, name, value, namespace]);
    }
    staticArg(name) {
        let value = this.popValue();
        this.push([_wireFormat.Ops.StaticArg, name, value]);
    }
    dynamicArg(name) {
        let value = this.popValue();
        this.push([_wireFormat.Ops.DynamicArg, name, value]);
    }
    yield(to) {
        let params = this.popValue();
        this.push([_wireFormat.Ops.Yield, to, params]);
    }
    debugger(evalInfo) {
        this.push([_wireFormat.Ops.Debugger, evalInfo]);
        this.template.block.hasEval = true;
    }
    hasBlock(name) {
        this.pushValue([_wireFormat.Ops.HasBlock, name]);
    }
    hasBlockParams(name) {
        this.pushValue([_wireFormat.Ops.HasBlockParams, name]);
    }
    partial(evalInfo) {
        let params = this.popValue();
        this.push([_wireFormat.Ops.Partial, params[0], evalInfo]);
        this.template.block.hasEval = true;
    }
    /// Expressions
    literal(value) {
        if (value === undefined) {
            this.pushValue([_wireFormat.Ops.Undefined]);
        } else {
            this.pushValue(value);
        }
    }
    unknown(name) {
        this.pushValue([_wireFormat.Ops.Unknown, name]);
    }
    get(head, path) {
        this.pushValue([_wireFormat.Ops.Get, head, path]);
    }
    maybeLocal(path) {
        this.pushValue([_wireFormat.Ops.MaybeLocal, path]);
    }
    concat() {
        this.pushValue([_wireFormat.Ops.Concat, this.popValue()]);
    }
    helper(name) {
        let params = this.popValue();
        let hash = this.popValue();
        this.pushValue([_wireFormat.Ops.Helper, name, params, hash]);
    }
    /// Stack Management Opcodes
    startComponent(element) {
        let component = new ComponentBlock(element['symbols']);
        this.blocks.push(component);
    }
    endComponent() {
        let component = this.blocks.pop();
        (0, _util.assert)(component instanceof ComponentBlock, "Compiler bug: endComponent() should end a component");
        return component.toJSON();
    }
    prepareArray(size) {
        let values = [];
        for (let i = 0; i < size; i++) {
            values.push(this.popValue());
        }
        this.pushValue(values);
    }
    prepareObject(size) {
        (0, _util.assert)(this.values.length >= size, `Expected ${size} values on the stack, found ${this.values.length}`);
        let keys = new Array(size);
        let values = new Array(size);
        for (let i = 0; i < size; i++) {
            keys[i] = this.popValue();
            values[i] = this.popValue();
        }
        this.pushValue([keys, values]);
    }
    /// Utilities
    push(args) {
        while (args[args.length - 1] === null) {
            args.pop();
        }
        this.currentBlock.push(args);
    }
    pushValue(val) {
        this.values.push(val);
    }
    popValue() {
        (0, _util.assert)(this.values.length, "No expression found on stack");
        return this.values.pop();
    }
}
exports.default = JavaScriptCompiler;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,