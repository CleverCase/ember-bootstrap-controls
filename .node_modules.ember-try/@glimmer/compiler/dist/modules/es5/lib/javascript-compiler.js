var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

import { assert } from "@glimmer/util";
import { Stack, DictSet } from "@glimmer/util";
import { Statements, Ops } from '@glimmer/wire-format';
export var Block = function () {
    function Block() {
        _classCallCheck(this, Block);

        this.statements = [];
    }

    Block.prototype.push = function push(statement) {
        this.statements.push(statement);
    };

    return Block;
}();
export var InlineBlock = function (_Block) {
    _inherits(InlineBlock, _Block);

    function InlineBlock(table) {
        _classCallCheck(this, InlineBlock);

        var _this = _possibleConstructorReturn(this, _Block.call(this));

        _this.table = table;
        return _this;
    }

    InlineBlock.prototype.toJSON = function toJSON() {
        return {
            statements: this.statements,
            parameters: this.table.slots
        };
    };

    return InlineBlock;
}(Block);
export var TemplateBlock = function (_Block2) {
    _inherits(TemplateBlock, _Block2);

    function TemplateBlock(symbolTable) {
        _classCallCheck(this, TemplateBlock);

        var _this2 = _possibleConstructorReturn(this, _Block2.call(this));

        _this2.symbolTable = symbolTable;
        _this2.type = "template";
        _this2.yields = new DictSet();
        _this2.named = new DictSet();
        _this2.blocks = [];
        _this2.hasEval = false;
        return _this2;
    }

    TemplateBlock.prototype.push = function push(statement) {
        this.statements.push(statement);
    };

    TemplateBlock.prototype.toJSON = function toJSON() {
        return {
            symbols: this.symbolTable.symbols,
            statements: this.statements,
            hasEval: this.hasEval
        };
    };

    return TemplateBlock;
}(Block);
export var ComponentBlock = function (_Block3) {
    _inherits(ComponentBlock, _Block3);

    function ComponentBlock(table) {
        _classCallCheck(this, ComponentBlock);

        var _this3 = _possibleConstructorReturn(this, _Block3.call(this));

        _this3.table = table;
        _this3.attributes = [];
        _this3.arguments = [];
        _this3.inParams = true;
        _this3.positionals = [];
        return _this3;
    }

    ComponentBlock.prototype.push = function push(statement) {
        if (this.inParams) {
            if (Statements.isFlushElement(statement)) {
                this.inParams = false;
            } else if (Statements.isArgument(statement)) {
                this.arguments.push(statement);
            } else if (Statements.isAttribute(statement)) {
                this.attributes.push(statement);
            } else if (Statements.isModifier(statement)) {
                throw new Error('Compile Error: Element modifiers are not allowed in components');
            } else {
                throw new Error('Compile Error: only parameters allowed before flush-element');
            }
        } else {
            this.statements.push(statement);
        }
    };

    ComponentBlock.prototype.toJSON = function toJSON() {
        var args = this.arguments;
        var keys = args.map(function (arg) {
            return arg[1];
        });
        var values = args.map(function (arg) {
            return arg[2];
        });
        return [this.attributes, [keys, values], {
            statements: this.statements,
            parameters: this.table.slots
        }];
    };

    return ComponentBlock;
}(Block);
export var Template = function () {
    function Template(symbols, meta) {
        _classCallCheck(this, Template);

        this.meta = meta;
        this.block = new TemplateBlock(symbols);
    }

    Template.prototype.toJSON = function toJSON() {
        return {
            block: this.block.toJSON(),
            meta: this.meta
        };
    };

    return Template;
}();

var JavaScriptCompiler = function () {
    function JavaScriptCompiler(opcodes, symbols, meta) {
        _classCallCheck(this, JavaScriptCompiler);

        this.blocks = new Stack();
        this.values = [];
        this.opcodes = opcodes;
        this.template = new Template(symbols, meta);
    }

    JavaScriptCompiler.process = function process(opcodes, symbols, meta) {
        var compiler = new JavaScriptCompiler(opcodes, symbols, meta);
        return compiler.process();
    };

    JavaScriptCompiler.prototype.process = function process() {
        var _this4 = this;

        this.opcodes.forEach(function (_ref) {
            var opcode = _ref[0],
                args = _ref.slice(1);

            if (!_this4[opcode]) {
                throw new Error("unimplemented " + opcode + " on JavaScriptCompiler");
            }
            _this4[opcode].apply(_this4, args);
        });
        return this.template;
    };
    /// Nesting


    JavaScriptCompiler.prototype.startBlock = function startBlock(_ref2) {
        var program = _ref2[0];

        var block = new InlineBlock(program['symbols']);
        this.blocks.push(block);
    };

    JavaScriptCompiler.prototype.endBlock = function endBlock() {
        var template = this.template,
            blocks = this.blocks;

        var block = blocks.pop();
        template.block.blocks.push(block.toJSON());
    };

    JavaScriptCompiler.prototype.startProgram = function startProgram() {
        this.blocks.push(this.template.block);
    };

    JavaScriptCompiler.prototype.endProgram = function endProgram() {};
    /// Statements


    JavaScriptCompiler.prototype.text = function text(content) {
        this.push([Ops.Text, content]);
    };

    JavaScriptCompiler.prototype.append = function append(trusted) {
        this.push([Ops.Append, this.popValue(), trusted]);
    };

    JavaScriptCompiler.prototype.comment = function comment(value) {
        this.push([Ops.Comment, value]);
    };

    JavaScriptCompiler.prototype.modifier = function modifier(name) {
        var params = this.popValue();
        var hash = this.popValue();
        this.push([Ops.Modifier, name, params, hash]);
    };

    JavaScriptCompiler.prototype.block = function block(name, template, inverse) {
        var params = this.popValue();
        var hash = this.popValue();
        var blocks = this.template.block.blocks;
        assert(typeof template !== 'number' || blocks[template] !== null, 'missing block in the compiler');
        assert(typeof inverse !== 'number' || blocks[inverse] !== null, 'missing block in the compiler');
        this.push([Ops.Block, name, params, hash, blocks[template], blocks[inverse]]);
    };

    JavaScriptCompiler.prototype.openElement = function openElement(element) {
        var tag = element.tag;
        if (tag.indexOf('-') !== -1) {
            this.startComponent(element);
        } else if (element.blockParams.length > 0) {
            throw new Error("Compile Error: <" + element.tag + "> is not a component and doesn't support block parameters");
        } else {
            this.push([Ops.OpenElement, tag]);
        }
    };

    JavaScriptCompiler.prototype.flushElement = function flushElement() {
        this.push([Ops.FlushElement]);
    };

    JavaScriptCompiler.prototype.closeElement = function closeElement(element) {
        var tag = element.tag;
        if (tag.indexOf('-') !== -1) {
            var _endComponent = this.endComponent(),
                attrs = _endComponent[0],
                args = _endComponent[1],
                block = _endComponent[2];

            this.push([Ops.Component, tag, attrs, args, block]);
        } else {
            this.push([Ops.CloseElement]);
        }
    };

    JavaScriptCompiler.prototype.staticAttr = function staticAttr(name, namespace) {
        var value = this.popValue();
        this.push([Ops.StaticAttr, name, value, namespace]);
    };

    JavaScriptCompiler.prototype.dynamicAttr = function dynamicAttr(name, namespace) {
        var value = this.popValue();
        this.push([Ops.DynamicAttr, name, value, namespace]);
    };

    JavaScriptCompiler.prototype.trustingAttr = function trustingAttr(name, namespace) {
        var value = this.popValue();
        this.push([Ops.TrustingAttr, name, value, namespace]);
    };

    JavaScriptCompiler.prototype.staticArg = function staticArg(name) {
        var value = this.popValue();
        this.push([Ops.StaticArg, name, value]);
    };

    JavaScriptCompiler.prototype.dynamicArg = function dynamicArg(name) {
        var value = this.popValue();
        this.push([Ops.DynamicArg, name, value]);
    };

    JavaScriptCompiler.prototype.yield = function _yield(to) {
        var params = this.popValue();
        this.push([Ops.Yield, to, params]);
    };

    JavaScriptCompiler.prototype.debugger = function _debugger(evalInfo) {
        this.push([Ops.Debugger, evalInfo]);
        this.template.block.hasEval = true;
    };

    JavaScriptCompiler.prototype.hasBlock = function hasBlock(name) {
        this.pushValue([Ops.HasBlock, name]);
    };

    JavaScriptCompiler.prototype.hasBlockParams = function hasBlockParams(name) {
        this.pushValue([Ops.HasBlockParams, name]);
    };

    JavaScriptCompiler.prototype.partial = function partial(evalInfo) {
        var params = this.popValue();
        this.push([Ops.Partial, params[0], evalInfo]);
        this.template.block.hasEval = true;
    };
    /// Expressions


    JavaScriptCompiler.prototype.literal = function literal(value) {
        if (value === undefined) {
            this.pushValue([Ops.Undefined]);
        } else {
            this.pushValue(value);
        }
    };

    JavaScriptCompiler.prototype.unknown = function unknown(name) {
        this.pushValue([Ops.Unknown, name]);
    };

    JavaScriptCompiler.prototype.get = function get(head, path) {
        this.pushValue([Ops.Get, head, path]);
    };

    JavaScriptCompiler.prototype.maybeLocal = function maybeLocal(path) {
        this.pushValue([Ops.MaybeLocal, path]);
    };

    JavaScriptCompiler.prototype.concat = function concat() {
        this.pushValue([Ops.Concat, this.popValue()]);
    };

    JavaScriptCompiler.prototype.helper = function helper(name) {
        var params = this.popValue();
        var hash = this.popValue();
        this.pushValue([Ops.Helper, name, params, hash]);
    };
    /// Stack Management Opcodes


    JavaScriptCompiler.prototype.startComponent = function startComponent(element) {
        var component = new ComponentBlock(element['symbols']);
        this.blocks.push(component);
    };

    JavaScriptCompiler.prototype.endComponent = function endComponent() {
        var component = this.blocks.pop();
        assert(component instanceof ComponentBlock, "Compiler bug: endComponent() should end a component");
        return component.toJSON();
    };

    JavaScriptCompiler.prototype.prepareArray = function prepareArray(size) {
        var values = [];
        for (var i = 0; i < size; i++) {
            values.push(this.popValue());
        }
        this.pushValue(values);
    };

    JavaScriptCompiler.prototype.prepareObject = function prepareObject(size) {
        assert(this.values.length >= size, "Expected " + size + " values on the stack, found " + this.values.length);
        var keys = new Array(size);
        var values = new Array(size);
        for (var i = 0; i < size; i++) {
            keys[i] = this.popValue();
            values[i] = this.popValue();
        }
        this.pushValue([keys, values]);
    };
    /// Utilities


    JavaScriptCompiler.prototype.push = function push(args) {
        while (args[args.length - 1] === null) {
            args.pop();
        }
        this.currentBlock.push(args);
    };

    JavaScriptCompiler.prototype.pushValue = function pushValue(val) {
        this.values.push(val);
    };

    JavaScriptCompiler.prototype.popValue = function popValue() {
        assert(this.values.length, "No expression found on stack");
        return this.values.pop();
    };

    _createClass(JavaScriptCompiler, [{
        key: "currentBlock",
        get: function () {
            return this.blocks.current;
        }
    }]);

    return JavaScriptCompiler;
}();

export default JavaScriptCompiler;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,