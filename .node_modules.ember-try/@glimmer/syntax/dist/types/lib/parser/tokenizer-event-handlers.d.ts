import { HandlebarsNodeVisitors } from './handlebars-node-visitors';
import * as AST from "../types/nodes";
import builders from "../builders";
import traverse, { NodeVisitor } from "../traversal/traverse";
import print from "../generation/print";
import Walker from "../traversal/walker";
export declare class TokenizerEventHandlers extends HandlebarsNodeVisitors {
    private tagOpenLine;
    private tagOpenColumn;
    reset(): void;
    beginComment(): void;
    appendToCommentData(char: string): void;
    finishComment(): void;
    beginData(): void;
    appendToData(char: string): void;
    finishData(): void;
    tagOpen(): void;
    beginStartTag(): void;
    beginEndTag(): void;
    finishTag(): void;
    finishStartTag(): void;
    finishEndTag(isVoid: boolean): void;
    markTagAsSelfClosing(): void;
    appendToTagName(char: string): void;
    beginAttribute(): void;
    appendToAttributeName(char: string): void;
    beginAttributeValue(isQuoted: boolean): void;
    appendToAttributeValue(char: string): void;
    finishAttributeValue(): void;
    reportSyntaxError(message: string): void;
}
export interface Syntax {
    parse: typeof preprocess;
    builders: typeof builders;
    print: typeof print;
    traverse: typeof traverse;
    Walker: typeof Walker;
}
export declare const syntax: Syntax;
/**
  ASTPlugins can make changes to the Glimmer template AST before
  compilation begins.
*/
export interface ASTPlugin {
    (env: ASTPluginEnvironment): ASTPluginResult;
}
export interface ASTPluginResult {
    name: string;
    visitors: NodeVisitor;
}
export interface ASTPluginEnvironment {
    meta?: any;
    syntax: Syntax;
}
export interface PreprocessOptions {
    plugins?: {
        ast?: ASTPlugin[];
    };
}
export declare function preprocess(html: string, options?: PreprocessOptions): AST.Program;
