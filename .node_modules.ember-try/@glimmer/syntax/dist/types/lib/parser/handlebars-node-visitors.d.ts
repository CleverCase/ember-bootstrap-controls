import * as AST from '../types/nodes';
import * as HandlebarsAST from '../types/handlebars-ast';
import { Parser } from '../parser';
import { Option } from "@glimmer/util";
export declare abstract class HandlebarsNodeVisitors extends Parser {
    abstract appendToCommentData(s: string): void;
    abstract beginAttributeValue(quoted: boolean): void;
    abstract finishAttributeValue(): void;
    Program(program: HandlebarsAST.Program): AST.Program;
    BlockStatement(block: HandlebarsAST.BlockStatement): void;
    MustacheStatement(rawMustache: HandlebarsAST.MustacheStatement): AST.MustacheStatement;
    ContentStatement(content: HandlebarsAST.ContentStatement): void;
    CommentStatement(rawComment: HandlebarsAST.CommentStatement): Option<AST.MustacheCommentStatement>;
    PartialStatement(partial: HandlebarsAST.PartialStatement): void;
    PartialBlockStatement(partialBlock: HandlebarsAST.PartialBlockStatement): void;
    Decorator(decorator: HandlebarsAST.Decorator): void;
    DecoratorBlock(decoratorBlock: HandlebarsAST.DecoratorBlock): void;
    SubExpression(sexpr: HandlebarsAST.SubExpression): AST.SubExpression;
    PathExpression(path: HandlebarsAST.PathExpression): AST.PathExpression;
    Hash(hash: HandlebarsAST.Hash): AST.Hash;
    StringLiteral(string: HandlebarsAST.StringLiteral): AST.Literal;
    BooleanLiteral(boolean: HandlebarsAST.BooleanLiteral): AST.Literal;
    NumberLiteral(number: HandlebarsAST.NumberLiteral): AST.Literal;
    UndefinedLiteral(undef: HandlebarsAST.UndefinedLiteral): AST.Literal;
    NullLiteral(nul: HandlebarsAST.NullLiteral): AST.Literal;
}
