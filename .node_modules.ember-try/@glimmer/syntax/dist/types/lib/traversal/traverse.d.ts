import * as nodes from '../types/nodes';
export declare type NodeHandler<T extends nodes.Node> = NodeHandlerFunction<T> | EnterExitNodeHandler<T>;
export declare type SpecificNodeVisitor = {
    [P in keyof nodes.Nodes]?: NodeHandler<nodes.Nodes[P]>;
};
export interface NodeVisitor extends SpecificNodeVisitor {
    All?: NodeHandler<nodes.Node>;
}
export interface NodeHandlerFunction<T extends nodes.Node> {
    (this: null, node: T): any | null | undefined;
}
export interface EnterExitNodeHandler<T extends nodes.Node> {
    enter?: NodeHandlerFunction<T>;
    exit?: NodeHandlerFunction<T>;
    keys?: any;
}
export interface TraversedNode {
    [key: string]: nodes.Node;
}
export default function traverse(node: nodes.Node, visitor: NodeVisitor): void;
export declare function normalizeVisitor(visitor: NodeVisitor): {};
