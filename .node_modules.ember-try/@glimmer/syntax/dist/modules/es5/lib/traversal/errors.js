var TraversalError = function () {
    TraversalError.prototype = Object.create(Error.prototype);
    TraversalError.prototype.constructor = TraversalError;
    function TraversalError(message, node, parent, key) {
        var error = Error.call(this, message);
        this.key = key;
        this.message = message;
        this.node = node;
        this.parent = parent;
        this.stack = error.stack;
    }
    return TraversalError;
}();
export default TraversalError;
export function cannotRemoveNode(node, parent, key) {
    return new TraversalError("Cannot remove a node unless it is part of an array", node, parent, key);
}
export function cannotReplaceNode(node, parent, key) {
    return new TraversalError("Cannot replace a node with multiple nodes unless it is part of an array", node, parent, key);
}
export function cannotReplaceOrRemoveInKeyHandlerYet(node, key) {
    return new TraversalError("Replacing and removing in key handlers is not yet supported.", node, null, key);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi90cmF2ZXJzYWwvZXJyb3JzLmpzIl0sIm5hbWVzIjpbIlRyYXZlcnNhbEVycm9yIiwicHJvdG90eXBlIiwiT2JqZWN0IiwiY3JlYXRlIiwiRXJyb3IiLCJjb25zdHJ1Y3RvciIsIm1lc3NhZ2UiLCJub2RlIiwicGFyZW50Iiwia2V5IiwiZXJyb3IiLCJjYWxsIiwic3RhY2siLCJjYW5ub3RSZW1vdmVOb2RlIiwiY2Fubm90UmVwbGFjZU5vZGUiLCJjYW5ub3RSZXBsYWNlT3JSZW1vdmVJbktleUhhbmRsZXJZZXQiXSwibWFwcGluZ3MiOiJBQUFBLElBQU1BLGlCQUFpQixZQUFZO0FBQy9CQSxtQkFBZUMsU0FBZixHQUEyQkMsT0FBT0MsTUFBUCxDQUFjQyxNQUFNSCxTQUFwQixDQUEzQjtBQUNBRCxtQkFBZUMsU0FBZixDQUF5QkksV0FBekIsR0FBdUNMLGNBQXZDO0FBQ0EsYUFBU0EsY0FBVCxDQUF3Qk0sT0FBeEIsRUFBaUNDLElBQWpDLEVBQXVDQyxNQUF2QyxFQUErQ0MsR0FBL0MsRUFBb0Q7QUFDaEQsWUFBSUMsUUFBUU4sTUFBTU8sSUFBTixDQUFXLElBQVgsRUFBaUJMLE9BQWpCLENBQVo7QUFDQSxhQUFLRyxHQUFMLEdBQVdBLEdBQVg7QUFDQSxhQUFLSCxPQUFMLEdBQWVBLE9BQWY7QUFDQSxhQUFLQyxJQUFMLEdBQVlBLElBQVo7QUFDQSxhQUFLQyxNQUFMLEdBQWNBLE1BQWQ7QUFDQSxhQUFLSSxLQUFMLEdBQWFGLE1BQU1FLEtBQW5CO0FBQ0g7QUFDRCxXQUFPWixjQUFQO0FBQ0gsQ0Fac0IsRUFBdkI7QUFhQSxlQUFlQSxjQUFmO0FBQ0EsT0FBTyxTQUFTYSxnQkFBVCxDQUEwQk4sSUFBMUIsRUFBZ0NDLE1BQWhDLEVBQXdDQyxHQUF4QyxFQUE2QztBQUNoRCxXQUFPLElBQUlULGNBQUosQ0FBbUIsb0RBQW5CLEVBQXlFTyxJQUF6RSxFQUErRUMsTUFBL0UsRUFBdUZDLEdBQXZGLENBQVA7QUFDSDtBQUNELE9BQU8sU0FBU0ssaUJBQVQsQ0FBMkJQLElBQTNCLEVBQWlDQyxNQUFqQyxFQUF5Q0MsR0FBekMsRUFBOEM7QUFDakQsV0FBTyxJQUFJVCxjQUFKLENBQW1CLHlFQUFuQixFQUE4Rk8sSUFBOUYsRUFBb0dDLE1BQXBHLEVBQTRHQyxHQUE1RyxDQUFQO0FBQ0g7QUFDRCxPQUFPLFNBQVNNLG9DQUFULENBQThDUixJQUE5QyxFQUFvREUsR0FBcEQsRUFBeUQ7QUFDNUQsV0FBTyxJQUFJVCxjQUFKLENBQW1CLDhEQUFuQixFQUFtRk8sSUFBbkYsRUFBeUYsSUFBekYsRUFBK0ZFLEdBQS9GLENBQVA7QUFDSCIsImZpbGUiOiJsaWIvdHJhdmVyc2FsL2Vycm9ycy5qcyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IFRyYXZlcnNhbEVycm9yID0gZnVuY3Rpb24gKCkge1xuICAgIFRyYXZlcnNhbEVycm9yLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoRXJyb3IucHJvdG90eXBlKTtcbiAgICBUcmF2ZXJzYWxFcnJvci5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBUcmF2ZXJzYWxFcnJvcjtcbiAgICBmdW5jdGlvbiBUcmF2ZXJzYWxFcnJvcihtZXNzYWdlLCBub2RlLCBwYXJlbnQsIGtleSkge1xuICAgICAgICBsZXQgZXJyb3IgPSBFcnJvci5jYWxsKHRoaXMsIG1lc3NhZ2UpO1xuICAgICAgICB0aGlzLmtleSA9IGtleTtcbiAgICAgICAgdGhpcy5tZXNzYWdlID0gbWVzc2FnZTtcbiAgICAgICAgdGhpcy5ub2RlID0gbm9kZTtcbiAgICAgICAgdGhpcy5wYXJlbnQgPSBwYXJlbnQ7XG4gICAgICAgIHRoaXMuc3RhY2sgPSBlcnJvci5zdGFjaztcbiAgICB9XG4gICAgcmV0dXJuIFRyYXZlcnNhbEVycm9yO1xufSgpO1xuZXhwb3J0IGRlZmF1bHQgVHJhdmVyc2FsRXJyb3I7XG5leHBvcnQgZnVuY3Rpb24gY2Fubm90UmVtb3ZlTm9kZShub2RlLCBwYXJlbnQsIGtleSkge1xuICAgIHJldHVybiBuZXcgVHJhdmVyc2FsRXJyb3IoXCJDYW5ub3QgcmVtb3ZlIGEgbm9kZSB1bmxlc3MgaXQgaXMgcGFydCBvZiBhbiBhcnJheVwiLCBub2RlLCBwYXJlbnQsIGtleSk7XG59XG5leHBvcnQgZnVuY3Rpb24gY2Fubm90UmVwbGFjZU5vZGUobm9kZSwgcGFyZW50LCBrZXkpIHtcbiAgICByZXR1cm4gbmV3IFRyYXZlcnNhbEVycm9yKFwiQ2Fubm90IHJlcGxhY2UgYSBub2RlIHdpdGggbXVsdGlwbGUgbm9kZXMgdW5sZXNzIGl0IGlzIHBhcnQgb2YgYW4gYXJyYXlcIiwgbm9kZSwgcGFyZW50LCBrZXkpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGNhbm5vdFJlcGxhY2VPclJlbW92ZUluS2V5SGFuZGxlcllldChub2RlLCBrZXkpIHtcbiAgICByZXR1cm4gbmV3IFRyYXZlcnNhbEVycm9yKFwiUmVwbGFjaW5nIGFuZCByZW1vdmluZyBpbiBrZXkgaGFuZGxlcnMgaXMgbm90IHlldCBzdXBwb3J0ZWQuXCIsIG5vZGUsIG51bGwsIGtleSk7XG59Il19