define('@glimmer/wire-format', ['exports'], function (exports) { 'use strict';

(function (Opcodes) {
    // Statements
    Opcodes[Opcodes["Text"] = 0] = "Text";
    Opcodes[Opcodes["Append"] = 1] = "Append";
    Opcodes[Opcodes["Comment"] = 2] = "Comment";
    Opcodes[Opcodes["Modifier"] = 3] = "Modifier";
    Opcodes[Opcodes["Block"] = 4] = "Block";
    Opcodes[Opcodes["Component"] = 5] = "Component";
    Opcodes[Opcodes["OpenElement"] = 6] = "OpenElement";
    Opcodes[Opcodes["FlushElement"] = 7] = "FlushElement";
    Opcodes[Opcodes["CloseElement"] = 8] = "CloseElement";
    Opcodes[Opcodes["StaticAttr"] = 9] = "StaticAttr";
    Opcodes[Opcodes["DynamicAttr"] = 10] = "DynamicAttr";
    Opcodes[Opcodes["Yield"] = 11] = "Yield";
    Opcodes[Opcodes["Partial"] = 12] = "Partial";
    Opcodes[Opcodes["DynamicArg"] = 13] = "DynamicArg";
    Opcodes[Opcodes["StaticArg"] = 14] = "StaticArg";
    Opcodes[Opcodes["TrustingAttr"] = 15] = "TrustingAttr";
    Opcodes[Opcodes["Debugger"] = 16] = "Debugger";
    Opcodes[Opcodes["ClientSideStatement"] = 17] = "ClientSideStatement";
    // Expressions
    Opcodes[Opcodes["Unknown"] = 18] = "Unknown";
    Opcodes[Opcodes["Get"] = 19] = "Get";
    Opcodes[Opcodes["MaybeLocal"] = 20] = "MaybeLocal";
    Opcodes[Opcodes["FixThisBeforeWeMerge"] = 21] = "FixThisBeforeWeMerge";
    Opcodes[Opcodes["HasBlock"] = 22] = "HasBlock";
    Opcodes[Opcodes["HasBlockParams"] = 23] = "HasBlockParams";
    Opcodes[Opcodes["Undefined"] = 24] = "Undefined";
    Opcodes[Opcodes["Helper"] = 25] = "Helper";
    Opcodes[Opcodes["Concat"] = 26] = "Concat";
    Opcodes[Opcodes["ClientSideExpression"] = 27] = "ClientSideExpression";
})(exports.Ops || (exports.Ops = {}));

function is(variant) {
    return function (value) {
        return Array.isArray(value) && value[0] === variant;
    };
}

(function (Expressions) {
    Expressions.isUnknown = is(exports.Ops.Unknown);
    Expressions.isGet = is(exports.Ops.Get);
    Expressions.isConcat = is(exports.Ops.Concat);
    Expressions.isHelper = is(exports.Ops.Helper);
    Expressions.isHasBlock = is(exports.Ops.HasBlock);
    Expressions.isHasBlockParams = is(exports.Ops.HasBlockParams);
    Expressions.isUndefined = is(exports.Ops.Undefined);
    Expressions.isClientSide = is(exports.Ops.ClientSideExpression);
    Expressions.isMaybeLocal = is(exports.Ops.MaybeLocal);
    function isPrimitiveValue(value) {
        if (value === null) {
            return true;
        }
        return typeof value !== 'object';
    }
    Expressions.isPrimitiveValue = isPrimitiveValue;
})(exports.Expressions || (exports.Expressions = {}));

(function (Statements) {
    Statements.isText = is(exports.Ops.Text);
    Statements.isAppend = is(exports.Ops.Append);
    Statements.isComment = is(exports.Ops.Comment);
    Statements.isModifier = is(exports.Ops.Modifier);
    Statements.isBlock = is(exports.Ops.Block);
    Statements.isComponent = is(exports.Ops.Component);
    Statements.isOpenElement = is(exports.Ops.OpenElement);
    Statements.isFlushElement = is(exports.Ops.FlushElement);
    Statements.isCloseElement = is(exports.Ops.CloseElement);
    Statements.isStaticAttr = is(exports.Ops.StaticAttr);
    Statements.isDynamicAttr = is(exports.Ops.DynamicAttr);
    Statements.isYield = is(exports.Ops.Yield);
    Statements.isPartial = is(exports.Ops.Partial);
    Statements.isDynamicArg = is(exports.Ops.DynamicArg);
    Statements.isStaticArg = is(exports.Ops.StaticArg);
    Statements.isTrustingAttr = is(exports.Ops.TrustingAttr);
    Statements.isDebugger = is(exports.Ops.Debugger);
    Statements.isClientSide = is(exports.Ops.ClientSideStatement);
    function isAttribute(val) {
        return val[0] === exports.Ops.StaticAttr || val[0] === exports.Ops.DynamicAttr || val[0] === exports.Ops.TrustingAttr;
    }
    Statements.isAttribute = isAttribute;
    function isArgument(val) {
        return val[0] === exports.Ops.StaticArg || val[0] === exports.Ops.DynamicArg;
    }
    Statements.isArgument = isArgument;
    function isParameter(val) {
        return isAttribute(val) || isArgument(val);
    }
    Statements.isParameter = isParameter;
    function getParameterName(s) {
        return s[1];
    }
    Statements.getParameterName = getParameterName;
})(exports.Statements || (exports.Statements = {}));

exports.is = is;

Object.defineProperty(exports, '__esModule', { value: true });

});
