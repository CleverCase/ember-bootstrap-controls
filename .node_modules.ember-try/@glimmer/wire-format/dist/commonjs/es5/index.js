'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Statements = exports.Expressions = exports.Ops = undefined;

var _opcodes = require('./lib/opcodes');

Object.defineProperty(exports, 'Ops', {
    enumerable: true,
    get: function () {
        return _opcodes.Opcodes;
    }
});
exports.is = is;
function is(variant) {
    return function (value) {
        return Array.isArray(value) && value[0] === variant;
    };
}
var Expressions = exports.Expressions = undefined;
(function (Expressions) {
    Expressions.isUnknown = is(_opcodes.Opcodes.Unknown);
    Expressions.isGet = is(_opcodes.Opcodes.Get);
    Expressions.isConcat = is(_opcodes.Opcodes.Concat);
    Expressions.isHelper = is(_opcodes.Opcodes.Helper);
    Expressions.isHasBlock = is(_opcodes.Opcodes.HasBlock);
    Expressions.isHasBlockParams = is(_opcodes.Opcodes.HasBlockParams);
    Expressions.isUndefined = is(_opcodes.Opcodes.Undefined);
    Expressions.isClientSide = is(_opcodes.Opcodes.ClientSideExpression);
    Expressions.isMaybeLocal = is(_opcodes.Opcodes.MaybeLocal);
    function isPrimitiveValue(value) {
        if (value === null) {
            return true;
        }
        return typeof value !== 'object';
    }
    Expressions.isPrimitiveValue = isPrimitiveValue;
})(Expressions || (exports.Expressions = Expressions = {}));
var Statements = exports.Statements = undefined;
(function (Statements) {
    Statements.isText = is(_opcodes.Opcodes.Text);
    Statements.isAppend = is(_opcodes.Opcodes.Append);
    Statements.isComment = is(_opcodes.Opcodes.Comment);
    Statements.isModifier = is(_opcodes.Opcodes.Modifier);
    Statements.isBlock = is(_opcodes.Opcodes.Block);
    Statements.isComponent = is(_opcodes.Opcodes.Component);
    Statements.isOpenElement = is(_opcodes.Opcodes.OpenElement);
    Statements.isFlushElement = is(_opcodes.Opcodes.FlushElement);
    Statements.isCloseElement = is(_opcodes.Opcodes.CloseElement);
    Statements.isStaticAttr = is(_opcodes.Opcodes.StaticAttr);
    Statements.isDynamicAttr = is(_opcodes.Opcodes.DynamicAttr);
    Statements.isYield = is(_opcodes.Opcodes.Yield);
    Statements.isPartial = is(_opcodes.Opcodes.Partial);
    Statements.isDynamicArg = is(_opcodes.Opcodes.DynamicArg);
    Statements.isStaticArg = is(_opcodes.Opcodes.StaticArg);
    Statements.isTrustingAttr = is(_opcodes.Opcodes.TrustingAttr);
    Statements.isDebugger = is(_opcodes.Opcodes.Debugger);
    Statements.isClientSide = is(_opcodes.Opcodes.ClientSideStatement);
    function isAttribute(val) {
        return val[0] === _opcodes.Opcodes.StaticAttr || val[0] === _opcodes.Opcodes.DynamicAttr || val[0] === _opcodes.Opcodes.TrustingAttr;
    }
    Statements.isAttribute = isAttribute;
    function isArgument(val) {
        return val[0] === _opcodes.Opcodes.StaticArg || val[0] === _opcodes.Opcodes.DynamicArg;
    }
    Statements.isArgument = isArgument;
    function isParameter(val) {
        return isAttribute(val) || isArgument(val);
    }
    Statements.isParameter = isParameter;
    function getParameterName(s) {
        return s[1];
    }
    Statements.getParameterName = getParameterName;
})(Statements || (exports.Statements = Statements = {}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sIm5hbWVzIjpbIk9wY29kZXMiLCJPcHMiLCJpcyIsInZhcmlhbnQiLCJ2YWx1ZSIsIkFycmF5IiwiaXNBcnJheSIsIkV4cHJlc3Npb25zIiwiaXNVbmtub3duIiwiVW5rbm93biIsImlzR2V0IiwiR2V0IiwiaXNDb25jYXQiLCJDb25jYXQiLCJpc0hlbHBlciIsIkhlbHBlciIsImlzSGFzQmxvY2siLCJIYXNCbG9jayIsImlzSGFzQmxvY2tQYXJhbXMiLCJIYXNCbG9ja1BhcmFtcyIsImlzVW5kZWZpbmVkIiwiVW5kZWZpbmVkIiwiaXNDbGllbnRTaWRlIiwiQ2xpZW50U2lkZUV4cHJlc3Npb24iLCJpc01heWJlTG9jYWwiLCJNYXliZUxvY2FsIiwiaXNQcmltaXRpdmVWYWx1ZSIsIlN0YXRlbWVudHMiLCJpc1RleHQiLCJUZXh0IiwiaXNBcHBlbmQiLCJBcHBlbmQiLCJpc0NvbW1lbnQiLCJDb21tZW50IiwiaXNNb2RpZmllciIsIk1vZGlmaWVyIiwiaXNCbG9jayIsIkJsb2NrIiwiaXNDb21wb25lbnQiLCJDb21wb25lbnQiLCJpc09wZW5FbGVtZW50IiwiT3BlbkVsZW1lbnQiLCJpc0ZsdXNoRWxlbWVudCIsIkZsdXNoRWxlbWVudCIsImlzQ2xvc2VFbGVtZW50IiwiQ2xvc2VFbGVtZW50IiwiaXNTdGF0aWNBdHRyIiwiU3RhdGljQXR0ciIsImlzRHluYW1pY0F0dHIiLCJEeW5hbWljQXR0ciIsImlzWWllbGQiLCJZaWVsZCIsImlzUGFydGlhbCIsIlBhcnRpYWwiLCJpc0R5bmFtaWNBcmciLCJEeW5hbWljQXJnIiwiaXNTdGF0aWNBcmciLCJTdGF0aWNBcmciLCJpc1RydXN0aW5nQXR0ciIsIlRydXN0aW5nQXR0ciIsImlzRGVidWdnZXIiLCJEZWJ1Z2dlciIsIkNsaWVudFNpZGVTdGF0ZW1lbnQiLCJpc0F0dHJpYnV0ZSIsInZhbCIsImlzQXJndW1lbnQiLCJpc1BhcmFtZXRlciIsImdldFBhcmFtZXRlck5hbWUiLCJzIl0sIm1h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QUEsQUFBSSxPQUFPLGlCQUFyRixBQUE2RixBQUNoRztBQUNEO2VBQUEsQUFBVyxjQUFYLEFBQXlCLEFBQ3pCO2FBQUEsQUFBUyxXQUFULEFBQW9CLEtBQUssQUFDckI7ZUFBTyxJQUFBLEFBQUksT0FBTyxpQkFBWCxBQUFtQixhQUFhLElBQUEsQUFBSSxPQUFPLGlCQUFsRCxBQUEwRCxBQUM3RDtBQUNEO2VBQUEsQUFBVyxhQUFYLEFBQXdCLEFBQ3hCO2FBQUEsQUFBUyxZQUFULEFBQXFCLEtBQUssQUFDdEI7ZUFBTyxZQUFBLEFBQVksUUFBUSxXQUEzQixBQUEyQixBQUFXLEFBQ3pDO0FBQ0Q7ZUFBQSxBQUFXLGNBQVgsQUFBeUIsQUFDekI7YUFBQSxBQUFTLGlCQUFULEFBQTBCLEdBQUcsQUFDekI7ZUFBTyxFQUFQLEFBQU8sQUFBRSxBQUNaO0FBQ0Q7ZUFBQSxBQUFXLG1CQUFYLEFBQThCLEFBQ2pDO0FBbkNELEdBbUNHLG9DQUFlLGFBbkNsQixBQW1DRyxBQUE0QiIsImZpbGUiOiJpbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE9wY29kZXMgfSBmcm9tICcuL2xpYi9vcGNvZGVzJztcbmV4cG9ydCB7IE9wY29kZXMgYXMgT3BzIH0gZnJvbSAnLi9saWIvb3Bjb2Rlcyc7XG5leHBvcnQgZnVuY3Rpb24gaXModmFyaWFudCkge1xuICAgIHJldHVybiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIEFycmF5LmlzQXJyYXkodmFsdWUpICYmIHZhbHVlWzBdID09PSB2YXJpYW50O1xuICAgIH07XG59XG5leHBvcnQgdmFyIEV4cHJlc3Npb25zO1xuKGZ1bmN0aW9uIChFeHByZXNzaW9ucykge1xuICAgIEV4cHJlc3Npb25zLmlzVW5rbm93biA9IGlzKE9wY29kZXMuVW5rbm93bik7XG4gICAgRXhwcmVzc2lvbnMuaXNHZXQgPSBpcyhPcGNvZGVzLkdldCk7XG4gICAgRXhwcmVzc2lvbnMuaXNDb25jYXQgPSBpcyhPcGNvZGVzLkNvbmNhdCk7XG4gICAgRXhwcmVzc2lvbnMuaXNIZWxwZXIgPSBpcyhPcGNvZGVzLkhlbHBlcik7XG4gICAgRXhwcmVzc2lvbnMuaXNIYXNCbG9jayA9IGlzKE9wY29kZXMuSGFzQmxvY2spO1xuICAgIEV4cHJlc3Npb25zLmlzSGFzQmxvY2tQYXJhbXMgPSBpcyhPcGNvZGVzLkhhc0Jsb2NrUGFyYW1zKTtcbiAgICBFeHByZXNzaW9ucy5pc1VuZGVmaW5lZCA9IGlzKE9wY29kZXMuVW5kZWZpbmVkKTtcbiAgICBFeHByZXNzaW9ucy5pc0NsaWVudFNpZGUgPSBpcyhPcGNvZGVzLkNsaWVudFNpZGVFeHByZXNzaW9uKTtcbiAgICBFeHByZXNzaW9ucy5pc01heWJlTG9jYWwgPSBpcyhPcGNvZGVzLk1heWJlTG9jYWwpO1xuICAgIGZ1bmN0aW9uIGlzUHJpbWl0aXZlVmFsdWUodmFsdWUpIHtcbiAgICAgICAgaWYgKHZhbHVlID09PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHlwZW9mIHZhbHVlICE9PSAnb2JqZWN0JztcbiAgICB9XG4gICAgRXhwcmVzc2lvbnMuaXNQcmltaXRpdmVWYWx1ZSA9IGlzUHJpbWl0aXZlVmFsdWU7XG59KShFeHByZXNzaW9ucyB8fCAoRXhwcmVzc2lvbnMgPSB7fSkpO1xuZXhwb3J0IHZhciBTdGF0ZW1lbnRzO1xuKGZ1bmN0aW9uIChTdGF0ZW1lbnRzKSB7XG4gICAgU3RhdGVtZW50cy5pc1RleHQgPSBpcyhPcGNvZGVzLlRleHQpO1xuICAgIFN0YXRlbWVudHMuaXNBcHBlbmQgPSBpcyhPcGNvZGVzLkFwcGVuZCk7XG4gICAgU3RhdGVtZW50cy5pc0NvbW1lbnQgPSBpcyhPcGNvZGVzLkNvbW1lbnQpO1xuICAgIFN0YXRlbWVudHMuaXNNb2RpZmllciA9IGlzKE9wY29kZXMuTW9kaWZpZXIpO1xuICAgIFN0YXRlbWVudHMuaXNCbG9jayA9IGlzKE9wY29kZXMuQmxvY2spO1xuICAgIFN0YXRlbWVudHMuaXNDb21wb25lbnQgPSBpcyhPcGNvZGVzLkNvbXBvbmVudCk7XG4gICAgU3RhdGVtZW50cy5pc09wZW5FbGVtZW50ID0gaXMoT3Bjb2Rlcy5PcGVuRWxlbWVudCk7XG4gICAgU3RhdGVtZW50cy5pc0ZsdXNoRWxlbWVudCA9IGlzKE9wY29kZXMuRmx1c2hFbGVtZW50KTtcbiAgICBTdGF0ZW1lbnRzLmlzQ2xvc2VFbGVtZW50ID0gaXMoT3Bjb2Rlcy5DbG9zZUVsZW1lbnQpO1xuICAgIFN0YXRlbWVudHMuaXNTdGF0aWNBdHRyID0gaXMoT3Bjb2Rlcy5TdGF0aWNBdHRyKTtcbiAgICBTdGF0ZW1lbnRzLmlzRHluYW1pY0F0dHIgPSBpcyhPcGNvZGVzLkR5bmFtaWNBdHRyKTtcbiAgICBTdGF0ZW1lbnRzLmlzWWllbGQgPSBpcyhPcGNvZGVzLllpZWxkKTtcbiAgICBTdGF0ZW1lbnRzLmlzUGFydGlhbCA9IGlzKE9wY29kZXMuUGFydGlhbCk7XG4gICAgU3RhdGVtZW50cy5pc0R5bmFtaWNBcmcgPSBpcyhPcGNvZGVzLkR5bmFtaWNBcmcpO1xuICAgIFN0YXRlbWVudHMuaXNTdGF0aWNBcmcgPSBpcyhPcGNvZGVzLlN0YXRpY0FyZyk7XG4gICAgU3RhdGVtZW50cy5pc1RydXN0aW5nQXR0ciA9IGlzKE9wY29kZXMuVHJ1c3RpbmdBdHRyKTtcbiAgICBTdGF0ZW1lbnRzLmlzRGVidWdnZXIgPSBpcyhPcGNvZGVzLkRlYnVnZ2VyKTtcbiAgICBTdGF0ZW1lbnRzLmlzQ2xpZW50U2lkZSA9IGlzKE9wY29kZXMuQ2xpZW50U2lkZVN0YXRlbWVudCk7XG4gICAgZnVuY3Rpb24gaXNBdHRyaWJ1dGUodmFsKSB7XG4gICAgICAgIHJldHVybiB2YWxbMF0gPT09IE9wY29kZXMuU3RhdGljQXR0ciB8fCB2YWxbMF0gPT09IE9wY29kZXMuRHluYW1pY0F0dHIgfHwgdmFsWzBdID09PSBPcGNvZGVzLlRydXN0aW5nQXR0cjtcbiAgICB9XG4gICAgU3RhdGVtZW50cy5pc0F0dHJpYnV0ZSA9IGlzQXR0cmlidXRlO1xuICAgIGZ1bmN0aW9uIGlzQXJndW1lbnQodmFsKSB7XG4gICAgICAgIHJldHVybiB2YWxbMF0gPT09IE9wY29kZXMuU3RhdGljQXJnIHx8IHZhbFswXSA9PT0gT3Bjb2Rlcy5EeW5hbWljQXJnO1xuICAgIH1cbiAgICBTdGF0ZW1lbnRzLmlzQXJndW1lbnQgPSBpc0FyZ3VtZW50O1xuICAgIGZ1bmN0aW9uIGlzUGFyYW1ldGVyKHZhbCkge1xuICAgICAgICByZXR1cm4gaXNBdHRyaWJ1dGUodmFsKSB8fCBpc0FyZ3VtZW50KHZhbCk7XG4gICAgfVxuICAgIFN0YXRlbWVudHMuaXNQYXJhbWV0ZXIgPSBpc1BhcmFtZXRlcjtcbiAgICBmdW5jdGlvbiBnZXRQYXJhbWV0ZXJOYW1lKHMpIHtcbiAgICAgICAgcmV0dXJuIHNbMV07XG4gICAgfVxuICAgIFN0YXRlbWVudHMuZ2V0UGFyYW1ldGVyTmFtZSA9IGdldFBhcmFtZXRlck5hbWU7XG59KShTdGF0ZW1lbnRzIHx8IChTdGF0ZW1lbnRzID0ge30pKTsiXX0=