// import { metaFor } from './meta';
// import { intern } from '@glimmer/util';
// import { metaFor } from './meta';
export function setProperty(parent, property, val) {
    // let rootProp = metaFor(parent).root().chainFor(property));
    // let referencesToNotify = metaFor(parent).referencesFor(property));
    parent[property] = val;
    // if (referencesToNotify) {
    //   referencesToNotify.forEach(function(ref) { ref.notify(); });
    // }
    // if (rootProp) rootProp.notify();
}
export function notifyProperty(_parent, _property) {
    // let rootProp = metaFor(parent).root().chainFor(property));
    // let referencesToNotify = metaFor(parent).referencesFor(property));
    // if (referencesToNotify) {
    //   referencesToNotify.forEach(function(ref) { ref.notify(); });
    // }
    // if (rootProp) rootProp.notify();
}